# 1 "test.c"
# 1 "/var/root/Source/DVRMobilePro//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "test.c"


# 1 "/var/include/Foundation/Foundation.h" 1





# 1 "/var/include/CoreFoundation/CoreFoundation.h" 1
# 11 "/var/include/CoreFoundation/CoreFoundation.h"
# 1 "/var/include/sys/types.h" 1
# 72 "/var/include/sys/types.h"
# 1 "/var/include/sys/appleapiopts.h" 1
# 73 "/var/include/sys/types.h" 2


# 1 "/var/include/sys/cdefs.h" 1
# 76 "/var/include/sys/types.h" 2


# 1 "/var/include/machine/types.h" 1
# 39 "/var/include/machine/types.h"
# 1 "/var/include/arm/types.h" 1
# 46 "/var/include/arm/types.h"
# 1 "/var/include/arm/_types.h" 1
# 13 "/var/include/arm/_types.h"
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 46 "/var/include/arm/_types.h"
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef int __darwin_ptrdiff_t;





typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 47 "/var/include/arm/types.h" 2







typedef signed char int8_t;

typedef unsigned char u_int8_t;


typedef short int16_t;

typedef unsigned short u_int16_t;


typedef int int32_t;

typedef unsigned int u_int32_t;


typedef long long int64_t;

typedef unsigned long long u_int64_t;

typedef int32_t register_t;



typedef __darwin_intptr_t intptr_t;



typedef unsigned long uintptr_t;




typedef u_int32_t user_addr_t;
typedef u_int32_t user_size_t;
typedef int32_t user_ssize_t;
typedef int32_t user_long_t;
typedef u_int32_t user_ulong_t;
typedef int32_t user_time_t;
typedef int64_t user_off_t;







typedef u_int32_t syscall_arg_t;
# 40 "/var/include/machine/types.h" 2
# 79 "/var/include/sys/types.h" 2
# 1 "/var/include/sys/_types.h" 1
# 33 "/var/include/sys/_types.h"
# 1 "/var/include/machine/_types.h" 1
# 34 "/var/include/sys/_types.h" 2
# 58 "/var/include/sys/_types.h"
struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[596]; };
# 94 "/var/include/sys/_types.h"
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];
# 80 "/var/include/sys/types.h" 2

# 1 "/var/include/machine/endian.h" 1
# 39 "/var/include/machine/endian.h"
# 1 "/var/include/arm/endian.h" 1
# 75 "/var/include/arm/endian.h"
# 1 "/var/include/sys/_endian.h" 1
# 124 "/var/include/sys/_endian.h"
# 1 "/var/include/libkern/_OSByteOrder.h" 1
# 70 "/var/include/libkern/_OSByteOrder.h"
# 1 "/var/include/libkern/arm/OSByteOrder.h" 1







# 1 "/var/include/gcc/darwin/4.0/stdint.h" 1
# 40 "/var/include/gcc/darwin/4.0/stdint.h"
typedef unsigned char uint8_t;




typedef unsigned short uint16_t;




typedef unsigned int uint32_t;




typedef unsigned long long uint64_t;



typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 97 "/var/include/gcc/darwin/4.0/stdint.h"
typedef long long int intmax_t;
# 106 "/var/include/gcc/darwin/4.0/stdint.h"
typedef long long unsigned int uintmax_t;
# 9 "/var/include/libkern/arm/OSByteOrder.h" 2
# 1 "/var/include/arm/arch.h" 1
# 10 "/var/include/libkern/arm/OSByteOrder.h" 2
# 21 "/var/include/libkern/arm/OSByteOrder.h"
static __inline__
uint16_t
_OSSwapInt16(
    uint16_t data
)
{

  __asm__ ("rev16 %0, %1\n" : "=l" (data) : "l" (data));




  return data;
}

static __inline__
uint32_t
_OSSwapInt32(
    uint32_t data
)
{

  __asm__ ("rev %0, %1\n" : "=l" (data) : "l" (data));





  return data;
}

static __inline__
uint64_t
_OSSwapInt64(
    uint64_t data
)
{
    union {
        uint64_t ull;
        uint32_t ul[2];
    } u;


    u.ul[0] = (uint32_t)(data >> 32);
    u.ul[1] = (uint32_t)(data & 0xffffffff);
    u.ul[0] = _OSSwapInt32(u.ul[0]);
    u.ul[1] = _OSSwapInt32(u.ul[1]);
    return u.ull;
}



static __inline__
uint16_t
OSReadSwapInt16(
    const volatile void * base,
    uintptr_t offset
)
{
    uint16_t result;

    result = *(volatile uint16_t *)((volatile uintptr_t)base + offset);
    return _OSSwapInt16(result);
}

static __inline__
uint32_t
OSReadSwapInt32(
    const volatile void * base,
    uintptr_t offset
)
{
    uint32_t result;

    result = *(volatile uint32_t *)((volatile uintptr_t)base + offset);
    return _OSSwapInt32(result);
}

static __inline__
uint64_t
OSReadSwapInt64(
    const volatile void * base,
    uintptr_t offset
)
{
    volatile uint32_t * inp;
    union ullc {
        uint64_t ull;
        uint32_t ul[2];
    } outv;

    inp = (volatile uint32_t *)((volatile uintptr_t)base + offset);
    outv.ul[0] = inp[1];
    outv.ul[1] = inp[0];
    outv.ul[0] = _OSSwapInt32(outv.ul[0]);
    outv.ul[1] = _OSSwapInt32(outv.ul[1]);
    return outv.ull;
}



static __inline__
void
OSWriteSwapInt16(
    volatile void * base,
    uintptr_t offset,
    uint16_t data
)
{
    *(volatile uint16_t *)((volatile uintptr_t)base + offset) = _OSSwapInt16(data);
}

static __inline__
void
OSWriteSwapInt32(
    volatile void * base,
    uintptr_t offset,
    uint32_t data
)
{
    *(volatile uint32_t *)((volatile uintptr_t)base + offset) = _OSSwapInt32(data);
}

static __inline__
void
OSWriteSwapInt64(
    volatile void * base,
    uintptr_t offset,
    uint64_t data
)
{
    *(volatile uint64_t *)((volatile uintptr_t)base + offset) = _OSSwapInt64(data);
}
# 71 "/var/include/libkern/_OSByteOrder.h" 2
# 125 "/var/include/sys/_endian.h" 2
# 76 "/var/include/arm/endian.h" 2
# 40 "/var/include/machine/endian.h" 2
# 82 "/var/include/sys/types.h" 2


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;


typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;


typedef __darwin_dev_t dev_t;



typedef u_int32_t fixpt_t;


typedef __darwin_blkcnt_t blkcnt_t;




typedef __darwin_blksize_t blksize_t;




typedef __darwin_gid_t gid_t;





typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;



typedef __darwin_ino_t ino_t;





typedef __darwin_ino64_t ino64_t;






typedef __int32_t key_t;



typedef __darwin_mode_t mode_t;




typedef __uint16_t nlink_t;





typedef __darwin_id_t id_t;



typedef __darwin_pid_t pid_t;




typedef __darwin_off_t off_t;



typedef int32_t segsz_t;
typedef int32_t swblk_t;


typedef __darwin_uid_t uid_t;
# 223 "/var/include/sys/types.h"
typedef __darwin_clock_t clock_t;






typedef __darwin_size_t size_t;




typedef __darwin_ssize_t ssize_t;




typedef __darwin_time_t time_t;




typedef __darwin_useconds_t useconds_t;




typedef __darwin_suseconds_t suseconds_t;
# 260 "/var/include/sys/types.h"
# 1 "/var/include/sys/_structs.h" 1
# 183 "/var/include/sys/_structs.h"

typedef struct fd_set {
 __int32_t fds_bits[(((1024) + (((sizeof(__int32_t) * 8)) - 1)) / ((sizeof(__int32_t) * 8)))];
} fd_set;



static __inline int
__darwin_fd_isset(int _n, struct fd_set *_p)
{
 return (_p->fds_bits[_n/(sizeof(__int32_t) * 8)] & (1<<(_n % (sizeof(__int32_t) * 8))));
}
# 261 "/var/include/sys/types.h" 2




typedef __int32_t fd_mask;
# 318 "/var/include/sys/types.h"
typedef __darwin_pthread_attr_t pthread_attr_t;



typedef __darwin_pthread_cond_t pthread_cond_t;



typedef __darwin_pthread_condattr_t pthread_condattr_t;



typedef __darwin_pthread_mutex_t pthread_mutex_t;



typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;



typedef __darwin_pthread_once_t pthread_once_t;



typedef __darwin_pthread_rwlock_t pthread_rwlock_t;



typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;



typedef __darwin_pthread_t pthread_t;






typedef __darwin_pthread_key_t pthread_key_t;





typedef __darwin_fsblkcnt_t fsblkcnt_t;




typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 12 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/stdarg.h" 1



# 1 "/usr/lib/gcc/arm-apple-darwin9/4.2.1/include/stdarg.h" 1 3 4
# 43 "/usr/lib/gcc/arm-apple-darwin9/4.2.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 105 "/usr/lib/gcc/arm-apple-darwin9/4.2.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 5 "/var/include/stdarg.h" 2
# 13 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/assert.h" 1
# 75 "/var/include/assert.h"

void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));
void __eprintf(const char *, const char *, unsigned, const char *) __attribute__((__noreturn__));

# 14 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/ctype.h" 1
# 15 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/errno.h" 1
# 23 "/var/include/errno.h"
# 1 "/var/include/sys/errno.h" 1
# 73 "/var/include/sys/errno.h"

extern int * __error(void);


# 24 "/var/include/errno.h" 2
# 16 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/float.h" 1







# 1 "/usr/lib/gcc/arm-apple-darwin9/4.2.1/include/float.h" 1 3 4
# 9 "/var/include/float.h" 2
# 17 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/limits.h" 1
# 64 "/var/include/limits.h"
# 1 "/var/include/machine/limits.h" 1
# 10 "/var/include/machine/limits.h"
# 1 "/var/include/arm/limits.h" 1
# 43 "/var/include/arm/limits.h"
# 1 "/var/include/arm/_limits.h" 1
# 44 "/var/include/arm/limits.h" 2
# 11 "/var/include/machine/limits.h" 2
# 65 "/var/include/limits.h" 2
# 1 "/var/include/sys/syslimits.h" 1
# 66 "/var/include/limits.h" 2
# 18 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/locale.h" 1
# 40 "/var/include/locale.h"
# 1 "/var/include/_locale.h" 1
# 41 "/var/include/_locale.h"
# 1 "/var/include/_types.h" 1
# 29 "/var/include/_types.h"
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;



typedef unsigned long __darwin_wctype_t;
# 42 "/var/include/_locale.h" 2

struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};






struct lconv *localeconv(void);

# 41 "/var/include/locale.h" 2
# 52 "/var/include/locale.h"

char *setlocale(int, const char *);

# 19 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/math.h" 1
# 30 "/var/include/math.h"
# 1 "/var/include/architecture/arm/math.h" 1
# 47 "/var/include/architecture/arm/math.h"
    typedef float float_t;
    typedef double double_t;
# 87 "/var/include/architecture/arm/math.h"
enum {
    _FP_NAN = 1,
    _FP_INFINITE = 2,
    _FP_ZERO = 3,
    _FP_NORMAL = 4,
    _FP_SUBNORMAL = 5,
    _FP_SUPERNORMAL = 6
};
# 121 "/var/include/architecture/arm/math.h"
extern int __math_errhandling ( void );
# 141 "/var/include/architecture/arm/math.h"
extern int __fpclassifyf(float );
extern int __fpclassify(double );
extern int __fpclassifyl(long double);
# 177 "/var/include/architecture/arm/math.h"
static __inline__ int __inline_isfinitef (float ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isfinited (double ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isfinite (long double) __attribute__ ((__always_inline__));
static __inline__ int __inline_isinff (float ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isinfd (double ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isinf (long double) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnanf (float ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnand (double ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnan (long double) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnormalf (float ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnormald (double ) __attribute__ ((__always_inline__));
static __inline__ int __inline_isnormal (long double) __attribute__ ((__always_inline__));
static __inline__ int __inline_signbitf (float ) __attribute__ ((__always_inline__));
static __inline__ int __inline_signbitd (double ) __attribute__ ((__always_inline__));
static __inline__ int __inline_signbit (long double) __attribute__ ((__always_inline__));

static __inline__ int __inline_isinff( float __x ) { return __builtin_fabsf(__x) == __builtin_inff(); }
static __inline__ int __inline_isinfd( double __x ) { return __builtin_fabs(__x) == __builtin_inf(); }
static __inline__ int __inline_isinf( long double __x ) { return __builtin_fabsl(__x) == __builtin_infl(); }
static __inline__ int __inline_isfinitef( float __x ) { return __x == __x && __builtin_fabsf(__x) != __builtin_inff(); }
static __inline__ int __inline_isfinited( double __x ) { return __x == __x && __builtin_fabs(__x) != __builtin_inf(); }
static __inline__ int __inline_isfinite( long double __x ) { return __x == __x && __builtin_fabsl(__x) != __builtin_infl(); }
static __inline__ int __inline_isnanf( float __x ) { return __x != __x; }
static __inline__ int __inline_isnand( double __x ) { return __x != __x; }
static __inline__ int __inline_isnan( long double __x ) { return __x != __x; }
static __inline__ int __inline_signbitf( float __x ) { union{ float __f; unsigned int __u; }__u; __u.__f = __x; return (int)(__u.__u >> 31); }
static __inline__ int __inline_signbitd( double __x ) { union{ double __f; unsigned long long __u; }__u; __u.__f = __x; return (int)(__u.__u >> 63); }
static __inline__ int __inline_signbit( long double __x ){ union{ double __f; unsigned long long __u; }__u; __u.__f = __x; return (int)(__u.__u >> 63); }
static __inline__ int __inline_isnormalf( float __x ) { float fabsf = __builtin_fabsf(__x); if( __x != __x ) return 0; return fabsf < __builtin_inff() && fabsf >= 1.17549435e-38F; }
static __inline__ int __inline_isnormald( double __x ) { double fabsf = __builtin_fabs(__x); if( __x != __x ) return 0; return fabsf < __builtin_inf() && fabsf >= 2.2250738585072014e-308; }
static __inline__ int __inline_isnormal( long double __x ) { long double fabsf = __builtin_fabsl(__x); if( __x != __x ) return 0; return fabsf < __builtin_infl() && fabsf >= 2.2250738585072014e-308L; }
# 217 "/var/include/architecture/arm/math.h"
extern double acos( double );
extern float acosf( float );

extern double asin( double );
extern float asinf( float );

extern double atan( double );
extern float atanf( float );

extern double atan2( double, double );
extern float atan2f( float, float );

extern double cos( double );
extern float cosf( float );

extern double sin( double );
extern float sinf( float );

extern double tan( double );
extern float tanf( float );

extern double acosh( double );
extern float acoshf( float );

extern double asinh( double );
extern float asinhf( float );

extern double atanh( double );
extern float atanhf( float );

extern double cosh( double );
extern float coshf( float );

extern double sinh( double );
extern float sinhf( float );

extern double tanh( double );
extern float tanhf( float );

extern double exp ( double );
extern float expf ( float );

extern double exp2 ( double );
extern float exp2f ( float );

extern double expm1 ( double );
extern float expm1f ( float );

extern double log ( double );
extern float logf ( float );

extern double log10 ( double );
extern float log10f ( float );

extern double log2 ( double );
extern float log2f ( float );

extern double log1p ( double );
extern float log1pf ( float );

extern double logb ( double );
extern float logbf ( float );

extern double modf ( double, double * );
extern float modff ( float, float * );

extern double ldexp ( double, int );
extern float ldexpf ( float, int );

extern double frexp ( double, int * );
extern float frexpf ( float, int * );

extern int ilogb ( double );
extern int ilogbf ( float );

extern double scalbn ( double, int );
extern float scalbnf ( float, int );

extern double scalbln ( double, long int );
extern float scalblnf ( float, long int );

extern double fabs( double );
extern float fabsf( float );

extern double cbrt( double );
extern float cbrtf( float );

extern double hypot ( double, double );
extern float hypotf ( float, float );

extern double pow ( double, double );
extern float powf ( float, float );

extern double sqrt( double );
extern float sqrtf( float );

extern double erf( double );
extern float erff( float );

extern double erfc( double );
extern float erfcf( float );




extern double lgamma( double );
extern float lgammaf( float );

extern double tgamma( double );
extern float tgammaf( float );

extern double ceil ( double );
extern float ceilf ( float );

extern double floor ( double );
extern float floorf ( float );

extern double nearbyint ( double );
extern float nearbyintf ( float );

extern double rint ( double );
extern float rintf ( float );

extern long int lrint ( double );
extern long int lrintf ( float );

extern double round ( double );
extern float roundf ( float );

extern long int lround ( double );
extern long int lroundf ( float );




    extern long long int llrint ( double );
    extern long long int llrintf ( float );

    extern long long int llround ( double );
    extern long long int llroundf ( float );



extern double trunc ( double );
extern float truncf ( float );

extern double fmod ( double, double );
extern float fmodf ( float, float );

extern double remainder ( double, double );
extern float remainderf ( float, float );

extern double remquo ( double, double, int * );
extern float remquof ( float, float, int * );

extern double copysign ( double, double );
extern float copysignf ( float, float );

extern double nan( const char * );
extern float nanf( const char * );

extern double nextafter ( double, double );
extern float nextafterf ( float, float );

extern double fdim ( double, double );
extern float fdimf ( float, float );

extern double fmax ( double, double );
extern float fmaxf ( float, float );

extern double fmin ( double, double );
extern float fminf ( float, float );

extern double fma ( double, double, double );
extern float fmaf ( float, float, float );

extern long double acosl(long double);
extern long double asinl(long double);
extern long double atanl(long double);
extern long double atan2l(long double, long double);
extern long double cosl(long double);
extern long double sinl(long double);
extern long double tanl(long double);
extern long double acoshl(long double);
extern long double asinhl(long double);
extern long double atanhl(long double);
extern long double coshl(long double);
extern long double sinhl(long double);
extern long double tanhl(long double);
extern long double expl(long double);
extern long double exp2l(long double);
extern long double expm1l(long double);
extern long double logl(long double);
extern long double log10l(long double);
extern long double log2l(long double);
extern long double log1pl(long double);
extern long double logbl(long double);
extern long double modfl(long double, long double *);
extern long double ldexpl(long double, int);
extern long double frexpl(long double, int *);
extern int ilogbl(long double);
extern long double scalbnl(long double, int);
extern long double scalblnl(long double, long int);
extern long double fabsl(long double);
extern long double cbrtl(long double);
extern long double hypotl(long double, long double);
extern long double powl(long double, long double);
extern long double sqrtl(long double);
extern long double erfl(long double);
extern long double erfcl(long double);

extern long double lgammal(long double);
extern long double tgammal(long double);
extern long double ceill(long double);
extern long double floorl(long double);
extern long double nearbyintl(long double);
extern long double rintl(long double);
extern long int lrintl(long double);
extern long double roundl(long double);
extern long int lroundl(long double);



    extern long long int llrintl(long double);
    extern long long int llroundl(long double);


extern long double truncl(long double);
extern long double fmodl(long double, long double);
extern long double remainderl(long double, long double);
extern long double remquol(long double, long double, int *);
extern long double copysignl(long double, long double);
extern long double nanl(const char *);
extern long double nextafterl(long double, long double);
extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);
extern long double fdiml(long double, long double);
extern long double fmaxl(long double, long double);
extern long double fminl(long double, long double);
extern long double fmal(long double, long double, long double);
# 469 "/var/include/architecture/arm/math.h"
extern double scalb ( double, double );
extern int signgam;
# 31 "/var/include/math.h" 2
# 20 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/setjmp.h" 1
# 26 "/var/include/setjmp.h"
# 1 "/var/include/machine/setjmp.h" 1
# 39 "/var/include/machine/setjmp.h"
# 1 "/var/include/arm/setjmp.h" 1
# 40 "/var/include/machine/setjmp.h" 2
# 27 "/var/include/setjmp.h" 2
# 21 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/signal.h" 1
# 63 "/var/include/signal.h"
# 1 "/var/include/sys/signal.h" 1
# 81 "/var/include/sys/signal.h"
# 1 "/var/include/machine/signal.h" 1
# 36 "/var/include/machine/signal.h"
# 1 "/var/include/arm/signal.h" 1
# 21 "/var/include/arm/signal.h"
# 1 "/var/include/arm/_structs.h" 1
# 22 "/var/include/arm/signal.h" 2

typedef int sig_atomic_t;
# 37 "/var/include/machine/signal.h" 2
# 82 "/var/include/sys/signal.h" 2
# 154 "/var/include/sys/signal.h"
# 1 "/var/include/sys/_structs.h" 1
# 57 "/var/include/sys/_structs.h"
# 1 "/var/include/machine/_structs.h" 1
# 33 "/var/include/machine/_structs.h"
# 1 "/var/include/arm/_structs.h" 1
# 14 "/var/include/arm/_structs.h"
# 1 "/var/include/mach/arm/_structs.h" 1
# 12 "/var/include/mach/arm/_structs.h"
struct __darwin_arm_exception_state
{
 __uint32_t __exception;
 __uint32_t __fsr;
 __uint32_t __far;
};
# 30 "/var/include/mach/arm/_structs.h"
struct __darwin_arm_thread_state
{
 __uint32_t __r[13];
 __uint32_t __sp;
 __uint32_t __lr;
 __uint32_t __pc;
 __uint32_t __cpsr;
};
# 52 "/var/include/mach/arm/_structs.h"
struct __darwin_arm_vfp_state
{
 __uint32_t __r[64];
 __uint32_t __fpscr;

};
# 68 "/var/include/mach/arm/_structs.h"
struct __darwin_arm_debug_state
{
 __uint32_t __bvr[16];
 __uint32_t __bcr[16];
 __uint32_t __wvr[16];
 __uint32_t __wcr[16];
};
# 15 "/var/include/arm/_structs.h" 2
# 23 "/var/include/arm/_structs.h"
struct __darwin_mcontext
{
 struct __darwin_arm_exception_state __es;
 struct __darwin_arm_thread_state __ss;
 struct __darwin_arm_vfp_state __fs;
};
# 34 "/var/include/machine/_structs.h" 2
# 58 "/var/include/sys/_structs.h" 2
# 75 "/var/include/sys/_structs.h"
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
# 128 "/var/include/sys/_structs.h"
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext *uc_mcontext;



};
# 218 "/var/include/sys/_structs.h"
typedef struct __darwin_sigaltstack stack_t;
# 227 "/var/include/sys/_structs.h"
typedef struct __darwin_ucontext ucontext_t;
# 155 "/var/include/sys/signal.h" 2
# 168 "/var/include/sys/signal.h"
typedef __darwin_sigset_t sigset_t;
# 181 "/var/include/sys/signal.h"
union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 292 "/var/include/sys/signal.h"
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 354 "/var/include/sys/signal.h"
typedef void (*sig_t)(int);
# 371 "/var/include/sys/signal.h"
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 390 "/var/include/sys/signal.h"
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 412 "/var/include/sys/signal.h"

void (*signal(int, void (*)(int)))(int);

# 64 "/var/include/signal.h" 2







extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];



int raise(int);




void (*bsd_signal(int, void (*)(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * ,
     struct sigaction * );
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * , stack_t * ) __asm("_" "sigaltstack" );
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * , sigset_t * );
int sigrelse(int);
void (*sigset(int, void (*)(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * , int * ) __asm("_" "sigwait" );

void psignal(unsigned int, const char *);
int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);


# 22 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/stddef.h" 1
# 74 "/var/include/stddef.h"
typedef __darwin_ptrdiff_t ptrdiff_t;
# 91 "/var/include/stddef.h"
typedef __darwin_wchar_t wchar_t;
# 100 "/var/include/stddef.h"
typedef __darwin_wint_t wint_t;
# 23 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/stdio.h" 1
# 87 "/var/include/stdio.h"
typedef __darwin_off_t fpos_t;
# 98 "/var/include/stdio.h"
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 132 "/var/include/stdio.h"
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;



extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;




# 248 "/var/include/stdio.h"

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);
FILE *fopen(const char * , const char * );
int fprintf(FILE * , const char * , ...) ;
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
     FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) ;
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);

extern const int sys_nerr;
extern const char *const sys_errlist[];

void perror(const char *);
int printf(const char * , ...) ;
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) ;
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) ;
int sscanf(const char * , const char * , ...) ;
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) ;
int vprintf(const char * , va_list) ;
int vsprintf(char * , const char * , va_list) ;

int asprintf(char **, const char *, ...) ;
int vasprintf(char **, const char *, va_list) ;










char *ctermid(char *);

char *ctermid_r(char *);

FILE *fdopen(int, const char *);

char *fgetln(FILE *, size_t *);

int fileno(FILE *);
void flockfile(FILE *);

const char
 *fmtcheck(const char *, const char *);
int fpurge(FILE *);

int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);

int getw(FILE *);

int pclose(FILE *);
FILE *popen(const char *, const char *);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);

int putw(int, FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);

int snprintf(char * , size_t, const char * , ...) ;
char *tempnam(const char *, const char *) __asm("_" "tempnam" );
int vfscanf(FILE * , const char * , va_list) ;
int vscanf(const char * , va_list) ;
int vsnprintf(char * , size_t, const char * , va_list) ;
int vsscanf(const char * , const char * , va_list) ;

FILE *zopen(const char *, const char *, int);








FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));

# 371 "/var/include/stdio.h"

int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) ;
int __swbuf(int, FILE *);








static __inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 24 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/stdlib.h" 1
# 61 "/var/include/stdlib.h"
# 1 "/var/include/Availability.h" 1
# 126 "/var/include/Availability.h"
# 1 "/var/include/AvailabilityInternal.h" 1
# 127 "/var/include/Availability.h" 2
# 62 "/var/include/stdlib.h" 2



# 1 "/var/include/sys/wait.h" 1
# 79 "/var/include/sys/wait.h"
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;
# 117 "/var/include/sys/wait.h"
# 1 "/var/include/sys/resource.h" 1
# 76 "/var/include/sys/resource.h"
# 1 "/var/include/sys/_structs.h" 1
# 100 "/var/include/sys/_structs.h"
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 77 "/var/include/sys/resource.h" 2
# 88 "/var/include/sys/resource.h"
typedef __uint64_t rlim_t;
# 142 "/var/include/sys/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 153 "/var/include/sys/resource.h"
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 213 "/var/include/sys/resource.h"
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 235 "/var/include/sys/resource.h"

int getpriority(int, id_t);

int getiopolicy_np(int, int);

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int);

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );

# 118 "/var/include/sys/wait.h" 2
# 201 "/var/include/sys/wait.h"
union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
# 254 "/var/include/sys/wait.h"

pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);


# 66 "/var/include/stdlib.h" 2

# 1 "/var/include/alloca.h" 1
# 35 "/var/include/alloca.h"

void *alloca(size_t);

# 68 "/var/include/stdlib.h" 2
# 81 "/var/include/stdlib.h"
typedef __darwin_ct_rune_t ct_rune_t;




typedef __darwin_rune_t rune_t;
# 97 "/var/include/stdlib.h"
typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;
# 134 "/var/include/stdlib.h"
extern int __mb_cur_max;
# 144 "/var/include/stdlib.h"

void abort(void) __attribute__((__noreturn__));
int abs(int) __attribute__((__const__));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
int posix_memalign(void **, size_t, size_t);
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **) ;

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *) __asm("_" "system" );
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" );
long random(void);
int rand_r(unsigned *);

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 267 "/var/include/stdlib.h"
u_int32_t
  arc4random(void);
void arc4random_addrandom(unsigned char *dat, int datlen);
void arc4random_stir(void);


char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" ) __attribute__((deprecated));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));
void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);







# 25 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/string.h" 1
# 80 "/var/include/string.h"

void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);

char *stpcpy(char *, const char *);
char *strcasestr(const char *, const char *);

char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror" );
int strerror_r(int, char *, size_t);
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);

char *strnstr(const char *, const char *, size_t);

char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);



void *memccpy(void *, const void *, int, size_t);
char *strtok_r(char *, const char *, char **);
char *strdup(const char *);

int bcmp(const void *, const void *, size_t);
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
int ffsl(long);
int fls(int);
int flsl(long);
char *index(const char *, int);
void memset_pattern4(void *, const void *, size_t);
void memset_pattern8(void *, const void *, size_t);
void memset_pattern16(void *, const void *, size_t);
char *rindex(const char *, int);
int strcasecmp(const char *, const char *);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
int strncasecmp(const char *, const char *, size_t);
char *strsep(char **, const char *);
char *strsignal(int sig);
void swab(const void * , void * , ssize_t);



# 26 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/time.h" 1
# 69 "/var/include/time.h"
# 1 "/var/include/_structs.h" 1
# 24 "/var/include/_structs.h"
# 1 "/var/include/sys/_structs.h" 1
# 88 "/var/include/sys/_structs.h"
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 25 "/var/include/_structs.h" 2
# 70 "/var/include/time.h" 2
# 90 "/var/include/time.h"
struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 113 "/var/include/time.h"
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * , size_t, const char * , const struct tm * ) __asm("_" "strftime" );
char *strptime(const char * , const char * , struct tm * ) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * , char * );
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * , struct tm * );
struct tm *localtime_r(const time_t * , struct tm * );


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *, struct timespec *) __asm("_" "nanosleep" );


# 27 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 38 "/var/include/CoreFoundation/CoreFoundation.h"
# 1 "/var/include/CoreFoundation/CFBase.h" 1
# 39 "/var/include/CoreFoundation/CFBase.h"
# 1 "/var/include/stdbool.h" 1
# 40 "/var/include/CoreFoundation/CFBase.h" 2

# 1 "/var/include/AvailabilityMacros.h" 1
# 42 "/var/include/CoreFoundation/CFBase.h" 2
# 1 "/var/include/TargetConditionals.h" 1
# 43 "/var/include/CoreFoundation/CFBase.h" 2




# 1 "/var/include/MacTypes.h" 1
# 41 "/var/include/MacTypes.h"
# 1 "/var/include/ConditionalMacros.h" 1
# 42 "/var/include/MacTypes.h" 2
# 58 "/var/include/MacTypes.h"
#pragma pack(push, 2)
# 106 "/var/include/MacTypes.h"
typedef unsigned char UInt8;
typedef signed char SInt8;
typedef unsigned short UInt16;
typedef signed short SInt16;





typedef unsigned long UInt32;
typedef signed long SInt32;
# 133 "/var/include/MacTypes.h"
struct wide {
  UInt32 lo;
  SInt32 hi;
};
typedef struct wide wide;
struct UnsignedWide {
  UInt32 lo;
  UInt32 hi;
};
typedef struct UnsignedWide UnsignedWide;
# 164 "/var/include/MacTypes.h"
      typedef signed long long SInt64;
        typedef unsigned long long UInt64;
# 184 "/var/include/MacTypes.h"
typedef SInt32 Fixed;
typedef Fixed * FixedPtr;
typedef SInt32 Fract;
typedef Fract * FractPtr;
typedef UInt32 UnsignedFixed;
typedef UnsignedFixed * UnsignedFixedPtr;
typedef short ShortFixed;
typedef ShortFixed * ShortFixedPtr;
# 211 "/var/include/MacTypes.h"
typedef float Float32;
typedef double Float64;
struct Float80 {
    SInt16 exp;
    UInt16 man[4];
};
typedef struct Float80 Float80;

struct Float96 {
    SInt16 exp[2];
    UInt16 man[4];
};
typedef struct Float96 Float96;
struct Float32Point {
    Float32 x;
    Float32 y;
};
typedef struct Float32Point Float32Point;
# 239 "/var/include/MacTypes.h"
typedef char * Ptr;
typedef Ptr * Handle;
typedef long Size;
# 269 "/var/include/MacTypes.h"
typedef SInt16 OSErr;
typedef SInt32 OSStatus;
typedef void * LogicalAddress;
typedef const void * ConstLogicalAddress;
typedef void * PhysicalAddress;
typedef UInt8 * BytePtr;
typedef unsigned long ByteCount;
typedef unsigned long ByteOffset;
typedef SInt32 Duration;
typedef UnsignedWide AbsoluteTime;
typedef UInt32 OptionBits;
typedef unsigned long ItemCount;
typedef UInt32 PBVersion;
typedef SInt16 ScriptCode;
typedef SInt16 LangCode;
typedef SInt16 RegionCode;
typedef UInt32 FourCharCode;
typedef FourCharCode OSType;
typedef FourCharCode ResType;
typedef OSType * OSTypePtr;
typedef ResType * ResTypePtr;
# 300 "/var/include/MacTypes.h"
typedef unsigned char Boolean;
# 313 "/var/include/MacTypes.h"
typedef long ( * ProcPtr)();
typedef void ( * Register68kProcPtr)();




typedef ProcPtr UniversalProcPtr;


typedef ProcPtr * ProcHandle;
typedef UniversalProcPtr * UniversalProcHandle;
# 338 "/var/include/MacTypes.h"
typedef void * PRefCon;




typedef UInt32 URefCon;
typedef SInt32 SRefCon;
# 368 "/var/include/MacTypes.h"
enum {
  noErr = 0
};

enum {
  kNilOptions = 0
};


enum {
  kVariableLengthArray = 1
};

enum {
  kUnknownType = 0x3F3F3F3F
};
# 437 "/var/include/MacTypes.h"
typedef UInt32 UnicodeScalarValue;
typedef UInt32 UTF32Char;
typedef UInt16 UniChar;
typedef UInt16 UTF16Char;
typedef UInt8 UTF8Char;
typedef UniChar * UniCharPtr;
typedef unsigned long UniCharCount;
typedef UniCharCount * UniCharCountPtr;
typedef unsigned char Str255[256];
typedef unsigned char Str63[64];
typedef unsigned char Str32[33];
typedef unsigned char Str31[32];
typedef unsigned char Str27[28];
typedef unsigned char Str15[16];
# 459 "/var/include/MacTypes.h"
typedef unsigned char Str32Field[34];
# 469 "/var/include/MacTypes.h"
typedef Str63 StrFileName;
typedef unsigned char * StringPtr;
typedef StringPtr * StringHandle;
typedef const unsigned char * ConstStringPtr;
typedef const unsigned char * ConstStr255Param;
typedef const unsigned char * ConstStr63Param;
typedef const unsigned char * ConstStr32Param;
typedef const unsigned char * ConstStr31Param;
typedef const unsigned char * ConstStr27Param;
typedef const unsigned char * ConstStr15Param;
typedef ConstStr63Param ConstStrFileNameParam;
# 496 "/var/include/MacTypes.h"
struct ProcessSerialNumber {
  UInt32 highLongOfPSN;
  UInt32 lowLongOfPSN;
};
typedef struct ProcessSerialNumber ProcessSerialNumber;
typedef ProcessSerialNumber * ProcessSerialNumberPtr;
# 518 "/var/include/MacTypes.h"
struct Point {
  short v;
  short h;
};
typedef struct Point Point;
typedef Point * PointPtr;
struct Rect {
  short top;
  short left;
  short bottom;
  short right;
};
typedef struct Rect Rect;
typedef Rect * RectPtr;
struct FixedPoint {
  Fixed x;
  Fixed y;
};
typedef struct FixedPoint FixedPoint;
struct FixedRect {
  Fixed left;
  Fixed top;
  Fixed right;
  Fixed bottom;
};
typedef struct FixedRect FixedRect;

typedef short CharParameter;
enum {
  normal = 0,
  bold = 1,
  italic = 2,
  underline = 4,
  outline = 8,
  shadow = 0x10,
  condense = 0x20,
  extend = 0x40
};

typedef unsigned char Style;
typedef short StyleParameter;
typedef Style StyleField;
# 574 "/var/include/MacTypes.h"
typedef SInt32 TimeValue;
typedef SInt32 TimeScale;
typedef wide CompTimeValue;
typedef SInt64 TimeValue64;
typedef struct TimeBaseRecord* TimeBase;
struct TimeRecord {
  CompTimeValue value;
  TimeScale scale;
  TimeBase base;
};
typedef struct TimeRecord TimeRecord;
# 626 "/var/include/MacTypes.h"
struct NumVersion {

  UInt8 nonRelRev;
  UInt8 stage;
  UInt8 minorAndBugRev;
  UInt8 majorRev;
};
typedef struct NumVersion NumVersion;


enum {

  developStage = 0x20,
  alphaStage = 0x40,
  betaStage = 0x60,
  finalStage = 0x80
};

union NumVersionVariant {

  NumVersion parts;
  UInt32 whole;
};
typedef union NumVersionVariant NumVersionVariant;
typedef NumVersionVariant * NumVersionVariantPtr;
typedef NumVersionVariantPtr * NumVersionVariantHandle;
struct VersRec {

  NumVersion numericVersion;
  short countryCode;
  Str255 shortVersion;
  Str255 reserved;
};
typedef struct VersRec VersRec;
typedef VersRec * VersRecPtr;
typedef VersRecPtr * VersRecHndl;





typedef UInt8 Byte;
typedef SInt8 SignedByte;
typedef wide * WidePtr;
typedef UnsignedWide * UnsignedWidePtr;
typedef Float80 extended80;
typedef Float96 extended96;
typedef SInt8 VHSelect;
# 687 "/var/include/MacTypes.h"
extern void
Debugger(void) ;
# 699 "/var/include/MacTypes.h"
extern void
DebugStr(ConstStr255Param debuggerMsg) ;
# 746 "/var/include/MacTypes.h"
extern void
SysBreak(void) ;
# 758 "/var/include/MacTypes.h"
extern void
SysBreakStr(ConstStr255Param debuggerMsg) ;
# 770 "/var/include/MacTypes.h"
extern void
SysBreakFunc(ConstStr255Param debuggerMsg) ;
# 781 "/var/include/MacTypes.h"
#pragma pack(pop)
# 48 "/var/include/CoreFoundation/CFBase.h" 2
# 104 "/var/include/CoreFoundation/CFBase.h"

# 156 "/var/include/CoreFoundation/CFBase.h"
extern double kCFCoreFoundationVersionNumber;
# 214 "/var/include/CoreFoundation/CFBase.h"
typedef unsigned long CFTypeID;
typedef unsigned long CFOptionFlags;
typedef unsigned long CFHashCode;
typedef signed long CFIndex;


typedef const void * CFTypeRef;

typedef const struct __CFString * CFStringRef;
typedef struct __CFString * CFMutableStringRef;






typedef CFTypeRef CFPropertyListRef;


enum {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1
};
typedef CFIndex CFComparisonResult;


typedef CFComparisonResult (*CFComparatorFunction)(const void *val1, const void *val2, void *context);



enum {
    kCFNotFound = -1
};



typedef struct {
    CFIndex location;
    CFIndex length;
} CFRange;


static __inline__ __attribute__((always_inline)) CFRange CFRangeMake(CFIndex loc, CFIndex len) {
    CFRange range;
    range.location = loc;
    range.length = len;
    return range;
}





extern
CFRange __CFRangeMake(CFIndex loc, CFIndex len);





typedef const struct __CFNull * CFNullRef;

extern
CFTypeID CFNullGetTypeID(void);

extern
const CFNullRef kCFNull;
# 295 "/var/include/CoreFoundation/CFBase.h"
typedef const struct __CFAllocator * CFAllocatorRef;


extern
const CFAllocatorRef kCFAllocatorDefault;


extern
const CFAllocatorRef kCFAllocatorSystemDefault;







extern
const CFAllocatorRef kCFAllocatorMalloc;





extern
const CFAllocatorRef kCFAllocatorMallocZone ;





extern
const CFAllocatorRef kCFAllocatorNull;





extern
const CFAllocatorRef kCFAllocatorUseContext;

typedef const void * (*CFAllocatorRetainCallBack)(const void *info);
typedef void (*CFAllocatorReleaseCallBack)(const void *info);
typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack)(const void *info);
typedef void * (*CFAllocatorAllocateCallBack)(CFIndex allocSize, CFOptionFlags hint, void *info);
typedef void * (*CFAllocatorReallocateCallBack)(void *ptr, CFIndex newsize, CFOptionFlags hint, void *info);
typedef void (*CFAllocatorDeallocateCallBack)(void *ptr, void *info);
typedef CFIndex (*CFAllocatorPreferredSizeCallBack)(CFIndex size, CFOptionFlags hint, void *info);
typedef struct {
    CFIndex version;
    void * info;
    CFAllocatorRetainCallBack retain;
    CFAllocatorReleaseCallBack release;
    CFAllocatorCopyDescriptionCallBack copyDescription;
    CFAllocatorAllocateCallBack allocate;
    CFAllocatorReallocateCallBack reallocate;
    CFAllocatorDeallocateCallBack deallocate;
    CFAllocatorPreferredSizeCallBack preferredSize;
} CFAllocatorContext;

extern
CFTypeID CFAllocatorGetTypeID(void);
# 380 "/var/include/CoreFoundation/CFBase.h"
extern
void CFAllocatorSetDefault(CFAllocatorRef allocator);

extern
CFAllocatorRef CFAllocatorGetDefault(void);

extern
CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context);

extern
void *CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);

extern
void *CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint);

extern
void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr);

extern
CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);

extern
void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context);




extern
CFTypeID CFGetTypeID(CFTypeRef cf);

extern
CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);

extern
CFTypeRef CFRetain(CFTypeRef cf);

extern
void CFRelease(CFTypeRef cf);

extern
CFIndex CFGetRetainCount(CFTypeRef cf);

extern
CFTypeRef CFMakeCollectable(CFTypeRef cf) ;

extern
Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);

extern
CFHashCode CFHash(CFTypeRef cf);

extern
CFStringRef CFCopyDescription(CFTypeRef cf);

extern
CFAllocatorRef CFGetAllocator(CFTypeRef cf);


# 39 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFArray.h" 1
# 49 "/var/include/CoreFoundation/CFArray.h"

# 73 "/var/include/CoreFoundation/CFArray.h"
typedef const void * (*CFArrayRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFArrayReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFArrayCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFArrayEqualCallBack)(const void *value1, const void *value2);
typedef struct {
    CFIndex version;
    CFArrayRetainCallBack retain;
    CFArrayReleaseCallBack release;
    CFArrayCopyDescriptionCallBack copyDescription;
    CFArrayEqualCallBack equal;
} CFArrayCallBacks;






extern
const CFArrayCallBacks kCFTypeArrayCallBacks;
# 101 "/var/include/CoreFoundation/CFArray.h"
typedef void (*CFArrayApplierFunction)(const void *value, void *context);





typedef const struct __CFArray * CFArrayRef;





typedef struct __CFArray * CFMutableArrayRef;





extern
CFTypeID CFArrayGetTypeID(void);
# 172 "/var/include/CoreFoundation/CFArray.h"
extern
CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks);
# 193 "/var/include/CoreFoundation/CFArray.h"
extern
CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
# 237 "/var/include/CoreFoundation/CFArray.h"
extern
CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
# 267 "/var/include/CoreFoundation/CFArray.h"
extern
CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);
# 277 "/var/include/CoreFoundation/CFArray.h"
extern
CFIndex CFArrayGetCount(CFArrayRef theArray);
# 300 "/var/include/CoreFoundation/CFArray.h"
extern
CFIndex CFArrayGetCountOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 323 "/var/include/CoreFoundation/CFArray.h"
extern
Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value);
# 337 "/var/include/CoreFoundation/CFArray.h"
extern
const void *CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);
# 358 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values);
# 385 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context);
# 410 "/var/include/CoreFoundation/CFArray.h"
extern
CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 435 "/var/include/CoreFoundation/CFArray.h"
extern
CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value);
# 474 "/var/include/CoreFoundation/CFArray.h"
extern
CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context);
# 490 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value);
# 511 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
# 532 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value);
# 546 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx);
# 556 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayRemoveAllValues(CFMutableArrayRef theArray);
# 590 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount);
# 608 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2);
# 638 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context);
# 665 "/var/include/CoreFoundation/CFArray.h"
extern
void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);


# 40 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFBag.h" 1
# 10 "/var/include/CoreFoundation/CFBag.h"


typedef const void * (*CFBagRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFBagReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFBagCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFBagEqualCallBack)(const void *value1, const void *value2);
typedef CFHashCode (*CFBagHashCallBack)(const void *value);
typedef struct {
    CFIndex version;
    CFBagRetainCallBack retain;
    CFBagReleaseCallBack release;
    CFBagCopyDescriptionCallBack copyDescription;
    CFBagEqualCallBack equal;
    CFBagHashCallBack hash;
} CFBagCallBacks;

extern
const CFBagCallBacks kCFTypeBagCallBacks;
extern
const CFBagCallBacks kCFCopyStringBagCallBacks;

typedef void (*CFBagApplierFunction)(const void *value, void *context);

typedef const struct __CFBag * CFBagRef;
typedef struct __CFBag * CFMutableBagRef;

extern
CFTypeID CFBagGetTypeID(void);

extern
CFBagRef CFBagCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFBagCallBacks *callBacks);

extern
CFBagRef CFBagCreateCopy(CFAllocatorRef allocator, CFBagRef theBag);

extern
CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks);

extern
CFMutableBagRef CFBagCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBagRef theBag);

extern
CFIndex CFBagGetCount(CFBagRef theBag);

extern
CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value);

extern
Boolean CFBagContainsValue(CFBagRef theBag, const void *value);

extern
const void *CFBagGetValue(CFBagRef theBag, const void *value);

extern
Boolean CFBagGetValueIfPresent(CFBagRef theBag, const void *candidate, const void **value);

extern
void CFBagGetValues(CFBagRef theBag, const void **values);

extern
void CFBagApplyFunction(CFBagRef theBag, CFBagApplierFunction applier, void *context);

extern
void CFBagAddValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagReplaceValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagSetValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagRemoveValue(CFMutableBagRef theBag, const void *value);

extern
void CFBagRemoveAllValues(CFMutableBagRef theBag);


# 41 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFBinaryHeap.h" 1
# 16 "/var/include/CoreFoundation/CFBinaryHeap.h"


typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFBinaryHeapCompareContext;
# 49 "/var/include/CoreFoundation/CFBinaryHeap.h"
typedef struct {
    CFIndex version;
    const void *(*retain)(CFAllocatorRef allocator, const void *ptr);
    void (*release)(CFAllocatorRef allocator, const void *ptr);
    CFStringRef (*copyDescription)(const void *ptr);
    CFComparisonResult (*compare)(const void *ptr1, const void *ptr2, void *context);
} CFBinaryHeapCallBacks;







extern const CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks;
# 73 "/var/include/CoreFoundation/CFBinaryHeap.h"
typedef void (*CFBinaryHeapApplierFunction)(const void *val, void *context);





typedef struct __CFBinaryHeap * CFBinaryHeapRef;





extern CFTypeID CFBinaryHeapGetTypeID(void);
# 129 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern CFBinaryHeapRef CFBinaryHeapCreate(CFAllocatorRef allocator, CFIndex capacity, const CFBinaryHeapCallBacks *callBacks, const CFBinaryHeapCompareContext *compareContext);
# 158 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern CFBinaryHeapRef CFBinaryHeapCreateCopy(CFAllocatorRef allocator, CFIndex capacity, CFBinaryHeapRef heap);
# 167 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern CFIndex CFBinaryHeapGetCount(CFBinaryHeapRef heap);
# 182 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern CFIndex CFBinaryHeapGetCountOfValue(CFBinaryHeapRef heap, const void *value);
# 197 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern Boolean CFBinaryHeapContainsValue(CFBinaryHeapRef heap, const void *value);
# 208 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern const void * CFBinaryHeapGetMinimum(CFBinaryHeapRef heap);
# 222 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern Boolean CFBinaryHeapGetMinimumIfPresent(CFBinaryHeapRef heap, const void **value);
# 234 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern void CFBinaryHeapGetValues(CFBinaryHeapRef heap, const void **values);
# 253 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern void CFBinaryHeapApplyFunction(CFBinaryHeapRef heap, CFBinaryHeapApplierFunction applier, void *context);
# 265 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern void CFBinaryHeapAddValue(CFBinaryHeapRef heap, const void *value);







extern void CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef heap);
# 282 "/var/include/CoreFoundation/CFBinaryHeap.h"
extern void CFBinaryHeapRemoveAllValues(CFBinaryHeapRef heap);


# 42 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFBitVector.h" 1
# 10 "/var/include/CoreFoundation/CFBitVector.h"


typedef UInt32 CFBit;

typedef const struct __CFBitVector * CFBitVectorRef;
typedef struct __CFBitVector * CFMutableBitVectorRef;

extern CFTypeID CFBitVectorGetTypeID(void);

extern CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits);
extern CFBitVectorRef CFBitVectorCreateCopy(CFAllocatorRef allocator, CFBitVectorRef bv);
extern CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
extern CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv);

extern CFIndex CFBitVectorGetCount(CFBitVectorRef bv);
extern CFIndex CFBitVectorGetCountOfBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern Boolean CFBitVectorContainsBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx);
extern void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes);
extern CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value);
extern CFIndex CFBitVectorGetLastIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value);

extern void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count);
extern void CFBitVectorFlipBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx);
extern void CFBitVectorFlipBits(CFMutableBitVectorRef bv, CFRange range);
extern void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value);
extern void CFBitVectorSetBits(CFMutableBitVectorRef bv, CFRange range, CFBit value);
extern void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value);


# 43 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFBundle.h" 1
# 10 "/var/include/CoreFoundation/CFBundle.h"
# 1 "/var/include/CoreFoundation/CFDictionary.h" 1
# 64 "/var/include/CoreFoundation/CFDictionary.h"

# 91 "/var/include/CoreFoundation/CFDictionary.h"
typedef const void * (*CFDictionaryRetainCallBack)(CFAllocatorRef allocator, const void *value);
typedef void (*CFDictionaryReleaseCallBack)(CFAllocatorRef allocator, const void *value);
typedef CFStringRef (*CFDictionaryCopyDescriptionCallBack)(const void *value);
typedef Boolean (*CFDictionaryEqualCallBack)(const void *value1, const void *value2);
typedef CFHashCode (*CFDictionaryHashCallBack)(const void *value);
typedef struct {
    CFIndex version;
    CFDictionaryRetainCallBack retain;
    CFDictionaryReleaseCallBack release;
    CFDictionaryCopyDescriptionCallBack copyDescription;
    CFDictionaryEqualCallBack equal;
    CFDictionaryHashCallBack hash;
} CFDictionaryKeyCallBacks;







extern
const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;
# 122 "/var/include/CoreFoundation/CFDictionary.h"
extern
const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;
# 148 "/var/include/CoreFoundation/CFDictionary.h"
typedef struct {
    CFIndex version;
    CFDictionaryRetainCallBack retain;
    CFDictionaryReleaseCallBack release;
    CFDictionaryCopyDescriptionCallBack copyDescription;
    CFDictionaryEqualCallBack equal;
} CFDictionaryValueCallBacks;







extern
const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;
# 174 "/var/include/CoreFoundation/CFDictionary.h"
typedef void (*CFDictionaryApplierFunction)(const void *key, const void *value, void *context);





typedef const struct __CFDictionary * CFDictionaryRef;





typedef struct __CFDictionary * CFMutableDictionaryRef;





extern
CFTypeID CFDictionaryGetTypeID(void);
# 277 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
# 301 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
# 373 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
# 406 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);
# 416 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFIndex CFDictionaryGetCount(CFDictionaryRef theDict);
# 435 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key);
# 451 "/var/include/CoreFoundation/CFDictionary.h"
extern
CFIndex CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void *value);
# 469 "/var/include/CoreFoundation/CFDictionary.h"
extern
Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key);
# 485 "/var/include/CoreFoundation/CFDictionary.h"
extern
Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void *value);
# 507 "/var/include/CoreFoundation/CFDictionary.h"
extern
const void *CFDictionaryGetValue(CFDictionaryRef theDict, const void *key);
# 532 "/var/include/CoreFoundation/CFDictionary.h"
extern
Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value);
# 555 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values);
# 575 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context);
# 595 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 618 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 637 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value);
# 651 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key);
# 661 "/var/include/CoreFoundation/CFDictionary.h"
extern
void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);


# 11 "/var/include/CoreFoundation/CFBundle.h" 2
# 1 "/var/include/CoreFoundation/CFError.h" 1
# 33 "/var/include/CoreFoundation/CFError.h"
# 1 "/var/include/CoreFoundation/CFString.h" 1
# 10 "/var/include/CoreFoundation/CFString.h"
# 1 "/var/include/CoreFoundation/CFData.h" 1
# 10 "/var/include/CoreFoundation/CFData.h"


typedef const struct __CFData * CFDataRef;
typedef struct __CFData * CFMutableDataRef;

extern
CFTypeID CFDataGetTypeID(void);

extern
CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);

extern
CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);


extern
CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);

extern
CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);

extern
CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);

extern
CFIndex CFDataGetLength(CFDataRef theData);

extern
const UInt8 *CFDataGetBytePtr(CFDataRef theData);

extern
UInt8 *CFDataGetMutableBytePtr(CFMutableDataRef theData);

extern
void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer);

extern
void CFDataSetLength(CFMutableDataRef theData, CFIndex length);

extern
void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);

extern
void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);

extern
void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength);

extern
void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);


# 11 "/var/include/CoreFoundation/CFString.h" 2

# 1 "/var/include/CoreFoundation/CFCharacterSet.h" 1
# 37 "/var/include/CoreFoundation/CFCharacterSet.h"






typedef const struct __CFCharacterSet * CFCharacterSetRef;





typedef struct __CFCharacterSet * CFMutableCharacterSetRef;






enum {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace,
    kCFCharacterSetWhitespaceAndNewline,
    kCFCharacterSetDecimalDigit,
    kCFCharacterSetLetter,
    kCFCharacterSetLowercaseLetter,
    kCFCharacterSetUppercaseLetter,
    kCFCharacterSetNonBase,
    kCFCharacterSetDecomposable,
    kCFCharacterSetAlphaNumeric,
    kCFCharacterSetPunctuation,

    kCFCharacterSetCapitalizedLetter = 13,


    kCFCharacterSetSymbol = 14,


    kCFCharacterSetNewline = 15,

    kCFCharacterSetIllegal = 12
};
typedef CFIndex CFCharacterSetPredefinedSet;





extern
CFTypeID CFCharacterSetGetTypeID(void);
# 98 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier);
# 117 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange);
# 134 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString);
# 162 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData);
# 179 "/var/include/CoreFoundation/CFCharacterSet.h"
extern CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 189 "/var/include/CoreFoundation/CFCharacterSet.h"
extern Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset);
# 200 "/var/include/CoreFoundation/CFCharacterSet.h"
extern Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane);
# 213 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc);
# 230 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet) ;
# 247 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 261 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar);
# 274 "/var/include/CoreFoundation/CFCharacterSet.h"
extern Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar);
# 293 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet);
# 308 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
# 323 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
# 336 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
# 349 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
# 363 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
# 377 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
# 387 "/var/include/CoreFoundation/CFCharacterSet.h"
extern
void CFCharacterSetInvert(CFMutableCharacterSetRef theSet);


# 13 "/var/include/CoreFoundation/CFString.h" 2
# 1 "/var/include/CoreFoundation/CFLocale.h" 1
# 14 "/var/include/CoreFoundation/CFLocale.h"


typedef const struct __CFLocale *CFLocaleRef;

extern
CFTypeID CFLocaleGetTypeID(void) ;

extern
CFLocaleRef CFLocaleGetSystem(void) ;


extern
CFLocaleRef CFLocaleCopyCurrent(void) ;
# 36 "/var/include/CoreFoundation/CFLocale.h"
extern
CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers(void) ;



extern
CFArrayRef CFLocaleCopyISOLanguageCodes(void) ;




extern
CFArrayRef CFLocaleCopyISOCountryCodes(void) ;




extern
CFArrayRef CFLocaleCopyISOCurrencyCodes(void) ;




extern
CFArrayRef CFLocaleCopyCommonISOCurrencyCodes(void) ;



extern
CFArrayRef CFLocaleCopyPreferredLanguages(void) ;


extern
CFStringRef CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;



extern
CFStringRef CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;



extern
CFStringRef CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator, LangCode lcode, RegionCode rcode) ;


extern
CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFStringRef localeID) ;
# 92 "/var/include/CoreFoundation/CFLocale.h"
extern
CFStringRef CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary) ;






extern
CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFStringRef localeIdentifier) ;


extern
CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale) ;




extern
CFStringRef CFLocaleGetIdentifier(CFLocaleRef locale) ;



extern
CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFStringRef key) ;



extern
CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFStringRef key, CFStringRef value) ;





extern const CFStringRef kCFLocaleCurrentLocaleDidChangeNotification ;



extern const CFStringRef kCFLocaleIdentifier ;
extern const CFStringRef kCFLocaleLanguageCode ;
extern const CFStringRef kCFLocaleCountryCode ;
extern const CFStringRef kCFLocaleScriptCode ;
extern const CFStringRef kCFLocaleVariantCode ;

extern const CFStringRef kCFLocaleExemplarCharacterSet ;
extern const CFStringRef kCFLocaleCalendarIdentifier ;
extern const CFStringRef kCFLocaleCalendar ;
extern const CFStringRef kCFLocaleCollationIdentifier ;
extern const CFStringRef kCFLocaleUsesMetricSystem ;
extern const CFStringRef kCFLocaleMeasurementSystem ;
extern const CFStringRef kCFLocaleDecimalSeparator ;
extern const CFStringRef kCFLocaleGroupingSeparator ;
extern const CFStringRef kCFLocaleCurrencySymbol ;
extern const CFStringRef kCFLocaleCurrencyCode ;


extern const CFStringRef kCFGregorianCalendar ;
extern const CFStringRef kCFBuddhistCalendar ;
extern const CFStringRef kCFChineseCalendar ;
extern const CFStringRef kCFHebrewCalendar ;
extern const CFStringRef kCFIslamicCalendar ;
extern const CFStringRef kCFIslamicCivilCalendar ;
extern const CFStringRef kCFJapaneseCalendar ;



# 14 "/var/include/CoreFoundation/CFString.h" 2
# 1 "/var/include/stdarg.h" 1
# 15 "/var/include/CoreFoundation/CFString.h" 2


# 91 "/var/include/CoreFoundation/CFString.h"
typedef UInt32 CFStringEncoding;





enum {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 0x0500,
    kCFStringEncodingISOLatin1 = 0x0201,
    kCFStringEncodingNextStepLatin = 0x0B01,
    kCFStringEncodingASCII = 0x0600,
    kCFStringEncodingUnicode = 0x0100,
    kCFStringEncodingUTF8 = 0x08000100,
    kCFStringEncodingNonLossyASCII = 0x0BFF

    ,
    kCFStringEncodingUTF16 = 0x0100,
    kCFStringEncodingUTF16BE = 0x10000100,
    kCFStringEncodingUTF16LE = 0x14000100,

    kCFStringEncodingUTF32 = 0x0c000100,
    kCFStringEncodingUTF32BE = 0x18000100,
    kCFStringEncodingUTF32LE = 0x1c000100

};
typedef CFStringEncoding CFStringBuiltInEncodings;


extern
CFTypeID CFStringGetTypeID(void);
# 152 "/var/include/CoreFoundation/CFString.h"
extern
CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);

extern
CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);



extern
CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);

extern
CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars);
# 183 "/var/include/CoreFoundation/CFString.h"
extern
CFStringRef CFStringCreateWithPascalStringNoCopy(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);

extern
CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);




extern
CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator) ;


extern
CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);



extern
CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);

extern
CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);



extern
CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...);

extern
CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);



extern
CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);

extern
CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);







extern
CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);





extern
CFIndex CFStringGetLength(CFStringRef theString);






extern
UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);

extern
void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer);
# 261 "/var/include/CoreFoundation/CFString.h"
extern
Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding);

extern
Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding);






extern
ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding);

extern
const char *CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);

extern
const UniChar *CFStringGetCharactersPtr(CFStringRef theString);
# 293 "/var/include/CoreFoundation/CFString.h"
extern
CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen);







extern
CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);

extern
CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);



extern
CFStringEncoding CFStringGetSmallestEncoding(CFStringRef theString);

extern
CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString);



extern
CFStringEncoding CFStringGetSystemEncoding(void);

extern
CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);






extern
Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen) ;



extern
CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string) ;



extern
CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer) ;







enum {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64

    ,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512

};
typedef CFOptionFlags CFStringCompareFlags;







extern
CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFOptionFlags compareOptions, CFLocaleRef locale) ;




extern
CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFOptionFlags compareOptions);





extern
CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFOptionFlags compareOptions);







extern
Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags searchOptions, CFLocaleRef locale, CFRange *result) ;




extern
Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags searchOptions, CFRange *result);
# 409 "/var/include/CoreFoundation/CFString.h"
extern
CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFOptionFlags compareOptions);



extern
CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFOptionFlags compareOptions);

extern
Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);

extern
Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
# 437 "/var/include/CoreFoundation/CFString.h"
extern CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
# 468 "/var/include/CoreFoundation/CFString.h"
extern Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFOptionFlags searchOptions, CFRange *result);
# 480 "/var/include/CoreFoundation/CFString.h"
extern
void CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex);



extern
void CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex) ;



extern
CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);

extern
CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);




extern
SInt32 CFStringGetIntValue(CFStringRef str);

extern
double CFStringGetDoubleValue(CFStringRef str);
# 513 "/var/include/CoreFoundation/CFString.h"
extern
void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);

extern
void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars);

extern
void CFStringAppendPascalString(CFMutableStringRef theString, ConstStr255Param pStr, CFStringEncoding encoding);

extern
void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding);

extern
void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...);

extern
void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);

extern
void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);

extern
void CFStringDelete(CFMutableStringRef theString, CFRange range);

extern
void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);

extern
void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);
# 552 "/var/include/CoreFoundation/CFString.h"
extern
CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFOptionFlags compareOptions);
# 564 "/var/include/CoreFoundation/CFString.h"
extern
void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar *chars, CFIndex length, CFIndex capacity);
# 578 "/var/include/CoreFoundation/CFString.h"
extern
void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);

extern
void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);

extern
void CFStringTrimWhitespace(CFMutableStringRef theString);


extern
void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);

extern
void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);

extern
void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
# 614 "/var/include/CoreFoundation/CFString.h"
enum {
 kCFStringNormalizationFormD = 0,
 kCFStringNormalizationFormKD,
 kCFStringNormalizationFormC,
 kCFStringNormalizationFormKC
};
typedef CFIndex CFStringNormalizationForm;
# 633 "/var/include/CoreFoundation/CFString.h"
extern void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
# 661 "/var/include/CoreFoundation/CFString.h"
extern
void CFStringFold(CFMutableStringRef theString, CFOptionFlags theFlags, CFLocaleRef theLocale) ;






Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse) ;



extern const CFStringRef kCFStringTransformStripCombiningMarks ;
extern const CFStringRef kCFStringTransformToLatin ;
extern const CFStringRef kCFStringTransformFullwidthHalfwidth ;
extern const CFStringRef kCFStringTransformLatinKatakana ;
extern const CFStringRef kCFStringTransformLatinHiragana ;
extern const CFStringRef kCFStringTransformHiraganaKatakana ;
extern const CFStringRef kCFStringTransformMandarinLatin ;
extern const CFStringRef kCFStringTransformLatinHangul ;
extern const CFStringRef kCFStringTransformLatinArabic ;
extern const CFStringRef kCFStringTransformLatinHebrew ;
extern const CFStringRef kCFStringTransformLatinThai ;
extern const CFStringRef kCFStringTransformLatinCyrillic ;
extern const CFStringRef kCFStringTransformLatinGreek ;
extern const CFStringRef kCFStringTransformToXMLHex ;
extern const CFStringRef kCFStringTransformToUnicodeName ;
extern const CFStringRef kCFStringTransformStripDiacritics ;






extern
Boolean CFStringIsEncodingAvailable(CFStringEncoding encoding);



extern
const CFStringEncoding *CFStringGetListOfAvailableEncodings(void);



extern
CFStringRef CFStringGetNameOfEncoding(CFStringEncoding encoding);



extern
unsigned long CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding);

extern
CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);



extern
UInt32 CFStringConvertEncodingToWindowsCodepage(CFStringEncoding encoding);

extern
CFStringEncoding CFStringConvertWindowsCodepageToEncoding(UInt32 codepage);



extern
CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString);

extern
CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding);





extern
CFStringEncoding CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding encoding);
# 751 "/var/include/CoreFoundation/CFString.h"
typedef struct {
    UniChar buffer[64];
    CFStringRef theString;
    const UniChar *directBuffer;
    CFRange rangeToBuffer;
    CFIndex bufferedRangeStart;
    CFIndex bufferedRangeEnd;
} CFStringInlineBuffer;


static __inline__ __attribute__((always_inline)) void CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer *buf, CFRange range) {
    buf->theString = str;
    buf->rangeToBuffer = range;
    buf->directBuffer = CFStringGetCharactersPtr(str);
    buf->bufferedRangeStart = buf->bufferedRangeEnd = 0;
}

static __inline__ __attribute__((always_inline)) UniChar CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer *buf, CFIndex idx) {
    if (buf->directBuffer) {
 if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
        return buf->directBuffer[idx + buf->rangeToBuffer.location];
    }
    if (idx >= buf->bufferedRangeEnd || idx < buf->bufferedRangeStart) {
 if (idx < 0 || idx >= buf->rangeToBuffer.length) return 0;
 if ((buf->bufferedRangeStart = idx - 4) < 0) buf->bufferedRangeStart = 0;
 buf->bufferedRangeEnd = buf->bufferedRangeStart + 64;
 if (buf->bufferedRangeEnd > buf->rangeToBuffer.length) buf->bufferedRangeEnd = buf->rangeToBuffer.length;
 CFStringGetCharacters(buf->theString, CFRangeMake(buf->rangeToBuffer.location + buf->bufferedRangeStart, buf->bufferedRangeEnd - buf->bufferedRangeStart), buf->buffer);
    }
    return buf->buffer[idx - buf->bufferedRangeStart];
}
# 804 "/var/include/CoreFoundation/CFString.h"
extern
void CFShow(CFTypeRef obj);

extern
void CFShowStr(CFStringRef str);


extern
CFStringRef __CFStringMakeConstantString(const char *cStr);


# 34 "/var/include/CoreFoundation/CFError.h" 2








typedef struct __CFError * CFErrorRef;





extern
CFTypeID CFErrorGetTypeID(void) ;



extern const CFStringRef kCFErrorDomainPOSIX ;
extern const CFStringRef kCFErrorDomainOSStatus ;
extern const CFStringRef kCFErrorDomainMach ;
extern const CFStringRef kCFErrorDomainCocoa ;


extern const CFStringRef kCFErrorLocalizedDescriptionKey ;
extern const CFStringRef kCFErrorLocalizedFailureReasonKey ;
extern const CFStringRef kCFErrorLocalizedRecoverySuggestionKey ;


extern const CFStringRef kCFErrorDescriptionKey ;


extern const CFStringRef kCFErrorUnderlyingErrorKey ;
# 81 "/var/include/CoreFoundation/CFError.h"
extern
CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFStringRef domain, CFIndex code, CFDictionaryRef userInfo) ;
# 96 "/var/include/CoreFoundation/CFError.h"
extern
CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFStringRef domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues) ;







extern
CFStringRef CFErrorGetDomain(CFErrorRef err) ;







extern
CFIndex CFErrorGetCode(CFErrorRef err) ;
# 124 "/var/include/CoreFoundation/CFError.h"
extern
CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err) ;
# 138 "/var/include/CoreFoundation/CFError.h"
extern
CFStringRef CFErrorCopyDescription(CFErrorRef err) ;
# 150 "/var/include/CoreFoundation/CFError.h"
extern
CFStringRef CFErrorCopyFailureReason(CFErrorRef err) ;
# 162 "/var/include/CoreFoundation/CFError.h"
extern
CFStringRef CFErrorCopyRecoverySuggestion(CFErrorRef err) ;




# 12 "/var/include/CoreFoundation/CFBundle.h" 2

# 1 "/var/include/CoreFoundation/CFURL.h" 1
# 12 "/var/include/CoreFoundation/CFURL.h"


enum {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle,
    kCFURLWindowsPathStyle
};
typedef CFIndex CFURLPathStyle;

typedef const struct __CFURL * CFURLRef;
# 37 "/var/include/CoreFoundation/CFURL.h"
extern
CFTypeID CFURLGetTypeID(void);



extern
CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL);





extern
CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace);


extern
CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL);
# 69 "/var/include/CoreFoundation/CFURL.h"
extern
CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode) ;
# 79 "/var/include/CoreFoundation/CFURL.h"
extern
CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory);

extern
CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory);

extern
CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);

extern
CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL);
# 98 "/var/include/CoreFoundation/CFURL.h"
extern
Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen);


extern
CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL);


extern
CFStringRef CFURLGetString(CFURLRef anURL);


extern
CFURLRef CFURLGetBaseURL(CFURLRef anURL);
# 173 "/var/include/CoreFoundation/CFURL.h"
extern
Boolean CFURLCanBeDecomposed(CFURLRef anURL);



extern
CFStringRef CFURLCopyScheme(CFURLRef anURL);


extern
CFStringRef CFURLCopyNetLocation(CFURLRef anURL);
# 196 "/var/include/CoreFoundation/CFURL.h"
extern
CFStringRef CFURLCopyPath(CFURLRef anURL);

extern
CFStringRef CFURLCopyStrictPath(CFURLRef anURL, Boolean *isAbsolute);

extern
CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle);



extern
Boolean CFURLHasDirectoryPath(CFURLRef anURL);



extern
CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL);

extern
CFStringRef CFURLCopyHostName(CFURLRef anURL);

extern
SInt32 CFURLGetPortNumber(CFURLRef anURL);

extern
CFStringRef CFURLCopyUserName(CFURLRef anURL);

extern
CFStringRef CFURLCopyPassword(CFURLRef anURL);






extern
CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);

extern
CFStringRef CFURLCopyLastPathComponent(CFURLRef url);

extern
CFStringRef CFURLCopyPathExtension(CFURLRef url);





extern
CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);

extern
CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url);

extern
CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension);

extern
CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url);
# 270 "/var/include/CoreFoundation/CFURL.h"
extern
CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength) ;

enum {
 kCFURLComponentScheme = 1,
 kCFURLComponentNetLocation = 2,
 kCFURLComponentPath = 3,
 kCFURLComponentResourceSpecifier = 4,

 kCFURLComponentUser = 5,
 kCFURLComponentPassword = 6,
 kCFURLComponentUserInfo = 7,
 kCFURLComponentHost = 8,
 kCFURLComponentPort = 9,
 kCFURLComponentParameterString = 10,
 kCFURLComponentQuery = 11,
 kCFURLComponentFragment = 12
};
typedef CFIndex CFURLComponentType;
# 353 "/var/include/CoreFoundation/CFURL.h"
extern
CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators) ;
# 364 "/var/include/CoreFoundation/CFURL.h"
extern
CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped);



extern
CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef allocator, CFStringRef origString, CFStringRef charsToLeaveEscaped, CFStringEncoding encoding) ;
# 386 "/var/include/CoreFoundation/CFURL.h"
extern
CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding);




struct FSRef;

extern
CFURLRef CFURLCreateFromFSRef(CFAllocatorRef allocator, const struct FSRef *fsRef);

extern
Boolean CFURLGetFSRef(CFURLRef url, struct FSRef *fsRef);





# 14 "/var/include/CoreFoundation/CFBundle.h" 2



typedef struct __CFBundle *CFBundleRef;
typedef struct __CFBundle *CFPlugInRef;


extern
const CFStringRef kCFBundleInfoDictionaryVersionKey;

extern
const CFStringRef kCFBundleExecutableKey;

extern
const CFStringRef kCFBundleIdentifierKey;

extern
const CFStringRef kCFBundleVersionKey;



extern
const CFStringRef kCFBundleDevelopmentRegionKey;

extern
const CFStringRef kCFBundleNameKey;

extern
const CFStringRef kCFBundleLocalizationsKey ;




extern
CFBundleRef CFBundleGetMainBundle(void);

extern
CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID);







extern
CFArrayRef CFBundleGetAllBundles(void);




extern
CFTypeID CFBundleGetTypeID(void);

extern
CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL);


extern
CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType);





extern
CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle);

extern
CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key);



extern
CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle);



extern
CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle);


extern
void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator);

extern
CFStringRef CFBundleGetIdentifier(CFBundleRef bundle);

extern
UInt32 CFBundleGetVersionNumber(CFBundleRef bundle);

extern
CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle);

extern
CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle);






extern
CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL);

extern
Boolean CFBundleGetPackageInfoInDirectory(CFURLRef url, UInt32 *packageType, UInt32 *packageCreator);



extern
CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);

extern
CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName);

extern
CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName);
# 163 "/var/include/CoreFoundation/CFBundle.h"
extern
CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);

extern
CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName);






extern
CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle);


extern
CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray);






extern
CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray) ;
# 197 "/var/include/CoreFoundation/CFBundle.h"
extern
CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);

extern
CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
# 211 "/var/include/CoreFoundation/CFBundle.h"
extern
CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url) ;





extern
CFArrayRef CFBundleCopyLocalizationsForURL(CFURLRef url) ;






extern
CFArrayRef CFBundleCopyExecutableArchitecturesForURL(CFURLRef url) ;
# 237 "/var/include/CoreFoundation/CFBundle.h"
extern
CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle);


enum {
    kCFBundleExecutableArchitectureI386 = 0x00000007,
    kCFBundleExecutableArchitecturePPC = 0x00000012,
    kCFBundleExecutableArchitectureX86_64 = 0x01000007,
    kCFBundleExecutableArchitecturePPC64 = 0x01000012
};


extern
CFArrayRef CFBundleCopyExecutableArchitectures(CFBundleRef bundle) ;





extern
Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error) ;






extern
Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error) ;





extern
Boolean CFBundleLoadExecutable(CFBundleRef bundle);

extern
Boolean CFBundleIsExecutableLoaded(CFBundleRef bundle);

extern
void CFBundleUnloadExecutable(CFBundleRef bundle);

extern
void *CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName);

extern
void CFBundleGetFunctionPointersForNames(CFBundleRef bundle, CFArrayRef functionNames, void *ftbl[]);

extern
void *CFBundleGetDataPointerForName(CFBundleRef bundle, CFStringRef symbolName);

extern
void CFBundleGetDataPointersForNames(CFBundleRef bundle, CFArrayRef symbolNames, void *stbl[]);

extern
CFURLRef CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle, CFStringRef executableName);
# 304 "/var/include/CoreFoundation/CFBundle.h"
extern
CFPlugInRef CFBundleGetPlugIn(CFBundleRef bundle);






typedef SInt16 CFBundleRefNum;


extern
CFBundleRefNum CFBundleOpenBundleResourceMap(CFBundleRef bundle);






extern
SInt32 CFBundleOpenBundleResourceFiles(CFBundleRef bundle, CFBundleRefNum *refNum, CFBundleRefNum *localizedRefNum);



extern
void CFBundleCloseBundleResourceMap(CFBundleRef bundle, CFBundleRefNum refNum);


# 44 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFByteOrder.h" 1
# 10 "/var/include/CoreFoundation/CFByteOrder.h"
# 1 "/var/include/libkern/OSByteOrder.h" 1
# 62 "/var/include/libkern/OSByteOrder.h"
enum {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian
};

static __inline__
int32_t
OSHostByteOrder(void) {

    return OSLittleEndian;





}
# 91 "/var/include/libkern/OSByteOrder.h"
static __inline__
uint16_t
_OSReadInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint16_t *)((uintptr_t)base + byteOffset);
}

static __inline__
uint32_t
_OSReadInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint32_t *)((uintptr_t)base + byteOffset);
}

static __inline__
uint64_t
_OSReadInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint64_t *)((uintptr_t)base + byteOffset);
}



static __inline__
void
_OSWriteInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = data;
}

static __inline__
void
_OSWriteInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = data;
}

static __inline__
void
_OSWriteInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = data;
}
# 11 "/var/include/CoreFoundation/CFByteOrder.h" 2





enum __CFByteOrder {
    CFByteOrderUnknown,
    CFByteOrderLittleEndian,
    CFByteOrderBigEndian
};
typedef CFIndex CFByteOrder;

static __inline__ __attribute__((always_inline)) CFByteOrder CFByteOrderGetCurrent(void) {

    int32_t byteOrder = OSHostByteOrder();
    switch (byteOrder) {
    case OSLittleEndian: return CFByteOrderLittleEndian;
    case OSBigEndian: return CFByteOrderBigEndian;
    default: break;
    }
    return CFByteOrderUnknown;
# 41 "/var/include/CoreFoundation/CFByteOrder.h"
}

static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));
# 76 "/var/include/CoreFoundation/CFByteOrder.h"
}

static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16BigToHost(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32BigToHost(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64BigToHost(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));





}

static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToBig(uint16_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint16_t)((((__uint16_t)(arg) & 0xff00) >> 8) | (((__uint16_t)(arg) & 0x00ff) << 8))) : _OSSwapInt16(arg));





}

static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToBig(uint32_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint32_t)((((__uint32_t)(arg) & 0xff000000) >> 24) | (((__uint32_t)(arg) & 0x00ff0000) >> 8) | (((__uint32_t)(arg) & 0x0000ff00) << 8) | (((__uint32_t)(arg) & 0x000000ff) << 24))) : _OSSwapInt32(arg));





}

static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToBig(uint64_t arg) {

    return (__builtin_constant_p(arg) ? ((__uint64_t)((((__uint64_t)(arg) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(arg) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(arg) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(arg) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(arg) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(arg) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(arg) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(arg) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(arg));





}

static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16LittleToHost(uint16_t arg) {

    return ((uint16_t)(arg));





}

static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32LittleToHost(uint32_t arg) {

    return ((uint32_t)(arg));





}

static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64LittleToHost(uint64_t arg) {

    return ((uint64_t)(arg));





}

static __inline__ __attribute__((always_inline)) uint16_t CFSwapInt16HostToLittle(uint16_t arg) {

    return ((uint16_t)(arg));





}

static __inline__ __attribute__((always_inline)) uint32_t CFSwapInt32HostToLittle(uint32_t arg) {

    return ((uint32_t)(arg));





}

static __inline__ __attribute__((always_inline)) uint64_t CFSwapInt64HostToLittle(uint64_t arg) {

    return ((uint64_t)(arg));





}

typedef struct {uint32_t v;} CFSwappedFloat32;
typedef struct {uint64_t v;} CFSwappedFloat64;

static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloat32HostToSwapped(Float32 arg) {
    union CFSwap {
 Float32 v;
 CFSwappedFloat32 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.sv;
}

static __inline__ __attribute__((always_inline)) Float32 CFConvertFloat32SwappedToHost(CFSwappedFloat32 arg) {
    union CFSwap {
 Float32 v;
 CFSwappedFloat32 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.v;
}

static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertFloat64HostToSwapped(Float64 arg) {
    union CFSwap {
 Float64 v;
 CFSwappedFloat64 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.sv;
}

static __inline__ __attribute__((always_inline)) Float64 CFConvertFloat64SwappedToHost(CFSwappedFloat64 arg) {
    union CFSwap {
 Float64 v;
 CFSwappedFloat64 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.v;
}

static __inline__ __attribute__((always_inline)) CFSwappedFloat32 CFConvertFloatHostToSwapped(float arg) {
    union CFSwap {
 float v;
 CFSwappedFloat32 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.sv;
}

static __inline__ __attribute__((always_inline)) float CFConvertFloatSwappedToHost(CFSwappedFloat32 arg) {
    union CFSwap {
 float v;
 CFSwappedFloat32 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt32(result.sv.v);

    return result.v;
}

static __inline__ __attribute__((always_inline)) CFSwappedFloat64 CFConvertDoubleHostToSwapped(double arg) {
    union CFSwap {
 double v;
 CFSwappedFloat64 sv;
    } result;
    result.v = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.sv;
}

static __inline__ __attribute__((always_inline)) double CFConvertDoubleSwappedToHost(CFSwappedFloat64 arg) {
    union CFSwap {
 double v;
 CFSwappedFloat64 sv;
    } result;
    result.sv = arg;

    result.sv.v = CFSwapInt64(result.sv.v);

    return result.v;
}


# 45 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFCalendar.h" 1
# 10 "/var/include/CoreFoundation/CFCalendar.h"
# 1 "/var/include/CoreFoundation/CFDate.h" 1
# 10 "/var/include/CoreFoundation/CFDate.h"


typedef double CFTimeInterval;
typedef CFTimeInterval CFAbsoluteTime;



extern
CFAbsoluteTime CFAbsoluteTimeGetCurrent(void);

extern
const CFTimeInterval kCFAbsoluteTimeIntervalSince1970;
extern
const CFTimeInterval kCFAbsoluteTimeIntervalSince1904;

typedef const struct __CFDate * CFDateRef;

extern
CFTypeID CFDateGetTypeID(void);

extern
CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at);

extern
CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate);

extern
CFTimeInterval CFDateGetTimeIntervalSinceDate(CFDateRef theDate, CFDateRef otherDate);

extern
CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context);

typedef const struct __CFTimeZone * CFTimeZoneRef;

typedef struct {
    SInt32 year;
    SInt8 month;
    SInt8 day;
    SInt8 hour;
    SInt8 minute;
    double second;
} CFGregorianDate;

typedef struct {
    SInt32 years;
    SInt32 months;
    SInt32 days;
    SInt32 hours;
    SInt32 minutes;
    double seconds;
} CFGregorianUnits;

enum {
    kCFGregorianUnitsYears = (1 << 0),
    kCFGregorianUnitsMonths = (1 << 1),
    kCFGregorianUnitsDays = (1 << 2),
    kCFGregorianUnitsHours = (1 << 3),
    kCFGregorianUnitsMinutes = (1 << 4),
    kCFGregorianUnitsSeconds = (1 << 5),
    kCFGregorianAllUnits = 0x00FFFFFF
};
typedef CFOptionFlags CFGregorianUnitFlags;

extern
Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags);

extern
CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz);

extern
CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
CFAbsoluteTime CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime at, CFTimeZoneRef tz, CFGregorianUnits units);

extern
CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags);

extern
SInt32 CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz);

extern
SInt32 CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime at, CFTimeZoneRef tz);


# 11 "/var/include/CoreFoundation/CFCalendar.h" 2
# 1 "/var/include/CoreFoundation/CFTimeZone.h" 1
# 15 "/var/include/CoreFoundation/CFTimeZone.h"


extern
CFTypeID CFTimeZoneGetTypeID(void);

extern
CFTimeZoneRef CFTimeZoneCopySystem(void);

extern
void CFTimeZoneResetSystem(void);

extern
CFTimeZoneRef CFTimeZoneCopyDefault(void);

extern
void CFTimeZoneSetDefault(CFTimeZoneRef tz);

extern
CFArrayRef CFTimeZoneCopyKnownNames(void);

extern
CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary(void);

extern
void CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef dict);

extern
CFTimeZoneRef CFTimeZoneCreate(CFAllocatorRef allocator, CFStringRef name, CFDataRef data);

extern
CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti);

extern
CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev);

extern
CFStringRef CFTimeZoneGetName(CFTimeZoneRef tz);

extern
CFDataRef CFTimeZoneGetData(CFTimeZoneRef tz);

extern
CFTimeInterval CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
CFStringRef CFTimeZoneCopyAbbreviation(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
Boolean CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef tz, CFAbsoluteTime at);

extern
CFTimeInterval CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef tz, CFAbsoluteTime at) ;

extern
CFAbsoluteTime CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef tz, CFAbsoluteTime at) ;


enum {
 kCFTimeZoneNameStyleStandard,
 kCFTimeZoneNameStyleShortStandard,
 kCFTimeZoneNameStyleDaylightSaving,
 kCFTimeZoneNameStyleShortDaylightSaving
};
typedef CFIndex CFTimeZoneNameStyle;

extern
CFStringRef CFTimeZoneCopyLocalizedName(CFTimeZoneRef tz, CFTimeZoneNameStyle style, CFLocaleRef locale) ;


extern
const CFStringRef kCFTimeZoneSystemTimeZoneDidChangeNotification ;


# 12 "/var/include/CoreFoundation/CFCalendar.h" 2





typedef struct __CFCalendar * CFCalendarRef;

extern
CFTypeID CFCalendarGetTypeID(void) ;

extern
CFCalendarRef CFCalendarCopyCurrent(void) ;

extern
CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFStringRef identifier) ;



extern
CFStringRef CFCalendarGetIdentifier(CFCalendarRef calendar) ;


extern
CFLocaleRef CFCalendarCopyLocale(CFCalendarRef calendar) ;

extern
void CFCalendarSetLocale(CFCalendarRef calendar, CFLocaleRef locale) ;

extern
CFTimeZoneRef CFCalendarCopyTimeZone(CFCalendarRef calendar) ;

extern
void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz) ;

extern
CFIndex CFCalendarGetFirstWeekday(CFCalendarRef calendar) ;

extern
void CFCalendarSetFirstWeekday(CFCalendarRef calendar, CFIndex wkdy) ;

extern
CFIndex CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef calendar) ;

extern
void CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef calendar, CFIndex mwd) ;


enum {
 kCFCalendarUnitEra = (1 << 1),
 kCFCalendarUnitYear = (1 << 2),
 kCFCalendarUnitMonth = (1 << 3),
 kCFCalendarUnitDay = (1 << 4),
 kCFCalendarUnitHour = (1 << 5),
 kCFCalendarUnitMinute = (1 << 6),
 kCFCalendarUnitSecond = (1 << 7),
 kCFCalendarUnitWeek = (1 << 8),
 kCFCalendarUnitWeekday = (1 << 9),
 kCFCalendarUnitWeekdayOrdinal = (1 << 10)
};
typedef CFOptionFlags CFCalendarUnit;

extern
CFRange CFCalendarGetMinimumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit) ;

extern
CFRange CFCalendarGetMaximumRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit) ;

extern
CFRange CFCalendarGetRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) ;

extern
CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at) ;

extern
Boolean CFCalendarGetTimeRangeOfUnit(CFCalendarRef calendar, CFCalendarUnit unit, CFAbsoluteTime at, CFAbsoluteTime *startp, CFTimeInterval *tip) ;

extern
Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...) ;

extern
Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...) ;


enum {
    kCFCalendarComponentsWrap = (1 << 0)
};

extern
Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...) ;

extern
Boolean CFCalendarGetComponentDifference(CFCalendarRef calendar, CFAbsoluteTime startingAT, CFAbsoluteTime resultAT, CFOptionFlags options, const char *componentDesc, ...) ;



# 46 "/var/include/CoreFoundation/CoreFoundation.h" 2



# 1 "/var/include/CoreFoundation/CFDateFormatter.h" 1
# 14 "/var/include/CoreFoundation/CFDateFormatter.h"


typedef struct __CFDateFormatter *CFDateFormatterRef;



extern
CFTypeID CFDateFormatterGetTypeID(void) ;

enum {
 kCFDateFormatterNoStyle = 0,
 kCFDateFormatterShortStyle = 1,
 kCFDateFormatterMediumStyle = 2,
 kCFDateFormatterLongStyle = 3,
 kCFDateFormatterFullStyle = 4
};
typedef CFIndex CFDateFormatterStyle;
# 44 "/var/include/CoreFoundation/CFDateFormatter.h"
extern
CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle) ;



extern
CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter) ;

extern
CFDateFormatterStyle CFDateFormatterGetDateStyle(CFDateFormatterRef formatter) ;

extern
CFDateFormatterStyle CFDateFormatterGetTimeStyle(CFDateFormatterRef formatter) ;


extern
CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter) ;

extern
void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString) ;







extern
CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date) ;

extern
CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at) ;




extern
CFDateRef CFDateFormatterCreateDateFromString(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep) ;

extern
Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp) ;
# 94 "/var/include/CoreFoundation/CFDateFormatter.h"
extern
void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value) ;

extern
CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFStringRef key) ;



extern const CFStringRef kCFDateFormatterIsLenient ;
extern const CFStringRef kCFDateFormatterTimeZone ;
extern const CFStringRef kCFDateFormatterCalendarName ;
extern const CFStringRef kCFDateFormatterDefaultFormat ;
extern const CFStringRef kCFDateFormatterTwoDigitStartDate ;
extern const CFStringRef kCFDateFormatterDefaultDate ;
extern const CFStringRef kCFDateFormatterCalendar ;
extern const CFStringRef kCFDateFormatterEraSymbols ;
extern const CFStringRef kCFDateFormatterMonthSymbols ;
extern const CFStringRef kCFDateFormatterShortMonthSymbols ;
extern const CFStringRef kCFDateFormatterWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterShortWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterAMSymbol ;
extern const CFStringRef kCFDateFormatterPMSymbol ;
extern const CFStringRef kCFDateFormatterLongEraSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortMonthSymbols ;
extern const CFStringRef kCFDateFormatterStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortStandaloneMonthSymbols ;
extern const CFStringRef kCFDateFormatterVeryShortWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterVeryShortStandaloneWeekdaySymbols ;
extern const CFStringRef kCFDateFormatterQuarterSymbols ;
extern const CFStringRef kCFDateFormatterShortQuarterSymbols ;
extern const CFStringRef kCFDateFormatterStandaloneQuarterSymbols ;
extern const CFStringRef kCFDateFormatterShortStandaloneQuarterSymbols ;
extern const CFStringRef kCFDateFormatterGregorianStartDate ;
# 140 "/var/include/CoreFoundation/CFDateFormatter.h"

# 50 "/var/include/CoreFoundation/CoreFoundation.h" 2



# 1 "/var/include/CoreFoundation/CFMessagePort.h" 1
# 9 "/var/include/CoreFoundation/CFMessagePort.h"
# 1 "/var/include/CoreFoundation/CFRunLoop.h" 1
# 13 "/var/include/CoreFoundation/CFRunLoop.h"
# 1 "/var/include/mach/port.h" 1
# 91 "/var/include/mach/port.h"
# 1 "/var/include/mach/boolean.h" 1
# 73 "/var/include/mach/boolean.h"
# 1 "/var/include/mach/machine/boolean.h" 1
# 37 "/var/include/mach/machine/boolean.h"
# 1 "/var/include/mach/arm/boolean.h" 1
# 68 "/var/include/mach/arm/boolean.h"
typedef int boolean_t;
# 38 "/var/include/mach/machine/boolean.h" 2
# 74 "/var/include/mach/boolean.h" 2
# 92 "/var/include/mach/port.h" 2
# 1 "/var/include/mach/machine/vm_types.h" 1
# 37 "/var/include/mach/machine/vm_types.h"
# 1 "/var/include/mach/arm/vm_types.h" 1
# 49 "/var/include/mach/arm/vm_types.h"
# 1 "/var/include/mach/arm/vm_param.h" 1
# 62 "/var/include/mach/arm/vm_param.h"
extern unsigned long gVirtBase, gPhysBase, gPhysSize;
# 50 "/var/include/mach/arm/vm_types.h" 2
# 69 "/var/include/mach/arm/vm_types.h"
typedef __darwin_natural_t natural_t;
typedef int integer_t;





typedef natural_t vm_offset_t;






typedef natural_t vm_size_t;
# 92 "/var/include/mach/arm/vm_types.h"
typedef uint32_t mach_vm_address_t;
typedef uint32_t mach_vm_offset_t;
typedef uint32_t mach_vm_size_t;

typedef uint32_t vm_map_offset_t;
typedef uint32_t vm_map_address_t;
typedef uint32_t vm_map_size_t;
# 38 "/var/include/mach/machine/vm_types.h" 2
# 93 "/var/include/mach/port.h" 2
# 106 "/var/include/mach/port.h"
typedef natural_t mach_port_name_t;
typedef mach_port_name_t *mach_port_name_array_t;
# 128 "/var/include/mach/port.h"
typedef mach_port_name_t mach_port_t;



typedef mach_port_t *mach_port_array_t;
# 190 "/var/include/mach/port.h"
typedef natural_t mach_port_right_t;
# 200 "/var/include/mach/port.h"
typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;
# 233 "/var/include/mach/port.h"
typedef natural_t mach_port_urefs_t;
typedef integer_t mach_port_delta_t;



typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef natural_t mach_port_rights_t;






typedef unsigned int mach_port_srights_t;

typedef struct mach_port_status {
 mach_port_rights_t mps_pset;
 mach_port_seqno_t mps_seqno;
 mach_port_mscount_t mps_mscount;
 mach_port_msgcount_t mps_qlimit;
 mach_port_msgcount_t mps_msgcount;
 mach_port_rights_t mps_sorights;
 boolean_t mps_srights;
 boolean_t mps_pdrequest;
 boolean_t mps_nsrequest;
 natural_t mps_flags;
} mach_port_status_t;
# 273 "/var/include/mach/port.h"
typedef struct mach_port_limits {
 mach_port_msgcount_t mpl_qlimit;
} mach_port_limits_t;

typedef integer_t *mach_port_info_t;


typedef int mach_port_flavor_t;
# 295 "/var/include/mach/port.h"
typedef struct mach_port_qos {
 unsigned int name:1;
 unsigned int prealloc:1;
 boolean_t pad1:30;
 natural_t len;
} mach_port_qos_t;
# 14 "/var/include/CoreFoundation/CFRunLoop.h" 2




typedef struct __CFRunLoop * CFRunLoopRef;

typedef struct __CFRunLoopSource * CFRunLoopSourceRef;

typedef struct __CFRunLoopObserver * CFRunLoopObserverRef;

typedef struct __CFRunLoopTimer * CFRunLoopTimerRef;


enum {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4
};


enum {
    kCFRunLoopEntry = (1 << 0),
    kCFRunLoopBeforeTimers = (1 << 1),
    kCFRunLoopBeforeSources = (1 << 2),
    kCFRunLoopBeforeWaiting = (1 << 5),
    kCFRunLoopAfterWaiting = (1 << 6),
    kCFRunLoopExit = (1 << 7),
    kCFRunLoopAllActivities = 0x0FFFFFFFU
};
typedef CFOptionFlags CFRunLoopActivity;

extern const CFStringRef kCFRunLoopDefaultMode;
extern const CFStringRef kCFRunLoopCommonModes;

extern CFTypeID CFRunLoopGetTypeID(void);

extern CFRunLoopRef CFRunLoopGetCurrent(void);
extern CFRunLoopRef CFRunLoopGetMain(void) ;

extern CFStringRef CFRunLoopCopyCurrentMode(CFRunLoopRef rl);

extern CFArrayRef CFRunLoopCopyAllModes(CFRunLoopRef rl);

extern void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFStringRef mode);

extern CFAbsoluteTime CFRunLoopGetNextTimerFireDate(CFRunLoopRef rl, CFStringRef mode);

extern void CFRunLoopRun(void);
extern SInt32 CFRunLoopRunInMode(CFStringRef mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);
extern Boolean CFRunLoopIsWaiting(CFRunLoopRef rl);
extern void CFRunLoopWakeUp(CFRunLoopRef rl);
extern void CFRunLoopStop(CFRunLoopRef rl);

extern Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);
extern void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);
extern void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode);

extern Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);
extern void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);
extern void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFStringRef mode);

extern Boolean CFRunLoopContainsTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
extern void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);
extern void CFRunLoopRemoveTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFStringRef mode);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
    Boolean (*equal)(const void *info1, const void *info2);
    CFHashCode (*hash)(const void *info);
    void (*schedule)(void *info, CFRunLoopRef rl, CFStringRef mode);
    void (*cancel)(void *info, CFRunLoopRef rl, CFStringRef mode);
    void (*perform)(void *info);
} CFRunLoopSourceContext;

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
    Boolean (*equal)(const void *info1, const void *info2);
    CFHashCode (*hash)(const void *info);

    mach_port_t (*getPort)(void *info);
    void * (*perform)(void *msg, CFIndex size, CFAllocatorRef allocator, void *info);




} CFRunLoopSourceContext1;

extern CFTypeID CFRunLoopSourceGetTypeID(void);

extern CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context);

extern CFIndex CFRunLoopSourceGetOrder(CFRunLoopSourceRef source);
extern void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source);
extern Boolean CFRunLoopSourceIsValid(CFRunLoopSourceRef source);
extern void CFRunLoopSourceGetContext(CFRunLoopSourceRef source, CFRunLoopSourceContext *context);
extern void CFRunLoopSourceSignal(CFRunLoopSourceRef source);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFRunLoopObserverContext;

typedef void (*CFRunLoopObserverCallBack)(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info);

extern CFTypeID CFRunLoopObserverGetTypeID(void);

extern CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context);

extern CFOptionFlags CFRunLoopObserverGetActivities(CFRunLoopObserverRef observer);
extern Boolean CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef observer);
extern CFIndex CFRunLoopObserverGetOrder(CFRunLoopObserverRef observer);
extern void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer);
extern Boolean CFRunLoopObserverIsValid(CFRunLoopObserverRef observer);
extern void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context);

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFRunLoopTimerContext;

typedef void (*CFRunLoopTimerCallBack)(CFRunLoopTimerRef timer, void *info);

extern CFTypeID CFRunLoopTimerGetTypeID(void);

extern CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context);
extern CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate);
extern CFTimeInterval CFRunLoopTimerGetInterval(CFRunLoopTimerRef timer);
extern Boolean CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef timer);
extern CFIndex CFRunLoopTimerGetOrder(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer);
extern Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer);
extern void CFRunLoopTimerGetContext(CFRunLoopTimerRef timer, CFRunLoopTimerContext *context);


# 10 "/var/include/CoreFoundation/CFMessagePort.h" 2




typedef struct __CFMessagePort * CFMessagePortRef;

enum {
    kCFMessagePortSuccess = 0,
    kCFMessagePortSendTimeout = -1,
    kCFMessagePortReceiveTimeout = -2,
    kCFMessagePortIsInvalid = -3,
    kCFMessagePortTransportError = -4
};

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFMessagePortContext;

typedef CFDataRef (*CFMessagePortCallBack)(CFMessagePortRef local, SInt32 msgid, CFDataRef data, void *info);

typedef void (*CFMessagePortInvalidationCallBack)(CFMessagePortRef ms, void *info);

extern CFTypeID CFMessagePortGetTypeID(void);

extern CFMessagePortRef CFMessagePortCreateLocal(CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo);
extern CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name);

extern Boolean CFMessagePortIsRemote(CFMessagePortRef ms);
extern CFStringRef CFMessagePortGetName(CFMessagePortRef ms);
extern Boolean CFMessagePortSetName(CFMessagePortRef ms, CFStringRef newName);
extern void CFMessagePortGetContext(CFMessagePortRef ms, CFMessagePortContext *context);
extern void CFMessagePortInvalidate(CFMessagePortRef ms);
extern Boolean CFMessagePortIsValid(CFMessagePortRef ms);
extern CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(CFMessagePortRef ms);
extern void CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout);


extern SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData);

extern CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order);


# 54 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFNumber.h" 1
# 10 "/var/include/CoreFoundation/CFNumber.h"


typedef const struct __CFBoolean * CFBooleanRef;

extern
const CFBooleanRef kCFBooleanTrue;
extern
const CFBooleanRef kCFBooleanFalse;

extern
CFTypeID CFBooleanGetTypeID(void);

extern
Boolean CFBooleanGetValue(CFBooleanRef boolean);

enum {

    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,

    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,

    kCFNumberCFIndexType = 14,

    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16



};
typedef CFIndex CFNumberType;

typedef const struct __CFNumber * CFNumberRef;

extern
const CFNumberRef kCFNumberPositiveInfinity;
extern
const CFNumberRef kCFNumberNegativeInfinity;
extern
const CFNumberRef kCFNumberNaN;

extern
CFTypeID CFNumberGetTypeID(void);
# 72 "/var/include/CoreFoundation/CFNumber.h"
extern
CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);





extern
CFNumberType CFNumberGetType(CFNumberRef number);




extern
CFIndex CFNumberGetByteSize(CFNumberRef number);





extern
Boolean CFNumberIsFloatType(CFNumberRef number);
# 103 "/var/include/CoreFoundation/CFNumber.h"
extern
Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr);
# 121 "/var/include/CoreFoundation/CFNumber.h"
extern
CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context);


# 55 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFNumberFormatter.h" 1
# 14 "/var/include/CoreFoundation/CFNumberFormatter.h"


typedef struct __CFNumberFormatter *CFNumberFormatterRef;



extern
CFTypeID CFNumberFormatterGetTypeID(void) ;

enum {
 kCFNumberFormatterNoStyle = 0,
 kCFNumberFormatterDecimalStyle = 1,
 kCFNumberFormatterCurrencyStyle = 2,
 kCFNumberFormatterPercentStyle = 3,
 kCFNumberFormatterScientificStyle = 4,
 kCFNumberFormatterSpellOutStyle = 5
};
typedef CFIndex CFNumberFormatterStyle;


extern
CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style) ;



extern
CFLocaleRef CFNumberFormatterGetLocale(CFNumberFormatterRef formatter) ;

extern
CFNumberFormatterStyle CFNumberFormatterGetStyle(CFNumberFormatterRef formatter) ;


extern
CFStringRef CFNumberFormatterGetFormat(CFNumberFormatterRef formatter) ;

extern
void CFNumberFormatterSetFormat(CFNumberFormatterRef formatter, CFStringRef formatString) ;
# 59 "/var/include/CoreFoundation/CFNumberFormatter.h"
extern
CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number) ;

extern
CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr) ;




enum {
    kCFNumberFormatterParseIntegersOnly = 1
};
typedef CFOptionFlags CFNumberFormatterOptionFlags;

extern
CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options) ;

extern
Boolean CFNumberFormatterGetValueFromString(CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFNumberType numberType, void *valuePtr) ;
# 89 "/var/include/CoreFoundation/CFNumberFormatter.h"
extern
void CFNumberFormatterSetProperty(CFNumberFormatterRef formatter, CFStringRef key, CFTypeRef value) ;

extern
CFTypeRef CFNumberFormatterCopyProperty(CFNumberFormatterRef formatter, CFStringRef key) ;



extern const CFStringRef kCFNumberFormatterCurrencyCode ;
extern const CFStringRef kCFNumberFormatterDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterCurrencyDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterAlwaysShowDecimalSeparator ;
extern const CFStringRef kCFNumberFormatterGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterUseGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterPercentSymbol ;
extern const CFStringRef kCFNumberFormatterZeroSymbol ;
extern const CFStringRef kCFNumberFormatterNaNSymbol ;
extern const CFStringRef kCFNumberFormatterInfinitySymbol ;
extern const CFStringRef kCFNumberFormatterMinusSign ;
extern const CFStringRef kCFNumberFormatterPlusSign ;
extern const CFStringRef kCFNumberFormatterCurrencySymbol ;
extern const CFStringRef kCFNumberFormatterExponentSymbol ;
extern const CFStringRef kCFNumberFormatterMinIntegerDigits ;
extern const CFStringRef kCFNumberFormatterMaxIntegerDigits ;
extern const CFStringRef kCFNumberFormatterMinFractionDigits ;
extern const CFStringRef kCFNumberFormatterMaxFractionDigits ;
extern const CFStringRef kCFNumberFormatterGroupingSize ;
extern const CFStringRef kCFNumberFormatterSecondaryGroupingSize ;
extern const CFStringRef kCFNumberFormatterRoundingMode ;
extern const CFStringRef kCFNumberFormatterRoundingIncrement ;
extern const CFStringRef kCFNumberFormatterFormatWidth ;
extern const CFStringRef kCFNumberFormatterPaddingPosition ;
extern const CFStringRef kCFNumberFormatterPaddingCharacter ;
extern const CFStringRef kCFNumberFormatterDefaultFormat ;
extern const CFStringRef kCFNumberFormatterMultiplier ;
extern const CFStringRef kCFNumberFormatterPositivePrefix ;
extern const CFStringRef kCFNumberFormatterPositiveSuffix ;
extern const CFStringRef kCFNumberFormatterNegativePrefix ;
extern const CFStringRef kCFNumberFormatterNegativeSuffix ;
extern const CFStringRef kCFNumberFormatterPerMillSymbol ;
extern const CFStringRef kCFNumberFormatterInternationalCurrencySymbol ;
extern const CFStringRef kCFNumberFormatterCurrencyGroupingSeparator ;
extern const CFStringRef kCFNumberFormatterIsLenient ;
extern const CFStringRef kCFNumberFormatterUseSignificantDigits ;
extern const CFStringRef kCFNumberFormatterMinSignificantDigits ;
extern const CFStringRef kCFNumberFormatterMaxSignificantDigits ;

enum {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6
};
typedef CFIndex CFNumberFormatterRoundingMode;

enum {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3
};
typedef CFIndex CFNumberFormatterPadPosition;


extern
Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement) ;







# 56 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFPlugIn.h" 1
# 17 "/var/include/CoreFoundation/CFPlugIn.h"
# 1 "/var/include/CoreFoundation/CFUUID.h" 1
# 11 "/var/include/CoreFoundation/CFUUID.h"


typedef const struct __CFUUID * CFUUIDRef;

typedef struct {
    UInt8 byte0;
    UInt8 byte1;
    UInt8 byte2;
    UInt8 byte3;
    UInt8 byte4;
    UInt8 byte5;
    UInt8 byte6;
    UInt8 byte7;
    UInt8 byte8;
    UInt8 byte9;
    UInt8 byte10;
    UInt8 byte11;
    UInt8 byte12;
    UInt8 byte13;
    UInt8 byte14;
    UInt8 byte15;
} CFUUIDBytes;






extern
CFTypeID CFUUIDGetTypeID(void);

extern
CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc);


extern
CFUUIDRef CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);


extern
CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr);


extern
CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid);


extern
CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);


extern
CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid);

extern
CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);


# 18 "/var/include/CoreFoundation/CFPlugIn.h" 2





extern
const CFStringRef kCFPlugInDynamicRegistrationKey;
extern
const CFStringRef kCFPlugInDynamicRegisterFunctionKey;
extern
const CFStringRef kCFPlugInUnloadFunctionKey;
extern
const CFStringRef kCFPlugInFactoriesKey;
extern
const CFStringRef kCFPlugInTypesKey;




typedef void (*CFPlugInDynamicRegisterFunction)(CFPlugInRef plugIn);
typedef void (*CFPlugInUnloadFunction)(CFPlugInRef plugIn);
typedef void *(*CFPlugInFactoryFunction)(CFAllocatorRef allocator, CFUUIDRef typeUUID);



extern
CFTypeID CFPlugInGetTypeID(void);

extern
CFPlugInRef CFPlugInCreate(CFAllocatorRef allocator, CFURLRef plugInURL);


extern
CFBundleRef CFPlugInGetBundle(CFPlugInRef plugIn);







extern
void CFPlugInSetLoadOnDemand(CFPlugInRef plugIn, Boolean flag);

extern
Boolean CFPlugInIsLoadOnDemand(CFPlugInRef plugIn);





extern
CFArrayRef CFPlugInFindFactoriesForPlugInType(CFUUIDRef typeUUID);


extern
CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID, CFPlugInRef plugIn);


extern
void *CFPlugInInstanceCreate(CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID);






extern
Boolean CFPlugInRegisterFactoryFunction(CFUUIDRef factoryUUID, CFPlugInFactoryFunction func);

extern
Boolean CFPlugInRegisterFactoryFunctionByName(CFUUIDRef factoryUUID, CFPlugInRef plugIn, CFStringRef functionName);

extern
Boolean CFPlugInUnregisterFactory(CFUUIDRef factoryUUID);

extern
Boolean CFPlugInRegisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID);

extern
Boolean CFPlugInUnregisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID);





extern
void CFPlugInAddInstanceForFactory(CFUUIDRef factoryID);

extern
void CFPlugInRemoveInstanceForFactory(CFUUIDRef factoryID);




typedef struct __CFPlugInInstance *CFPlugInInstanceRef;

typedef Boolean (*CFPlugInInstanceGetInterfaceFunction)(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
typedef void (*CFPlugInInstanceDeallocateInstanceDataFunction)(void *instanceData);

extern
Boolean CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl);
extern
CFStringRef CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef instance);
extern
void *CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef instance);
extern
CFTypeID CFPlugInInstanceGetTypeID(void);
extern
CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef allocator, CFIndex instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction, CFStringRef factoryName, CFPlugInInstanceGetInterfaceFunction getInterfaceFunction);


# 57 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFPreferences.h" 1
# 12 "/var/include/CoreFoundation/CFPreferences.h"


extern
const CFStringRef kCFPreferencesAnyApplication;
extern
const CFStringRef kCFPreferencesCurrentApplication;
extern
const CFStringRef kCFPreferencesAnyHost;
extern
const CFStringRef kCFPreferencesCurrentHost;
extern
const CFStringRef kCFPreferencesAnyUser;
extern
const CFStringRef kCFPreferencesCurrentUser;
# 41 "/var/include/CoreFoundation/CFPreferences.h"
extern
CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID);




extern
Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat);




extern
CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat);




extern
void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID);





extern
void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID);

extern
void CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID, CFStringRef suiteID);



extern
Boolean CFPreferencesAppSynchronize(CFStringRef applicationID);





extern
CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);





extern
CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);



extern
void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);



extern
void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);

extern
Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);





extern
CFArrayRef CFPreferencesCopyApplicationList(CFStringRef userName, CFStringRef hostName);




extern
CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
# 124 "/var/include/CoreFoundation/CFPreferences.h"
extern
Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);





# 58 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFPropertyList.h" 1
# 11 "/var/include/CoreFoundation/CFPropertyList.h"
# 1 "/var/include/CoreFoundation/CFStream.h" 1
# 13 "/var/include/CoreFoundation/CFStream.h"
# 1 "/var/include/CoreFoundation/CFSocket.h" 1
# 14 "/var/include/CoreFoundation/CFSocket.h"
typedef int CFSocketNativeHandle;







typedef struct __CFSocket * CFSocketRef;
# 102 "/var/include/CoreFoundation/CFSocket.h"
enum {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2
};
typedef CFIndex CFSocketError;

typedef struct {
    SInt32 protocolFamily;
    SInt32 socketType;
    SInt32 protocol;
    CFDataRef address;
} CFSocketSignature;


enum {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4

    ,
    kCFSocketWriteCallBack = 8

};
typedef CFOptionFlags CFSocketCallBackType;



enum {
    kCFSocketAutomaticallyReenableReadCallBack = 1,
    kCFSocketAutomaticallyReenableAcceptCallBack = 2,
    kCFSocketAutomaticallyReenableDataCallBack = 3,
    kCFSocketAutomaticallyReenableWriteCallBack = 8,
    kCFSocketCloseOnInvalidate = 128
};


typedef void (*CFSocketCallBack)(CFSocketRef s, CFSocketCallBackType type, CFDataRef address, const void *data, void *info);


typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFSocketContext;

extern CFTypeID CFSocketGetTypeID(void);

extern CFSocketRef CFSocketCreate(CFAllocatorRef allocator, SInt32 protocolFamily, SInt32 socketType, SInt32 protocol, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateWithNative(CFAllocatorRef allocator, CFSocketNativeHandle sock, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateWithSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context);
extern CFSocketRef CFSocketCreateConnectedToSocketSignature(CFAllocatorRef allocator, const CFSocketSignature *signature, CFOptionFlags callBackTypes, CFSocketCallBack callout, const CFSocketContext *context, CFTimeInterval timeout);


extern CFSocketError CFSocketSetAddress(CFSocketRef s, CFDataRef address);
extern CFSocketError CFSocketConnectToAddress(CFSocketRef s, CFDataRef address, CFTimeInterval timeout);
extern void CFSocketInvalidate(CFSocketRef s);

extern Boolean CFSocketIsValid(CFSocketRef s);
extern CFDataRef CFSocketCopyAddress(CFSocketRef s);
extern CFDataRef CFSocketCopyPeerAddress(CFSocketRef s);
extern void CFSocketGetContext(CFSocketRef s, CFSocketContext *context);
extern CFSocketNativeHandle CFSocketGetNative(CFSocketRef s);

extern CFRunLoopSourceRef CFSocketCreateRunLoopSource(CFAllocatorRef allocator, CFSocketRef s, CFIndex order);


extern CFOptionFlags CFSocketGetSocketFlags(CFSocketRef s);
extern void CFSocketSetSocketFlags(CFSocketRef s, CFOptionFlags flags);
extern void CFSocketDisableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);
extern void CFSocketEnableCallBacks(CFSocketRef s, CFOptionFlags callBackTypes);



extern CFSocketError CFSocketSendData(CFSocketRef s, CFDataRef address, CFDataRef data, CFTimeInterval timeout);
# 199 "/var/include/CoreFoundation/CFSocket.h"
extern CFSocketError CFSocketRegisterValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef value);
extern CFSocketError CFSocketCopyRegisteredValue(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFPropertyListRef *value, CFDataRef *nameServerAddress);

extern CFSocketError CFSocketRegisterSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, const CFSocketSignature *signature);
extern CFSocketError CFSocketCopyRegisteredSocketSignature(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name, CFSocketSignature *signature, CFDataRef *nameServerAddress);

extern CFSocketError CFSocketUnregister(const CFSocketSignature *nameServerSignature, CFTimeInterval timeout, CFStringRef name);

extern void CFSocketSetDefaultNameRegistryPortNumber(UInt16 port);
extern UInt16 CFSocketGetDefaultNameRegistryPortNumber(void);


extern const CFStringRef kCFSocketCommandKey;
extern const CFStringRef kCFSocketNameKey;
extern const CFStringRef kCFSocketValueKey;
extern const CFStringRef kCFSocketResultKey;
extern const CFStringRef kCFSocketErrorKey;
extern const CFStringRef kCFSocketRegisterCommand;
extern const CFStringRef kCFSocketRetrieveCommand;


# 14 "/var/include/CoreFoundation/CFStream.h" 2




enum {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening,
    kCFStreamStatusOpen,
    kCFStreamStatusReading,
    kCFStreamStatusWriting,
    kCFStreamStatusAtEnd,
    kCFStreamStatusClosed,
    kCFStreamStatusError
};
typedef CFIndex CFStreamStatus;

enum {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16
};
typedef CFOptionFlags CFStreamEventType;

typedef struct {
    CFIndex version;
    void *info;
    void *(*retain)(void *info);
    void (*release)(void *info);
    CFStringRef (*copyDescription)(void *info);
} CFStreamClientContext;

typedef struct __CFReadStream * CFReadStreamRef;
typedef struct __CFWriteStream * CFWriteStreamRef;

typedef void (*CFReadStreamClientCallBack)(CFReadStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);
typedef void (*CFWriteStreamClientCallBack)(CFWriteStreamRef stream, CFStreamEventType type, void *clientCallBackInfo);

extern
CFTypeID CFReadStreamGetTypeID(void);
extern
CFTypeID CFWriteStreamGetTypeID(void);




extern
const CFStringRef kCFStreamPropertyDataWritten;


extern
CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator);


extern
CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8 *buffer, CFIndex bufferCapacity);


extern
CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator);


extern
CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
extern
CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
extern
void CFStreamCreateBoundPair(CFAllocatorRef alloc, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream, CFIndex transferBufferSize);



extern
const CFStringRef kCFStreamPropertyAppendToFile;




extern const CFStringRef kCFStreamPropertyFileCurrentOffset ;






extern
const CFStringRef kCFStreamPropertySocketNativeHandle;


extern
const CFStringRef kCFStreamPropertySocketRemoteHostName;


extern
const CFStringRef kCFStreamPropertySocketRemotePortNumber;


extern
void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);
extern
void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);

extern
void CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef alloc, const CFSocketSignature *signature, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream);




extern
CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream);
extern
CFStreamStatus CFWriteStreamGetStatus(CFWriteStreamRef stream);


extern
CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream) ;
extern
CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream) ;






extern
Boolean CFReadStreamOpen(CFReadStreamRef stream);
extern
Boolean CFWriteStreamOpen(CFWriteStreamRef stream);




extern
void CFReadStreamClose(CFReadStreamRef stream);
extern
void CFWriteStreamClose(CFWriteStreamRef stream);



extern
Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream);
# 164 "/var/include/CoreFoundation/CFStream.h"
extern
CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength);
# 176 "/var/include/CoreFoundation/CFStream.h"
extern
const UInt8 *CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex *numBytesRead);



extern
Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream);






extern
CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength);
# 200 "/var/include/CoreFoundation/CFStream.h"
extern
CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStringRef propertyName);
extern
CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStringRef propertyName);




extern
Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStringRef propertyName, CFTypeRef propertyValue);
extern
Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStringRef propertyName, CFTypeRef propertyValue);
# 231 "/var/include/CoreFoundation/CFStream.h"
extern
Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext);
extern
Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext);

extern
void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);
extern
void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);

extern
void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);
extern
void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFStringRef runLoopMode);



enum {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus
};
typedef CFIndex CFStreamErrorDomain;

typedef struct {
    CFIndex domain;
    SInt32 error;
} CFStreamError;
extern
CFStreamError CFReadStreamGetError(CFReadStreamRef stream);
extern
CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream);



# 12 "/var/include/CoreFoundation/CFPropertyList.h" 2



enum {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers,
    kCFPropertyListMutableContainersAndLeaves
};
typedef CFOptionFlags CFPropertyListMutabilityOptions;
# 30 "/var/include/CoreFoundation/CFPropertyList.h"
extern
CFPropertyListRef CFPropertyListCreateFromXMLData(CFAllocatorRef allocator, CFDataRef xmlData, CFOptionFlags mutabilityOption, CFStringRef *errorString);
# 43 "/var/include/CoreFoundation/CFPropertyList.h"
extern
CFDataRef CFPropertyListCreateXMLData(CFAllocatorRef allocator, CFPropertyListRef propertyList);







extern
CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption);



enum {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200
};
typedef CFIndex CFPropertyListFormat;

extern
Boolean CFPropertyListIsValid(CFPropertyListRef plist, CFPropertyListFormat format);







extern
CFIndex CFPropertyListWriteToStream(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFStringRef *errorString);
# 85 "/var/include/CoreFoundation/CFPropertyList.h"
extern
CFPropertyListRef CFPropertyListCreateFromStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags mutabilityOption, CFPropertyListFormat *format, CFStringRef *errorString);
# 100 "/var/include/CoreFoundation/CFPropertyList.h"

# 59 "/var/include/CoreFoundation/CoreFoundation.h" 2

# 1 "/var/include/CoreFoundation/CFSet.h" 1
# 14 "/var/include/CoreFoundation/CFSet.h"

# 25 "/var/include/CoreFoundation/CFSet.h"
typedef const void * (*CFSetRetainCallBack)(CFAllocatorRef allocator, const void *value);







typedef void (*CFSetReleaseCallBack)(CFAllocatorRef allocator, const void *value);







typedef CFStringRef (*CFSetCopyDescriptionCallBack)(const void *value);
# 50 "/var/include/CoreFoundation/CFSet.h"
typedef Boolean (*CFSetEqualCallBack)(const void *value1, const void *value2);







typedef CFHashCode (*CFSetHashCallBack)(const void *value);
# 84 "/var/include/CoreFoundation/CFSet.h"
typedef struct {
    CFIndex version;
    CFSetRetainCallBack retain;
    CFSetReleaseCallBack release;
    CFSetCopyDescriptionCallBack copyDescription;
    CFSetEqualCallBack equal;
    CFSetHashCallBack hash;
} CFSetCallBacks;






extern
const CFSetCallBacks kCFTypeSetCallBacks;







extern
const CFSetCallBacks kCFCopyStringSetCallBacks;
# 118 "/var/include/CoreFoundation/CFSet.h"
typedef void (*CFSetApplierFunction)(const void *value, void *context);





typedef const struct __CFSet * CFSetRef;





typedef struct __CFSet * CFMutableSetRef;





extern
CFTypeID CFSetGetTypeID(void);
# 185 "/var/include/CoreFoundation/CFSet.h"
extern
CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks);
# 206 "/var/include/CoreFoundation/CFSet.h"
extern
CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet);
# 252 "/var/include/CoreFoundation/CFSet.h"
extern
CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks);
# 282 "/var/include/CoreFoundation/CFSet.h"
extern
CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet);
# 292 "/var/include/CoreFoundation/CFSet.h"
extern
CFIndex CFSetGetCount(CFSetRef theSet);
# 310 "/var/include/CoreFoundation/CFSet.h"
extern
CFIndex CFSetGetCountOfValue(CFSetRef theSet, const void *value);
# 326 "/var/include/CoreFoundation/CFSet.h"
extern
Boolean CFSetContainsValue(CFSetRef theSet, const void *value);
# 341 "/var/include/CoreFoundation/CFSet.h"
extern
const void *CFSetGetValue(CFSetRef theSet, const void *value);
# 365 "/var/include/CoreFoundation/CFSet.h"
extern
Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value);
# 379 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetGetValues(CFSetRef theSet, const void **values);
# 399 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context);
# 414 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetAddValue(CFMutableSetRef theSet, const void *value);
# 433 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetReplaceValue(CFMutableSetRef theSet, const void *value);
# 453 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetSetValue(CFMutableSetRef theSet, const void *value);
# 468 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetRemoveValue(CFMutableSetRef theSet, const void *value);
# 478 "/var/include/CoreFoundation/CFSet.h"
extern
void CFSetRemoveAllValues(CFMutableSetRef theSet);


# 61 "/var/include/CoreFoundation/CoreFoundation.h" 2



# 1 "/var/include/CoreFoundation/CFStringEncodingExt.h" 1
# 10 "/var/include/CoreFoundation/CFStringEncodingExt.h"


enum {

    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,

    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,

    kCFStringEncodingMacFarsi = 0x8C,

    kCFStringEncodingMacUkrainian = 0x98,

    kCFStringEncodingMacInuit = 0xEC,
    kCFStringEncodingMacVT100 = 0xFC,

    kCFStringEncodingMacHFS = 0xFF,






    kCFStringEncodingISOLatin2 = 0x0202,
    kCFStringEncodingISOLatin3 = 0x0203,
    kCFStringEncodingISOLatin4 = 0x0204,
    kCFStringEncodingISOLatinCyrillic = 0x0205,
    kCFStringEncodingISOLatinArabic = 0x0206,
    kCFStringEncodingISOLatinGreek = 0x0207,
    kCFStringEncodingISOLatinHebrew = 0x0208,
    kCFStringEncodingISOLatin5 = 0x0209,
    kCFStringEncodingISOLatin6 = 0x020A,
    kCFStringEncodingISOLatinThai = 0x020B,
    kCFStringEncodingISOLatin7 = 0x020D,
    kCFStringEncodingISOLatin8 = 0x020E,
    kCFStringEncodingISOLatin9 = 0x020F,

    kCFStringEncodingISOLatin10 = 0x0210,



    kCFStringEncodingDOSLatinUS = 0x0400,
    kCFStringEncodingDOSGreek = 0x0405,
    kCFStringEncodingDOSBalticRim = 0x0406,
    kCFStringEncodingDOSLatin1 = 0x0410,
    kCFStringEncodingDOSGreek1 = 0x0411,
    kCFStringEncodingDOSLatin2 = 0x0412,
    kCFStringEncodingDOSCyrillic = 0x0413,
    kCFStringEncodingDOSTurkish = 0x0414,
    kCFStringEncodingDOSPortuguese = 0x0415,
    kCFStringEncodingDOSIcelandic = 0x0416,
    kCFStringEncodingDOSHebrew = 0x0417,
    kCFStringEncodingDOSCanadianFrench = 0x0418,
    kCFStringEncodingDOSArabic = 0x0419,
    kCFStringEncodingDOSNordic = 0x041A,
    kCFStringEncodingDOSRussian = 0x041B,
    kCFStringEncodingDOSGreek2 = 0x041C,
    kCFStringEncodingDOSThai = 0x041D,
    kCFStringEncodingDOSJapanese = 0x0420,
    kCFStringEncodingDOSChineseSimplif = 0x0421,
    kCFStringEncodingDOSKorean = 0x0422,
    kCFStringEncodingDOSChineseTrad = 0x0423,

    kCFStringEncodingWindowsLatin2 = 0x0501,
    kCFStringEncodingWindowsCyrillic = 0x0502,
    kCFStringEncodingWindowsGreek = 0x0503,
    kCFStringEncodingWindowsLatin5 = 0x0504,
    kCFStringEncodingWindowsHebrew = 0x0505,
    kCFStringEncodingWindowsArabic = 0x0506,
    kCFStringEncodingWindowsBalticRim = 0x0507,
    kCFStringEncodingWindowsVietnamese = 0x0508,
    kCFStringEncodingWindowsKoreanJohab = 0x0510,




    kCFStringEncodingANSEL = 0x0601,

    kCFStringEncodingJIS_X0201_76 = 0x0620,
    kCFStringEncodingJIS_X0208_83 = 0x0621,
    kCFStringEncodingJIS_X0208_90 = 0x0622,
    kCFStringEncodingJIS_X0212_90 = 0x0623,
    kCFStringEncodingJIS_C6226_78 = 0x0624,

    kCFStringEncodingShiftJIS_X0213 = 0x0628,


    kCFStringEncodingShiftJIS_X0213_MenKuTen = 0x0629,

    kCFStringEncodingGB_2312_80 = 0x0630,
    kCFStringEncodingGBK_95 = 0x0631,
    kCFStringEncodingGB_18030_2000 = 0x0632,
    kCFStringEncodingKSC_5601_87 = 0x0640,
    kCFStringEncodingKSC_5601_92_Johab = 0x0641,
    kCFStringEncodingCNS_11643_92_P1 = 0x0651,
    kCFStringEncodingCNS_11643_92_P2 = 0x0652,
    kCFStringEncodingCNS_11643_92_P3 = 0x0653,


    kCFStringEncodingISO_2022_JP = 0x0820,
    kCFStringEncodingISO_2022_JP_2 = 0x0821,
    kCFStringEncodingISO_2022_JP_1 = 0x0822,
    kCFStringEncodingISO_2022_JP_3 = 0x0823,
    kCFStringEncodingISO_2022_CN = 0x0830,
    kCFStringEncodingISO_2022_CN_EXT = 0x0831,
    kCFStringEncodingISO_2022_KR = 0x0840,


    kCFStringEncodingEUC_JP = 0x0920,
    kCFStringEncodingEUC_CN = 0x0930,
    kCFStringEncodingEUC_TW = 0x0931,
    kCFStringEncodingEUC_KR = 0x0940,


    kCFStringEncodingShiftJIS = 0x0A01,
    kCFStringEncodingKOI8_R = 0x0A02,
    kCFStringEncodingBig5 = 0x0A03,
    kCFStringEncodingMacRomanLatin1 = 0x0A04,
    kCFStringEncodingHZ_GB_2312 = 0x0A05,
    kCFStringEncodingBig5_HKSCS_1999 = 0x0A06,

    kCFStringEncodingVISCII = 0x0A07,
    kCFStringEncodingKOI8_U = 0x0A08,
    kCFStringEncodingBig5_E = 0x0A09,





    kCFStringEncodingNextStepJapanese = 0x0B02,



    kCFStringEncodingEBCDIC_US = 0x0C01,
    kCFStringEncodingEBCDIC_CP037 = 0x0C02,


    kCFStringEncodingShiftJIS_X0213_00 = 0x0628
};
typedef CFIndex CFStringEncodings;


# 65 "/var/include/CoreFoundation/CoreFoundation.h" 2

# 1 "/var/include/CoreFoundation/CFTree.h" 1
# 15 "/var/include/CoreFoundation/CFTree.h"

# 27 "/var/include/CoreFoundation/CFTree.h"
typedef const void * (*CFTreeRetainCallBack)(const void *info);







typedef void (*CFTreeReleaseCallBack)(const void *info);
# 44 "/var/include/CoreFoundation/CFTree.h"
typedef CFStringRef (*CFTreeCopyDescriptionCallBack)(const void *info);
# 63 "/var/include/CoreFoundation/CFTree.h"
typedef struct {
    CFIndex version;
    void * info;
    CFTreeRetainCallBack retain;
    CFTreeReleaseCallBack release;
    CFTreeCopyDescriptionCallBack copyDescription;
} CFTreeContext;
# 79 "/var/include/CoreFoundation/CFTree.h"
typedef void (*CFTreeApplierFunction)(const void *value, void *context);





typedef struct __CFTree * CFTreeRef;





extern
CFTypeID CFTreeGetTypeID(void);
# 111 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeCreate(CFAllocatorRef allocator, const CFTreeContext *context);
# 121 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeGetParent(CFTreeRef tree);
# 131 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeGetNextSibling(CFTreeRef tree);
# 141 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeGetFirstChild(CFTreeRef tree);
# 155 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeGetContext(CFTreeRef tree, CFTreeContext *context);
# 165 "/var/include/CoreFoundation/CFTree.h"
extern
CFIndex CFTreeGetChildCount(CFTreeRef tree);
# 178 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeGetChildAtIndex(CFTreeRef tree, CFIndex idx);
# 191 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeGetChildren(CFTreeRef tree, CFTreeRef *children);
# 212 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeApplyFunctionToChildren(CFTreeRef tree, CFTreeApplierFunction applier, void *context);
# 222 "/var/include/CoreFoundation/CFTree.h"
extern
CFTreeRef CFTreeFindRoot(CFTreeRef tree);
# 239 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeSetContext(CFTreeRef tree, const CFTreeContext *context);
# 252 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreePrependChild(CFTreeRef tree, CFTreeRef newChild);
# 265 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeAppendChild(CFTreeRef tree, CFTreeRef newChild);
# 280 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeInsertSibling(CFTreeRef tree, CFTreeRef newSibling);







extern
void CFTreeRemove(CFTreeRef tree);







extern
void CFTreeRemoveAllChildren(CFTreeRef tree);
# 318 "/var/include/CoreFoundation/CFTree.h"
extern
void CFTreeSortChildren(CFTreeRef tree, CFComparatorFunction comparator, void *context);


# 67 "/var/include/CoreFoundation/CoreFoundation.h" 2

# 1 "/var/include/CoreFoundation/CFURLAccess.h" 1
# 15 "/var/include/CoreFoundation/CFURLAccess.h"

# 39 "/var/include/CoreFoundation/CFURLAccess.h"
extern
Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
# 50 "/var/include/CoreFoundation/CFURLAccess.h"
extern
Boolean CFURLWriteDataAndPropertiesToResource(CFURLRef url, CFDataRef dataToWrite, CFDictionaryRef propertiesToWrite, SInt32 *errorCode);



extern
Boolean CFURLDestroyResource(CFURLRef url, SInt32 *errorCode);



extern
CFTypeRef CFURLCreatePropertyFromResource(CFAllocatorRef alloc, CFURLRef url, CFStringRef property, SInt32 *errorCode);


enum {
    kCFURLUnknownError = -10,
    kCFURLUnknownSchemeError = -11,
    kCFURLResourceNotFoundError = -12,
    kCFURLResourceAccessViolationError = -13,
    kCFURLRemoteHostUnavailableError = -14,
    kCFURLImproperArgumentsError = -15,
    kCFURLUnknownPropertyKeyError = -16,
    kCFURLPropertyKeyUnavailableError = -17,
    kCFURLTimeoutError = -18
};
typedef CFIndex CFURLError;



extern
const CFStringRef kCFURLFileExists;
extern
const CFStringRef kCFURLFileDirectoryContents;
extern
const CFStringRef kCFURLFileLength;
extern
const CFStringRef kCFURLFileLastModificationTime;
extern
const CFStringRef kCFURLFilePOSIXMode;
extern
const CFStringRef kCFURLFileOwnerID;
extern
const CFStringRef kCFURLHTTPStatusCode;
extern
const CFStringRef kCFURLHTTPStatusLine;
# 107 "/var/include/CoreFoundation/CFURLAccess.h"

# 69 "/var/include/CoreFoundation/CoreFoundation.h" 2



# 1 "/var/include/CoreFoundation/CFAttributedString.h" 1
# 20 "/var/include/CoreFoundation/CFAttributedString.h"





typedef const struct __CFAttributedString *CFAttributedStringRef;
typedef struct __CFAttributedString *CFMutableAttributedStringRef;




extern CFTypeID CFAttributedStringGetTypeID(void) ;
# 40 "/var/include/CoreFoundation/CFAttributedString.h"
extern CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes) ;




extern CFAttributedStringRef CFAttributedStringCreateWithSubstring(CFAllocatorRef alloc, CFAttributedStringRef aStr, CFRange range) ;




extern CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr) ;




extern CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr) ;




extern CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr) ;






extern CFDictionaryRef CFAttributedStringGetAttributes(CFAttributedStringRef aStr, CFIndex loc, CFRange *effectiveRange) ;




extern CFTypeRef CFAttributedStringGetAttribute(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange *effectiveRange) ;




extern CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFRange inRange, CFRange *longestEffectiveRange) ;




extern CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef aStr, CFIndex loc, CFStringRef attrName, CFRange inRange, CFRange *longestEffectiveRange) ;
# 91 "/var/include/CoreFoundation/CFAttributedString.h"
extern CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFAttributedStringRef aStr) ;




extern CFMutableAttributedStringRef CFAttributedStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength) ;






extern void CFAttributedStringReplaceString(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef replacement) ;






extern CFMutableStringRef CFAttributedStringGetMutableString(CFMutableAttributedStringRef aStr) ;




extern void CFAttributedStringSetAttributes(CFMutableAttributedStringRef aStr, CFRange range, CFDictionaryRef replacement, Boolean clearOtherAttributes) ;




extern void CFAttributedStringSetAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName, CFTypeRef value) ;




extern void CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef aStr, CFRange range, CFStringRef attrName) ;




extern void CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef aStr, CFRange range, CFAttributedStringRef replacement) ;




extern void CFAttributedStringBeginEditing(CFMutableAttributedStringRef aStr) ;




extern void CFAttributedStringEndEditing(CFMutableAttributedStringRef aStr) ;



# 73 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFNotificationCenter.h" 1
# 11 "/var/include/CoreFoundation/CFNotificationCenter.h"


typedef struct __CFNotificationCenter * CFNotificationCenterRef;

typedef void (*CFNotificationCallback)(CFNotificationCenterRef center, void *observer, CFStringRef name, const void *object, CFDictionaryRef userInfo);

enum {
    CFNotificationSuspensionBehaviorDrop = 1,

    CFNotificationSuspensionBehaviorCoalesce = 2,

    CFNotificationSuspensionBehaviorHold = 3,

    CFNotificationSuspensionBehaviorDeliverImmediately = 4

};
typedef CFIndex CFNotificationSuspensionBehavior;

extern CFTypeID CFNotificationCenterGetTypeID(void);

extern CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void) ;





extern CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void) ;
# 55 "/var/include/CoreFoundation/CFNotificationCenter.h"
extern void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior);

extern void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFStringRef name, const void *object);
extern void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer);

extern void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFStringRef name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately);



enum {
    kCFNotificationDeliverImmediately = (1 << 0),
    kCFNotificationPostToAllSessions = (1 << 1)
};

void CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef center, CFStringRef name, const void *object, CFDictionaryRef userInfo, CFOptionFlags options) ;





# 74 "/var/include/CoreFoundation/CoreFoundation.h" 2



# 1 "/var/include/CoreFoundation/CFFileDescriptor.h" 1
# 12 "/var/include/CoreFoundation/CFFileDescriptor.h"


typedef int CFFileDescriptorNativeDescriptor;

typedef struct __CFFileDescriptor * CFFileDescriptorRef;


enum {
    kCFFileDescriptorReadCallBack = 1 << 0,
    kCFFileDescriptorWriteCallBack = 1 << 1
};

typedef void (*CFFileDescriptorCallBack)(CFFileDescriptorRef f, CFOptionFlags callBackTypes, void *info);

typedef struct {
    CFIndex version;
    void * info;
    void * (*retain)(void *info);
    void (*release)(void *info);
    CFStringRef (*copyDescription)(void *info);
} CFFileDescriptorContext;

extern CFTypeID CFFileDescriptorGetTypeID(void);

extern CFFileDescriptorRef CFFileDescriptorCreate(CFAllocatorRef allocator, CFFileDescriptorNativeDescriptor fd, Boolean closeOnInvalidate, CFFileDescriptorCallBack callout, const CFFileDescriptorContext *context);

extern CFFileDescriptorNativeDescriptor CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef f);

extern void CFFileDescriptorGetContext(CFFileDescriptorRef f, CFFileDescriptorContext *context);

extern void CFFileDescriptorEnableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes);
extern void CFFileDescriptorDisableCallBacks(CFFileDescriptorRef f, CFOptionFlags callBackTypes);

extern void CFFileDescriptorInvalidate(CFFileDescriptorRef f);
extern Boolean CFFileDescriptorIsValid(CFFileDescriptorRef f);

extern CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(CFAllocatorRef allocator, CFFileDescriptorRef f, CFIndex order);



# 78 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 1 "/var/include/CoreFoundation/CFMachPort.h" 1
# 11 "/var/include/CoreFoundation/CFMachPort.h"


typedef struct __CFMachPort * CFMachPortRef;

typedef struct {
    CFIndex version;
    void * info;
    const void *(*retain)(const void *info);
    void (*release)(const void *info);
    CFStringRef (*copyDescription)(const void *info);
} CFMachPortContext;

typedef void (*CFMachPortCallBack)(CFMachPortRef port, void *msg, CFIndex size, void *info);
typedef void (*CFMachPortInvalidationCallBack)(CFMachPortRef port, void *info);

extern CFTypeID CFMachPortGetTypeID(void);

extern CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);
extern CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo);

extern mach_port_t CFMachPortGetPort(CFMachPortRef port);
extern void CFMachPortGetContext(CFMachPortRef port, CFMachPortContext *context);
extern void CFMachPortInvalidate(CFMachPortRef port);
extern Boolean CFMachPortIsValid(CFMachPortRef port);
extern CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(CFMachPortRef port);
extern void CFMachPortSetInvalidationCallBack(CFMachPortRef port, CFMachPortInvalidationCallBack callout);

extern CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order);


# 79 "/var/include/CoreFoundation/CoreFoundation.h" 2
# 7 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSObjCRuntime.h" 1
# 71 "/var/include/Foundation/NSObjCRuntime.h"
# 1 "/var/include/objc/objc.h" 1
# 31 "/var/include/objc/objc.h"
# 1 "/var/include/objc/objc-api.h" 1
# 32 "/var/include/objc/objc.h" 2



typedef struct objc_class *Class;
typedef struct objc_object {
    Class isa;
} *id;


typedef struct objc_selector *SEL;
typedef id (*IMP)(id, SEL, ...);
typedef signed char BOOL;
# 64 "/var/include/objc/objc.h"
extern const char *sel_getName(SEL sel);
extern SEL sel_registerName(const char *str);
extern const char *object_getClassName(id obj);
extern void *object_getIndexedIvars(id obj);
# 72 "/var/include/Foundation/NSObjCRuntime.h" 2
# 1 "/var/include/stdarg.h" 1
# 73 "/var/include/Foundation/NSObjCRuntime.h" 2





extern double NSFoundationVersionNumber;
# 136 "/var/include/Foundation/NSObjCRuntime.h"
typedef int NSInteger;
typedef unsigned int NSUInteger;
# 146 "/var/include/Foundation/NSObjCRuntime.h"
@class NSString, Protocol;

extern NSString *NSStringFromSelector(SEL aSelector);
extern SEL NSSelectorFromString(NSString *aSelectorName);

extern NSString *NSStringFromClass(Class aClass);
extern Class NSClassFromString(NSString *aClassName);

extern NSString *NSStringFromProtocol(Protocol *proto) ;
extern Protocol *NSProtocolFromString(NSString *namestr) ;

extern const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp);

extern void NSLog(NSString *format, ...) __attribute__((format(__NSString__, 1, 2)));
extern void NSLogv(NSString *format, va_list args);

enum _NSComparisonResult {NSOrderedAscending = -1, NSOrderedSame, NSOrderedDescending};
typedef NSInteger NSComparisonResult;

enum {NSNotFound = 2147483647L};
# 9 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSArray.h" 1




# 1 "/var/include/Foundation/NSObject.h" 1





# 1 "/var/include/Foundation/NSZone.h" 1







@class NSString;

typedef struct _NSZone NSZone;


extern NSZone *NSDefaultMallocZone(void);
extern NSZone *NSCreateZone(NSUInteger startSize, NSUInteger granularity, BOOL canFree);
extern void NSRecycleZone(NSZone *zone);
extern void NSSetZoneName(NSZone *zone, NSString *name);
extern NSString *NSZoneName(NSZone *zone);
extern NSZone *NSZoneFromPointer(void *ptr);

extern void *NSZoneMalloc(NSZone *zone, NSUInteger size);
extern void *NSZoneCalloc(NSZone *zone, NSUInteger numElems, NSUInteger byteSize);
extern void *NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size);
extern void NSZoneFree(NSZone *zone, void *ptr);
# 48 "/var/include/Foundation/NSZone.h"
static __inline__ __attribute__((always_inline)) id NSMakeCollectable(CFTypeRef cf) {
    return cf ? (id)CFMakeCollectable(cf) : ((void *)0);
}


extern NSUInteger NSPageSize(void);
extern NSUInteger NSLogPageSize(void);
extern NSUInteger NSRoundUpToMultipleOfPageSize(NSUInteger bytes);
extern NSUInteger NSRoundDownToMultipleOfPageSize(NSUInteger bytes);
extern void *NSAllocateMemoryPages(NSUInteger bytes);
extern void NSDeallocateMemoryPages(void *ptr, NSUInteger bytes);
extern void NSCopyMemoryPages(const void *source, void *dest, NSUInteger bytes);
extern NSUInteger NSRealMemoryAvailable(void);
# 7 "/var/include/Foundation/NSObject.h" 2

@class NSInvocation, NSMethodSignature, NSCoder, NSString, NSEnumerator;
@class Protocol;



@protocol NSObject

- (BOOL)isEqual:(id)object;
- (NSUInteger)hash;

- (Class)superclass;
- (Class)class;
- (id)self;
- (NSZone *)zone;

- (id)performSelector:(SEL)aSelector;
- (id)performSelector:(SEL)aSelector withObject:(id)object;
- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;

- (BOOL)isProxy;

- (BOOL)isKindOfClass:(Class)aClass;
- (BOOL)isMemberOfClass:(Class)aClass;
- (BOOL)conformsToProtocol:(Protocol *)aProtocol;

- (BOOL)respondsToSelector:(SEL)aSelector;

- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (NSUInteger)retainCount;

- (NSString *)description;

@end

@protocol NSCopying

- (id)copyWithZone:(NSZone *)zone;

@end

@protocol NSMutableCopying

- (id)mutableCopyWithZone:(NSZone *)zone;

@end

@protocol NSCoding

- (void)encodeWithCoder:(NSCoder *)aCoder;
- (id)initWithCoder:(NSCoder *)aDecoder;

@end



@interface NSObject <NSObject> {
    Class isa;
}

+ (void)load;

+ (void)initialize;
- (id)init;

+ (id)new;
+ (id)allocWithZone:(NSZone *)zone;
+ (id)alloc;
- (void)dealloc;

- (void)finalize ;

- (id)copy;
- (id)mutableCopy;

+ (id)copyWithZone:(NSZone *)zone;
+ (id)mutableCopyWithZone:(NSZone *)zone;

+ (Class)superclass;
+ (Class)class;
+ (BOOL)instancesRespondToSelector:(SEL)aSelector;
+ (BOOL)conformsToProtocol:(Protocol *)protocol;
- (IMP)methodForSelector:(SEL)aSelector;
+ (IMP)instanceMethodForSelector:(SEL)aSelector;
- (void)doesNotRecognizeSelector:(SEL)aSelector;


- (void)forwardInvocation:(NSInvocation *)anInvocation;
- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;

+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector;

+ (NSString *)description;

+ (BOOL)isSubclassOfClass:(Class)aClass ;

+ (BOOL)resolveClassMethod:(SEL)sel ;
+ (BOOL)resolveInstanceMethod:(SEL)sel ;

@end

@interface NSObject (NSCoderMethods)

+ (NSInteger)version;
+ (void)setVersion:(NSInteger)aVersion;
- (Class)classForCoder;
- (id)replacementObjectForCoder:(NSCoder *)aCoder;
- (id)awakeAfterUsingCoder:(NSCoder *)aDecoder;

@end
# 130 "/var/include/Foundation/NSObject.h"
extern id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone);

extern void NSDeallocateObject(id object);

extern id NSCopyObject(id object, NSUInteger extraBytes, NSZone *zone);

extern BOOL NSShouldRetainWithZone(id anObject, NSZone *requestedZone);

extern void NSIncrementExtraRefCount(id object);

extern BOOL NSDecrementExtraRefCountWasZero(id object);

extern NSUInteger NSExtraRefCount(id object);
# 6 "/var/include/Foundation/NSArray.h" 2
# 1 "/var/include/Foundation/NSEnumerator.h" 1






@class NSArray;
# 19 "/var/include/Foundation/NSEnumerator.h"
typedef struct {
    unsigned long state;
    id *itemsPtr;
    unsigned long *mutationsPtr;
    unsigned long extra[5];
} NSFastEnumerationState;

@protocol NSFastEnumeration

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len;

@end

@interface NSEnumerator : NSObject <NSFastEnumeration>

- (id)nextObject;

@end

@interface NSEnumerator (NSExtendedEnumerator)

- (NSArray *)allObjects;

@end
# 7 "/var/include/Foundation/NSArray.h" 2
# 1 "/var/include/Foundation/NSRange.h" 1




# 1 "/var/include/Foundation/NSValue.h" 1






@class NSString, NSDictionary;

@interface NSValue : NSObject <NSCopying, NSCoding>

- (void)getValue:(void *)value;
- (const char *)objCType;

@end

@interface NSValue (NSValueCreation)

- (id)initWithBytes:(const void *)value objCType:(const char *)type;
+ (NSValue *)valueWithBytes:(const void *)value objCType:(const char *)type;
+ (NSValue *)value:(const void *)value withObjCType:(const char *)type;

@end

@interface NSValue (NSValueExtensionMethods)

+ (NSValue *)valueWithNonretainedObject:(id)anObject;
- (id)nonretainedObjectValue;

+ (NSValue *)valueWithPointer:(const void *)pointer;
- (void *)pointerValue;

- (BOOL)isEqualToValue:(NSValue *)value;

@end

@interface NSNumber : NSValue

- (char)charValue;
- (unsigned char)unsignedCharValue;
- (short)shortValue;
- (unsigned short)unsignedShortValue;
- (int)intValue;
- (unsigned int)unsignedIntValue;
- (long)longValue;
- (unsigned long)unsignedLongValue;
- (long long)longLongValue;
- (unsigned long long)unsignedLongLongValue;
- (float)floatValue;
- (double)doubleValue;
- (BOOL)boolValue;

- (NSInteger)integerValue;
- (NSUInteger)unsignedIntegerValue;


- (NSString *)stringValue;

- (NSComparisonResult)compare:(NSNumber *)otherNumber;

- (BOOL)isEqualToNumber:(NSNumber *)number;

- (NSString *)descriptionWithLocale:(id)locale;

@end

@interface NSNumber (NSNumberCreation)

- (id)initWithChar:(char)value;
- (id)initWithUnsignedChar:(unsigned char)value;
- (id)initWithShort:(short)value;
- (id)initWithUnsignedShort:(unsigned short)value;
- (id)initWithInt:(int)value;
- (id)initWithUnsignedInt:(unsigned int)value;
- (id)initWithLong:(long)value;
- (id)initWithUnsignedLong:(unsigned long)value;
- (id)initWithLongLong:(long long)value;
- (id)initWithUnsignedLongLong:(unsigned long long)value;
- (id)initWithFloat:(float)value;
- (id)initWithDouble:(double)value;
- (id)initWithBool:(BOOL)value;

- (id)initWithInteger:(NSInteger)value;
- (id)initWithUnsignedInteger:(NSUInteger)value;


+ (NSNumber *)numberWithChar:(char)value;
+ (NSNumber *)numberWithUnsignedChar:(unsigned char)value;
+ (NSNumber *)numberWithShort:(short)value;
+ (NSNumber *)numberWithUnsignedShort:(unsigned short)value;
+ (NSNumber *)numberWithInt:(int)value;
+ (NSNumber *)numberWithUnsignedInt:(unsigned int)value;
+ (NSNumber *)numberWithLong:(long)value;
+ (NSNumber *)numberWithUnsignedLong:(unsigned long)value;
+ (NSNumber *)numberWithLongLong:(long long)value;
+ (NSNumber *)numberWithUnsignedLongLong:(unsigned long long)value;
+ (NSNumber *)numberWithFloat:(float)value;
+ (NSNumber *)numberWithDouble:(double)value;
+ (NSNumber *)numberWithBool:(BOOL)value;

+ (NSNumber *)numberWithInteger:(NSInteger)value;
+ (NSNumber *)numberWithUnsignedInteger:(NSUInteger)value;


@end
# 6 "/var/include/Foundation/NSRange.h" 2


@class NSString;

typedef struct _NSRange {
    NSUInteger location;
    NSUInteger length;
} NSRange;

typedef NSRange *NSRangePointer;

static __inline__ __attribute__((always_inline)) NSRange NSMakeRange(NSUInteger loc, NSUInteger len) {
    NSRange r;
    r.location = loc;
    r.length = len;
    return r;
}

static __inline__ __attribute__((always_inline)) NSUInteger NSMaxRange(NSRange range) {
    return (range.location + range.length);
}

static __inline__ __attribute__((always_inline)) BOOL NSLocationInRange(NSUInteger loc, NSRange range) {
    return (loc - range.location < range.length);
}

static __inline__ __attribute__((always_inline)) BOOL NSEqualRanges(NSRange range1, NSRange range2) {
    return (range1.location == range2.location && range1.length == range2.length);
}

extern NSRange NSUnionRange(NSRange range1, NSRange range2);
extern NSRange NSIntersectionRange(NSRange range1, NSRange range2);
extern NSString *NSStringFromRange(NSRange range);
extern NSRange NSRangeFromString(NSString *aString);

@interface NSValue (NSValueRangeExtensions)

+ (NSValue *)valueWithRange:(NSRange)range;
- (NSRange)rangeValue;

@end
# 8 "/var/include/Foundation/NSArray.h" 2

@class NSData, NSIndexSet, NSString, NSURL;



@interface NSArray : NSObject <NSCopying, NSMutableCopying, NSCoding, NSFastEnumeration>

- (NSUInteger)count;
- (id)objectAtIndex:(NSUInteger)index;

@end

@interface NSArray (NSExtendedArray)

- (NSArray *)arrayByAddingObject:(id)anObject;
- (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)otherArray;
- (NSString *)componentsJoinedByString:(NSString *)separator;
- (BOOL)containsObject:(id)anObject;
- (NSString *)description;
- (NSString *)descriptionWithLocale:(id)locale;
- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level;
- (id)firstObjectCommonWithArray:(NSArray *)otherArray;
- (void)getObjects:(id *)objects;
- (void)getObjects:(id *)objects range:(NSRange)range;
- (NSUInteger)indexOfObject:(id)anObject;
- (NSUInteger)indexOfObject:(id)anObject inRange:(NSRange)range;
- (NSUInteger)indexOfObjectIdenticalTo:(id)anObject;
- (NSUInteger)indexOfObjectIdenticalTo:(id)anObject inRange:(NSRange)range;
- (BOOL)isEqualToArray:(NSArray *)otherArray;
- (id)lastObject;
- (NSEnumerator *)objectEnumerator;
- (NSEnumerator *)reverseObjectEnumerator;
- (NSData *)sortedArrayHint;
- (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context;
- (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint;
- (NSArray *)sortedArrayUsingSelector:(SEL)comparator;
- (NSArray *)subarrayWithRange:(NSRange)range;
- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;
- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)atomically;

- (void)makeObjectsPerformSelector:(SEL)aSelector;
- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;


- (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;


@end

@interface NSArray (NSArrayCreation)

+ (id)array;
+ (id)arrayWithObject:(id)anObject;
+ (id)arrayWithObjects:(const id *)objects count:(NSUInteger)cnt;
+ (id)arrayWithObjects:(id)firstObj, ... __attribute__((sentinel(0,1)));
+ (id)arrayWithArray:(NSArray *)array;

- (id)initWithObjects:(const id *)objects count:(NSUInteger)cnt;
- (id)initWithObjects:(id)firstObj, ... __attribute__((sentinel(0,1)));
- (id)initWithArray:(NSArray *)array;
- (id)initWithArray:(NSArray *)array copyItems:(BOOL)flag ;

+ (id)arrayWithContentsOfFile:(NSString *)path;
+ (id)arrayWithContentsOfURL:(NSURL *)url;
- (id)initWithContentsOfFile:(NSString *)path;
- (id)initWithContentsOfURL:(NSURL *)url;

@end



@interface NSMutableArray : NSArray

- (void)addObject:(id)anObject;
- (void)insertObject:(id)anObject atIndex:(NSUInteger)index;
- (void)removeLastObject;
- (void)removeObjectAtIndex:(NSUInteger)index;
- (void)replaceObjectAtIndex:(NSUInteger)index withObject:(id)anObject;

@end

@interface NSMutableArray (NSExtendedMutableArray)

- (void)addObjectsFromArray:(NSArray *)otherArray;
- (void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2;
- (void)removeAllObjects;
- (void)removeObject:(id)anObject inRange:(NSRange)range;
- (void)removeObject:(id)anObject;
- (void)removeObjectIdenticalTo:(id)anObject inRange:(NSRange)range;
- (void)removeObjectIdenticalTo:(id)anObject;
- (void)removeObjectsFromIndices:(NSUInteger *)indices numIndices:(NSUInteger)cnt;
- (void)removeObjectsInArray:(NSArray *)otherArray;
- (void)removeObjectsInRange:(NSRange)range;
- (void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray *)otherArray range:(NSRange)otherRange;
- (void)replaceObjectsInRange:(NSRange)range withObjectsFromArray:(NSArray *)otherArray;
- (void)setArray:(NSArray *)otherArray;
- (void)sortUsingFunction:(NSInteger (*)(id, id, void *))compare context:(void *)context;
- (void)sortUsingSelector:(SEL)comparator;


- (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
- (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
- (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects;


@end

@interface NSMutableArray (NSMutableArrayCreation)

+ (id)arrayWithCapacity:(NSUInteger)numItems;
- (id)initWithCapacity:(NSUInteger)numItems;

@end
# 11 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSAutoreleasePool.h" 1






@interface NSAutoreleasePool : NSObject {
@private
    void *_token;
    void *_reserved3;
    void *_reserved2;
    void *_reserved;
}

+ (void)addObject:(id)anObject;

- (void)addObject:(id)anObject;


- (void)drain;


@end
# 12 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSBundle.h" 1






@class NSArray, NSDictionary, NSString, NSError;



@interface NSBundle : NSObject {
@private
    NSUInteger _flags;
    id _cfBundle;
    NSUInteger _refCount;
    Class _principalClass;
    id _tmp1;
    id _tmp2;
    void *_reserved1;
    void *_reserved0;
}

+ (NSBundle *)mainBundle;
+ (NSBundle *)bundleWithPath:(NSString *)path;
- (id)initWithPath:(NSString *)path;

+ (NSBundle *)bundleForClass:(Class)aClass;
+ (NSBundle *)bundleWithIdentifier:(NSString *)identifier;

+ (NSArray *)allBundles;
+ (NSArray *)allFrameworks;

- (BOOL)load;

- (BOOL)isLoaded;
- (BOOL)unload;



- (BOOL)preflightAndReturnError:(NSError **)error;
- (BOOL)loadAndReturnError:(NSError **)error;


- (NSString *)bundlePath;
- (NSString *)resourcePath;
- (NSString *)executablePath;
- (NSString *)pathForAuxiliaryExecutable:(NSString *)executableName;

- (NSString *)privateFrameworksPath;
- (NSString *)sharedFrameworksPath;
- (NSString *)sharedSupportPath;
- (NSString *)builtInPlugInsPath;

- (NSString *)bundleIdentifier;

- (Class)classNamed:(NSString *)className;

- (Class)principalClass;


+ (NSString *)pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)bundlePath;
- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)ext;
- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)subpath;
- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)ext inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName;

+ (NSArray *)pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)bundlePath;
- (NSArray *)pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)subpath;
- (NSArray *)pathsForResourcesOfType:(NSString *)ext inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName;

- (NSString *)localizedStringForKey:(NSString *)key value:(NSString *)value table:(NSString *)tableName;

- (NSDictionary *)infoDictionary;

- (NSDictionary *)localizedInfoDictionary;
- (id)objectForInfoDictionaryKey:(NSString *)key;


- (NSArray *)localizations;
- (NSArray *)preferredLocalizations;

- (NSString *)developmentLocalization;


+ (NSArray *)preferredLocalizationsFromArray:(NSArray *)localizationsArray;

+ (NSArray *)preferredLocalizationsFromArray:(NSArray *)localizationsArray forPreferences:(NSArray *)preferencesArray;



enum {
    NSBundleExecutableArchitectureI386 = 0x00000007,
    NSBundleExecutableArchitecturePPC = 0x00000012,
    NSBundleExecutableArchitectureX86_64 = 0x01000007,
    NSBundleExecutableArchitecturePPC64 = 0x01000012
};

- (NSArray *)executableArchitectures;


@end
# 111 "/var/include/Foundation/NSBundle.h"
extern NSString * const NSBundleDidLoadNotification;
extern NSString * const NSLoadedClasses;
# 13 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSByteOrder.h" 1







enum {
    NS_UnknownByteOrder = CFByteOrderUnknown,
    NS_LittleEndian = CFByteOrderLittleEndian,
    NS_BigEndian = CFByteOrderBigEndian
};

static __inline__ __attribute__((always_inline)) long NSHostByteOrder(void) {
    return CFByteOrderGetCurrent();
}

static __inline__ __attribute__((always_inline)) unsigned short NSSwapShort(unsigned short inv) {
    return CFSwapInt16(inv);
}

static __inline__ __attribute__((always_inline)) unsigned int NSSwapInt(unsigned int inv) {
    return CFSwapInt32(inv);
}

static __inline__ __attribute__((always_inline)) unsigned long NSSwapLong(unsigned long inv) {



    return CFSwapInt32(inv);

}

static __inline__ __attribute__((always_inline)) unsigned long long NSSwapLongLong(unsigned long long inv) {
    return CFSwapInt64(inv);
}

static __inline__ __attribute__((always_inline)) unsigned short NSSwapBigShortToHost(unsigned short x) {
    return CFSwapInt16BigToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned int NSSwapBigIntToHost(unsigned int x) {
    return CFSwapInt32BigToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned long NSSwapBigLongToHost(unsigned long x) {



    return CFSwapInt32BigToHost(x);

}

static __inline__ __attribute__((always_inline)) unsigned long long NSSwapBigLongLongToHost(unsigned long long x) {
    return CFSwapInt64BigToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned short NSSwapHostShortToBig(unsigned short x) {
    return CFSwapInt16HostToBig(x);
}

static __inline__ __attribute__((always_inline)) unsigned int NSSwapHostIntToBig(unsigned int x) {
    return CFSwapInt32HostToBig(x);
}

static __inline__ __attribute__((always_inline)) unsigned long NSSwapHostLongToBig(unsigned long x) {



    return CFSwapInt32HostToBig(x);

}

static __inline__ __attribute__((always_inline)) unsigned long long NSSwapHostLongLongToBig(unsigned long long x) {
    return CFSwapInt64HostToBig(x);
}

static __inline__ __attribute__((always_inline)) unsigned short NSSwapLittleShortToHost(unsigned short x) {
    return CFSwapInt16LittleToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned int NSSwapLittleIntToHost(unsigned int x) {
    return CFSwapInt32LittleToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned long NSSwapLittleLongToHost(unsigned long x) {



    return CFSwapInt32LittleToHost(x);

}

static __inline__ __attribute__((always_inline)) unsigned long long NSSwapLittleLongLongToHost(unsigned long long x) {
    return CFSwapInt64LittleToHost(x);
}

static __inline__ __attribute__((always_inline)) unsigned short NSSwapHostShortToLittle(unsigned short x) {
    return CFSwapInt16HostToLittle(x);
}

static __inline__ __attribute__((always_inline)) unsigned int NSSwapHostIntToLittle(unsigned int x) {
    return CFSwapInt32HostToLittle(x);
}

static __inline__ __attribute__((always_inline)) unsigned long NSSwapHostLongToLittle(unsigned long x) {



    return CFSwapInt32HostToLittle(x);

}

static __inline__ __attribute__((always_inline)) unsigned long long NSSwapHostLongLongToLittle(unsigned long long x) {
    return CFSwapInt64HostToLittle(x);
}


typedef struct {unsigned int v;} NSSwappedFloat;
typedef struct {unsigned long long v;} NSSwappedDouble;

static __inline__ __attribute__((always_inline)) NSSwappedFloat NSConvertHostFloatToSwapped(float x) {
    union fconv {
 float number;
 NSSwappedFloat sf;
    };
    return ((union fconv *)&x)->sf;
}

static __inline__ __attribute__((always_inline)) float NSConvertSwappedFloatToHost(NSSwappedFloat x) {
    union fconv {
 float number;
 NSSwappedFloat sf;
    };
    return ((union fconv *)&x)->number;
}

static __inline__ __attribute__((always_inline)) NSSwappedDouble NSConvertHostDoubleToSwapped(double x) {
    union dconv {
 double number;
 NSSwappedDouble sd;
    };
    return ((union dconv *)&x)->sd;
}

static __inline__ __attribute__((always_inline)) double NSConvertSwappedDoubleToHost(NSSwappedDouble x) {
    union dconv {
 double number;
 NSSwappedDouble sd;
    };
    return ((union dconv *)&x)->number;
}

static __inline__ __attribute__((always_inline)) NSSwappedFloat NSSwapFloat(NSSwappedFloat x) {
    x.v = NSSwapInt(x.v);
    return x;
}

static __inline__ __attribute__((always_inline)) NSSwappedDouble NSSwapDouble(NSSwappedDouble x) {
    x.v = NSSwapLongLong(x.v);
    return x;
}
# 200 "/var/include/Foundation/NSByteOrder.h"
static __inline__ __attribute__((always_inline)) double NSSwapBigDoubleToHost(NSSwappedDouble x) {
    return NSConvertSwappedDoubleToHost(NSSwapDouble(x));
}

static __inline__ __attribute__((always_inline)) float NSSwapBigFloatToHost(NSSwappedFloat x) {
    return NSConvertSwappedFloatToHost(NSSwapFloat(x));
}

static __inline__ __attribute__((always_inline)) NSSwappedDouble NSSwapHostDoubleToBig(double x) {
    return NSSwapDouble(NSConvertHostDoubleToSwapped(x));
}

static __inline__ __attribute__((always_inline)) NSSwappedFloat NSSwapHostFloatToBig(float x) {
    return NSSwapFloat(NSConvertHostFloatToSwapped(x));
}

static __inline__ __attribute__((always_inline)) double NSSwapLittleDoubleToHost(NSSwappedDouble x) {
    return NSConvertSwappedDoubleToHost(x);
}

static __inline__ __attribute__((always_inline)) float NSSwapLittleFloatToHost(NSSwappedFloat x) {
    return NSConvertSwappedFloatToHost(x);
}

static __inline__ __attribute__((always_inline)) NSSwappedDouble NSSwapHostDoubleToLittle(double x) {
    return NSConvertHostDoubleToSwapped(x);
}

static __inline__ __attribute__((always_inline)) NSSwappedFloat NSSwapHostFloatToLittle(float x) {
    return NSConvertHostFloatToSwapped(x);
}
# 14 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSCalendar.h" 1






# 1 "/var/include/Foundation/NSDate.h" 1






@class NSString;

typedef double NSTimeInterval;



@interface NSDate : NSObject <NSCopying, NSCoding>

- (NSTimeInterval)timeIntervalSinceReferenceDate;

@end

@interface NSDate (NSExtendedDate)

- (NSTimeInterval)timeIntervalSinceDate:(NSDate *)anotherDate;
- (NSTimeInterval)timeIntervalSinceNow;
- (NSTimeInterval)timeIntervalSince1970;

- (id)addTimeInterval:(NSTimeInterval)seconds;

- (NSDate *)earlierDate:(NSDate *)anotherDate;
- (NSDate *)laterDate:(NSDate *)anotherDate;
- (NSComparisonResult)compare:(NSDate *)other;

- (NSString *)description;
- (BOOL)isEqualToDate:(NSDate *)otherDate;

+ (NSTimeInterval)timeIntervalSinceReferenceDate;

@end

@interface NSDate (NSDateCreation)

+ (id)date;

+ (id)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;
+ (id)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)secs;
+ (id)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;

+ (id)distantFuture;
+ (id)distantPast;

- (id)init;
- (id)initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)secsToBeAdded;
- (id)initWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate *)anotherDate;
- (id)initWithTimeIntervalSinceNow:(NSTimeInterval)secsToBeAddedToNow;

@end
# 8 "/var/include/Foundation/NSCalendar.h" 2





@class NSDateComponents, NSLocale, NSTimeZone, NSString;

enum {
 NSEraCalendarUnit = kCFCalendarUnitEra,
 NSYearCalendarUnit = kCFCalendarUnitYear,
 NSMonthCalendarUnit = kCFCalendarUnitMonth,
 NSDayCalendarUnit = kCFCalendarUnitDay,
 NSHourCalendarUnit = kCFCalendarUnitHour,
 NSMinuteCalendarUnit = kCFCalendarUnitMinute,
 NSSecondCalendarUnit = kCFCalendarUnitSecond,
 NSWeekCalendarUnit = kCFCalendarUnitWeek,
 NSWeekdayCalendarUnit = kCFCalendarUnitWeekday,
 NSWeekdayOrdinalCalendarUnit = kCFCalendarUnitWeekdayOrdinal,
};
typedef NSUInteger NSCalendarUnit;

@interface NSCalendar : NSObject <NSCopying, NSCoding>

+ (id)currentCalendar;
+ (id)autoupdatingCurrentCalendar ;

- (id)initWithCalendarIdentifier:(NSString *)ident;

- (NSString *)calendarIdentifier;


- (void)setLocale:(NSLocale *)locale;
- (NSLocale *)locale;

- (void)setTimeZone:(NSTimeZone *)tz;
- (NSTimeZone *)timeZone;

- (void)setFirstWeekday:(NSUInteger)weekday;
- (NSUInteger)firstWeekday;

- (void)setMinimumDaysInFirstWeek:(NSUInteger)mdw;
- (NSUInteger)minimumDaysInFirstWeek;


- (NSRange)minimumRangeOfUnit:(NSCalendarUnit)unit;
- (NSRange)maximumRangeOfUnit:(NSCalendarUnit)unit;

- (NSRange)rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date;
- (NSUInteger)ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date;

- (BOOL)rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate **)datep interval:(NSTimeInterval *)tip forDate:(NSDate *)date ;

- (NSDate *)dateFromComponents:(NSDateComponents *)comps;
- (NSDateComponents *)components:(NSUInteger)unitFlags fromDate:(NSDate *)date;

- (NSDate *)dateByAddingComponents:(NSDateComponents *)comps toDate:(NSDate *)date options:(NSUInteger)opts;

- (NSDateComponents *)components:(NSUInteger)unitFlags fromDate:(NSDate *)startingDate toDate:(NSDate *)resultDate options:(NSUInteger)opts;

@end

enum {
 NSWrapCalendarComponents = kCFCalendarComponentsWrap,
};
# 91 "/var/include/Foundation/NSCalendar.h"
enum {
 NSUndefinedDateComponent = 2147483647L
};

@interface NSDateComponents : NSObject <NSCopying, NSCoding>
- (NSInteger)era;
- (NSInteger)year;
- (NSInteger)month;
- (NSInteger)day;
- (NSInteger)hour;
- (NSInteger)minute;
- (NSInteger)second;
- (NSInteger)week;
- (NSInteger)weekday;
- (NSInteger)weekdayOrdinal;

- (void)setEra:(NSInteger)v;
- (void)setYear:(NSInteger)v;
- (void)setMonth:(NSInteger)v;
- (void)setDay:(NSInteger)v;
- (void)setHour:(NSInteger)v;
- (void)setMinute:(NSInteger)v;
- (void)setSecond:(NSInteger)v;
- (void)setWeek:(NSInteger)v;
- (void)setWeekday:(NSInteger)v;
- (void)setWeekdayOrdinal:(NSInteger)v;
@end
# 15 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSCharacterSet.h" 1







# 1 "/var/include/Foundation/NSString.h" 1




typedef unsigned short unichar;






@class NSData, NSArray, NSDictionary, NSCharacterSet, NSData, NSURL, NSError, NSLocale;

extern NSString * const NSParseErrorException;







enum {
    NSCaseInsensitiveSearch = 1,
    NSLiteralSearch = 2,
    NSBackwardsSearch = 4,
    NSAnchoredSearch = 8,
    NSNumericSearch = 64

    ,
    NSDiacriticInsensitiveSearch = 128,
    NSWidthInsensitiveSearch = 256,
    NSForcedOrderingSearch = 512

};
typedef NSUInteger NSStringCompareOptions;





enum {
    NSASCIIStringEncoding = 1,
    NSNEXTSTEPStringEncoding = 2,
    NSJapaneseEUCStringEncoding = 3,
    NSUTF8StringEncoding = 4,
    NSISOLatin1StringEncoding = 5,
    NSSymbolStringEncoding = 6,
    NSNonLossyASCIIStringEncoding = 7,
    NSShiftJISStringEncoding = 8,
    NSISOLatin2StringEncoding = 9,
    NSUnicodeStringEncoding = 10,
    NSWindowsCP1251StringEncoding = 11,
    NSWindowsCP1252StringEncoding = 12,
    NSWindowsCP1253StringEncoding = 13,
    NSWindowsCP1254StringEncoding = 14,
    NSWindowsCP1250StringEncoding = 15,
    NSISO2022JPStringEncoding = 21,
    NSMacOSRomanStringEncoding = 30,

    NSUTF16StringEncoding = NSUnicodeStringEncoding,


    NSUTF16BigEndianStringEncoding = 0x90000100,
    NSUTF16LittleEndianStringEncoding = 0x94000100,

    NSUTF32StringEncoding = 0x8c000100,
    NSUTF32BigEndianStringEncoding = 0x98000100,
    NSUTF32LittleEndianStringEncoding = 0x9c000100

};
typedef NSUInteger NSStringEncoding;


enum {
    NSStringEncodingConversionAllowLossy = 1,
    NSStringEncodingConversionExternalRepresentation = 2
};
typedef NSUInteger NSStringEncodingConversionOptions;


extern NSString * const NSCharacterConversionException;


@interface NSString : NSObject <NSCopying, NSMutableCopying, NSCoding>



- (NSUInteger)length;
- (unichar)characterAtIndex:(NSUInteger)index;

@end

@interface NSString (NSStringExtensionMethods)

- (void)getCharacters:(unichar *)buffer;
- (void)getCharacters:(unichar *)buffer range:(NSRange)aRange;

- (NSString *)substringFromIndex:(NSUInteger)from;
- (NSString *)substringToIndex:(NSUInteger)to;
- (NSString *)substringWithRange:(NSRange)range;

- (NSComparisonResult)compare:(NSString *)string;
- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask;
- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)compareRange;
- (NSComparisonResult)compare:(NSString *)string options:(NSStringCompareOptions)mask range:(NSRange)compareRange locale:(id)locale;
- (NSComparisonResult)caseInsensitiveCompare:(NSString *)string;
- (NSComparisonResult)localizedCompare:(NSString *)string;
- (NSComparisonResult)localizedCaseInsensitiveCompare:(NSString *)string;

- (BOOL)isEqualToString:(NSString *)aString;

- (BOOL)hasPrefix:(NSString *)aString;
- (BOOL)hasSuffix:(NSString *)aString;



- (NSRange)rangeOfString:(NSString *)aString;
- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask;
- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange;

- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(NSLocale *)locale;




- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet;
- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask;
- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask range:(NSRange)searchRange;

- (NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)index;

- (NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range;


- (NSString *)stringByAppendingString:(NSString *)aString;
- (NSString *)stringByAppendingFormat:(NSString *)format, ...;



- (double)doubleValue;
- (float)floatValue;
- (int)intValue;

- (NSInteger)integerValue;
- (long long)longLongValue;
- (BOOL)boolValue;


- (NSArray *)componentsSeparatedByString:(NSString *)separator;

- (NSArray *)componentsSeparatedByCharactersInSet:(NSCharacterSet *)separator;


- (NSString *)commonPrefixWithString:(NSString *)aString options:(NSStringCompareOptions)mask;

- (NSString *)uppercaseString;
- (NSString *)lowercaseString;
- (NSString *)capitalizedString;


- (NSString *)stringByTrimmingCharactersInSet:(NSCharacterSet *)set;
- (NSString *)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString *)padString startingAtIndex:(NSUInteger)padIndex;


- (void)getLineStart:(NSUInteger *)startPtr end:(NSUInteger *)lineEndPtr contentsEnd:(NSUInteger *)contentsEndPtr forRange:(NSRange)range;
- (NSRange)lineRangeForRange:(NSRange)range;


- (void)getParagraphStart:(NSUInteger *)startPtr end:(NSUInteger *)parEndPtr contentsEnd:(NSUInteger *)contentsEndPtr forRange:(NSRange)range;
- (NSRange)paragraphRangeForRange:(NSRange)range;


- (NSString *)description;

- (NSUInteger)hash;



- (NSStringEncoding)fastestEncoding;
- (NSStringEncoding)smallestEncoding;

- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)lossy;
- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding;

- (BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding;




- (const char *)cStringUsingEncoding:(NSStringEncoding)encoding;
- (BOOL)getCString:(char *)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding;
# 204 "/var/include/Foundation/NSString.h"
- (BOOL)getBytes:(void *)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger *)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer)leftover;



- (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc;
- (NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc;



- (NSString *)decomposedStringWithCanonicalMapping;
- (NSString *)precomposedStringWithCanonicalMapping;
- (NSString *)decomposedStringWithCompatibilityMapping;
- (NSString *)precomposedStringWithCompatibilityMapping;





- (NSString *)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale *)locale;



- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;



- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement;



- (NSString *)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString *)replacement;


- (const char *)UTF8String;



+ (NSStringEncoding)defaultCStringEncoding;

+ (const NSStringEncoding *)availableStringEncodings;
+ (NSString *)localizedNameOfStringEncoding:(NSStringEncoding)encoding;





- (id)init;
- (id)initWithCharactersNoCopy:(unichar *)characters length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer;
- (id)initWithCharacters:(const unichar *)characters length:(NSUInteger)length;
- (id)initWithUTF8String:(const char *)nullTerminatedCString;
- (id)initWithString:(NSString *)aString;
- (id)initWithFormat:(NSString *)format, ...;
- (id)initWithFormat:(NSString *)format arguments:(va_list)argList;
- (id)initWithFormat:(NSString *)format locale:(id)locale, ...;
- (id)initWithFormat:(NSString *)format locale:(id)locale arguments:(va_list)argList;
- (id)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding;
- (id)initWithBytes:(const void *)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding;

- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)len encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)freeBuffer;


+ (id)string;
+ (id)stringWithString:(NSString *)string;
+ (id)stringWithCharacters:(const unichar *)characters length:(NSUInteger)length;
+ (id)stringWithUTF8String:(const char *)nullTerminatedCString;
+ (id)stringWithFormat:(NSString *)format, ...;
+ (id)localizedStringWithFormat:(NSString *)format, ...;


- (id)initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding;
+ (id)stringWithCString:(const char *)cString encoding:(NSStringEncoding)enc;



- (id)initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error;
- (id)initWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error;
+ (id)stringWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error;
+ (id)stringWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error;



- (id)initWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error;
- (id)initWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error;
+ (id)stringWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error;
+ (id)stringWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error;



- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error;
- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error;




@end


@interface NSMutableString : NSString



- (void)replaceCharactersInRange:(NSRange)range withString:(NSString *)aString;

@end

@interface NSMutableString (NSMutableStringExtensionMethods)

- (void)insertString:(NSString *)aString atIndex:(NSUInteger)loc;
- (void)deleteCharactersInRange:(NSRange)range;
- (void)appendString:(NSString *)aString;
- (void)appendFormat:(NSString *)format, ...;
- (void)setString:(NSString *)aString;



- (id)initWithCapacity:(NSUInteger)capacity;
+ (id)stringWithCapacity:(NSUInteger)capacity;




- (NSUInteger)replaceOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;


@end



@interface NSString (NSExtendedStringPropertyListParsing)

- (id)propertyList;
- (NSDictionary *)propertyListFromStringsFileFormat;

@end



@interface NSString (NSStringDeprecated)



- (const char *)cString __attribute__((deprecated));
- (const char *)lossyCString __attribute__((deprecated));
- (NSUInteger)cStringLength __attribute__((deprecated));
- (void)getCString:(char *)bytes __attribute__((deprecated));
- (void)getCString:(char *)bytes maxLength:(NSUInteger)maxLength __attribute__((deprecated));
- (void)getCString:(char *)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer)leftoverRange __attribute__((deprecated));

- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile __attribute__((deprecated));
- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)atomically __attribute__((deprecated));

- (id)initWithContentsOfFile:(NSString *)path __attribute__((deprecated));
- (id)initWithContentsOfURL:(NSURL *)url __attribute__((deprecated));
+ (id)stringWithContentsOfFile:(NSString *)path __attribute__((deprecated));
+ (id)stringWithContentsOfURL:(NSURL *)url __attribute__((deprecated));

- (id)initWithCStringNoCopy:(char *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer __attribute__((deprecated));
- (id)initWithCString:(const char *)bytes length:(NSUInteger)length __attribute__((deprecated));
- (id)initWithCString:(const char *)bytes __attribute__((deprecated));
+ (id)stringWithCString:(const char *)bytes length:(NSUInteger)length __attribute__((deprecated));
+ (id)stringWithCString:(const char *)bytes __attribute__((deprecated));

@end
# 384 "/var/include/Foundation/NSString.h"
@interface NSSimpleCString : NSString {
@protected
    char *bytes;
    int numBytes;



}
@end

@interface NSConstantString : NSSimpleCString
@end



extern void *_NSConstantStringClassReference;
# 9 "/var/include/Foundation/NSCharacterSet.h" 2

@class NSData;

enum {
    NSOpenStepUnicodeReservedBase = 0xF400
};

@interface NSCharacterSet : NSObject <NSCopying, NSMutableCopying, NSCoding>

+ (id)controlCharacterSet;
+ (id)whitespaceCharacterSet;
+ (id)whitespaceAndNewlineCharacterSet;
+ (id)decimalDigitCharacterSet;
+ (id)letterCharacterSet;
+ (id)lowercaseLetterCharacterSet;
+ (id)uppercaseLetterCharacterSet;
+ (id)nonBaseCharacterSet;
+ (id)alphanumericCharacterSet;
+ (id)decomposableCharacterSet;
+ (id)illegalCharacterSet;
+ (id)punctuationCharacterSet;

+ (id)capitalizedLetterCharacterSet;


+ (id)symbolCharacterSet;


+ (id)newlineCharacterSet;


+ (id)characterSetWithRange:(NSRange)aRange;
+ (id)characterSetWithCharactersInString:(NSString *)aString;
+ (id)characterSetWithBitmapRepresentation:(NSData *)data;
+ (id)characterSetWithContentsOfFile:(NSString *)fName;

- (BOOL)characterIsMember:(unichar)aCharacter;
- (NSData *)bitmapRepresentation;
- (NSCharacterSet *)invertedSet;


- (BOOL)longCharacterIsMember:(UTF32Char)theLongChar;

- (BOOL)isSupersetOfSet:(NSCharacterSet *)theOtherSet;
- (BOOL)hasMemberInPlane:(uint8_t)thePlane;

@end

@interface NSMutableCharacterSet : NSCharacterSet <NSCopying, NSMutableCopying>

- (void)addCharactersInRange:(NSRange)aRange;
- (void)removeCharactersInRange:(NSRange)aRange;
- (void)addCharactersInString:(NSString *)aString;
- (void)removeCharactersInString:(NSString *)aString;
- (void)formUnionWithCharacterSet:(NSCharacterSet *)otherSet;
- (void)formIntersectionWithCharacterSet:(NSCharacterSet *)otherSet;
- (void)invert;

@end
# 16 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSCoder.h" 1






@class NSString, NSData;

@interface NSCoder : NSObject

- (void)encodeValueOfObjCType:(const char *)type at:(const void *)addr;
- (void)encodeDataObject:(NSData *)data;
- (void)decodeValueOfObjCType:(const char *)type at:(void *)data;
- (NSData *)decodeDataObject;
- (NSInteger)versionForClassName:(NSString *)className;

@end

@interface NSCoder (NSExtendedCoder)

- (void)encodeObject:(id)object;
- (void)encodeRootObject:(id)rootObject;
- (void)encodeBycopyObject:(id)anObject;
- (void)encodeByrefObject:(id)anObject;
- (void)encodeConditionalObject:(id)object;
- (void)encodeValuesOfObjCTypes:(const char *)types, ...;
- (void)encodeArrayOfObjCType:(const char *)type count:(NSUInteger)count at:(const void *)array;
- (void)encodeBytes:(const void *)byteaddr length:(NSUInteger)length;

- (id)decodeObject;
- (void)decodeValuesOfObjCTypes:(const char *)types, ...;
- (void)decodeArrayOfObjCType:(const char *)itemType count:(NSUInteger)count at:(void *)array;
- (void *)decodeBytesWithReturnedLength:(NSUInteger *)lengthp;






- (void)setObjectZone:(NSZone *)zone;
- (NSZone *)objectZone;

- (unsigned)systemVersion;


- (BOOL)allowsKeyedCoding;

- (void)encodeObject:(id)objv forKey:(NSString *)key;
- (void)encodeConditionalObject:(id)objv forKey:(NSString *)key;
- (void)encodeBool:(BOOL)boolv forKey:(NSString *)key;
- (void)encodeInt:(int)intv forKey:(NSString *)key;
- (void)encodeInt32:(int32_t)intv forKey:(NSString *)key;
- (void)encodeInt64:(int64_t)intv forKey:(NSString *)key;
- (void)encodeFloat:(float)realv forKey:(NSString *)key;
- (void)encodeDouble:(double)realv forKey:(NSString *)key;
- (void)encodeBytes:(const uint8_t *)bytesp length:(NSUInteger)lenv forKey:(NSString *)key;

- (BOOL)containsValueForKey:(NSString *)key;
- (id)decodeObjectForKey:(NSString *)key;
- (BOOL)decodeBoolForKey:(NSString *)key;
- (int)decodeIntForKey:(NSString *)key;
- (int32_t)decodeInt32ForKey:(NSString *)key;
- (int64_t)decodeInt64ForKey:(NSString *)key;
- (float)decodeFloatForKey:(NSString *)key;
- (double)decodeDoubleForKey:(NSString *)key;
- (const uint8_t *)decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp;



- (void)encodeInteger:(NSInteger)intv forKey:(NSString *)key;
- (NSInteger)decodeIntegerForKey:(NSString *)key;


@end
# 17 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSData.h" 1







@class NSString, NSURL, NSError;




enum {
    NSMappedRead = 1,
    NSUncachedRead = 2
};

enum {
    NSAtomicWrite = 1
};





@interface NSData : NSObject <NSCopying, NSMutableCopying, NSCoding>

- (NSUInteger)length;
- (const void *)bytes;

@end

@interface NSData (NSExtendedData)

- (NSString *)description;
- (void)getBytes:(void *)buffer;
- (void)getBytes:(void *)buffer length:(NSUInteger)length;
- (void)getBytes:(void *)buffer range:(NSRange)range;
- (BOOL)isEqualToData:(NSData *)other;
- (NSData *)subdataWithRange:(NSRange)range;
- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;
- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)atomically;

- (BOOL)writeToFile:(NSString *)path options:(NSUInteger)writeOptionsMask error:(NSError **)errorPtr;
- (BOOL)writeToURL:(NSURL *)url options:(NSUInteger)writeOptionsMask error:(NSError **)errorPtr;


@end

@interface NSData (NSDataCreation)

+ (id)data;
+ (id)dataWithBytes:(const void *)bytes length:(NSUInteger)length;
+ (id)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length;

+ (id)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;


+ (id)dataWithContentsOfFile:(NSString *)path options:(NSUInteger)readOptionsMask error:(NSError **)errorPtr;
+ (id)dataWithContentsOfURL:(NSURL *)url options:(NSUInteger)readOptionsMask error:(NSError **)errorPtr;

+ (id)dataWithContentsOfFile:(NSString *)path;
+ (id)dataWithContentsOfURL:(NSURL *)url;
+ (id)dataWithContentsOfMappedFile:(NSString *)path;
- (id)initWithBytes:(const void *)bytes length:(NSUInteger)length;
- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length;

- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)b;


- (id)initWithContentsOfFile:(NSString *)path options:(NSUInteger)readOptionsMask error:(NSError **)errorPtr;
- (id)initWithContentsOfURL:(NSURL *)url options:(NSUInteger)readOptionsMask error:(NSError **)errorPtr;

- (id)initWithContentsOfFile:(NSString *)path;
- (id)initWithContentsOfURL:(NSURL *)url;
- (id)initWithContentsOfMappedFile:(NSString *)path;
- (id)initWithData:(NSData *)data;
+ (id)dataWithData:(NSData *)data;

@end



@interface NSMutableData : NSData

- (void *)mutableBytes;
- (void)setLength:(NSUInteger)length;

@end

@interface NSMutableData (NSExtendedMutableData)

- (void)appendBytes:(const void *)bytes length:(NSUInteger)length;
- (void)appendData:(NSData *)other;
- (void)increaseLengthBy:(NSUInteger)extraLength;
- (void)replaceBytesInRange:(NSRange)range withBytes:(const void *)bytes;
- (void)resetBytesInRange:(NSRange)range;
- (void)setData:(NSData *)data;

- (void)replaceBytesInRange:(NSRange)range withBytes:(const void *)replacementBytes length:(NSUInteger)replacementLength;


@end

@interface NSMutableData (NSMutableDataCreation)

+ (id)dataWithCapacity:(NSUInteger)aNumItems;
+ (id)dataWithLength:(NSUInteger)length;
- (id)initWithCapacity:(NSUInteger)capacity;
- (id)initWithLength:(NSUInteger)length;

@end
# 18 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSDateFormatter.h" 1




# 1 "/var/include/Foundation/NSFormatter.h" 1







@class NSString;
@class NSAttributedString;
@class NSDictionary;

@interface NSFormatter : NSObject <NSCopying, NSCoding>

- (NSString *)stringForObjectValue:(id)obj;

- (NSAttributedString *)attributedStringForObjectValue:(id)obj withDefaultAttributes:(NSDictionary *)attrs;

- (NSString *)editingStringForObjectValue:(id)obj;

- (BOOL)getObjectValue:(id *)obj forString:(NSString *)string errorDescription:(NSString **)error;

- (BOOL)isPartialStringValid:(NSString *)partialString newEditingString:(NSString **)newString errorDescription:(NSString **)error;


- (BOOL)isPartialStringValid:(NSString **)partialStringPtr proposedSelectedRange:(NSRangePointer)proposedSelRangePtr originalString:(NSString *)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString **)error;

@end
# 6 "/var/include/Foundation/NSDateFormatter.h" 2


@class NSLocale, NSDate, NSCalendar, NSTimeZone, NSError, NSArray, NSMutableDictionary;

@interface NSDateFormatter : NSFormatter {
@private
    NSMutableDictionary *_attributes;
    CFDateFormatterRef _formatter;
    NSUInteger _counter;
}

- (id)init;





- (BOOL)getObjectValue:(id *)obj forString:(NSString *)string range:(inout NSRange *)rangep error:(NSError **)error;




- (NSString *)stringFromDate:(NSDate *)date;
- (NSDate *)dateFromString:(NSString *)string;





- (NSString *)dateFormat;



enum {
    NSDateFormatterNoStyle = kCFDateFormatterNoStyle,
    NSDateFormatterShortStyle = kCFDateFormatterShortStyle,
    NSDateFormatterMediumStyle = kCFDateFormatterMediumStyle,
    NSDateFormatterLongStyle = kCFDateFormatterLongStyle,
    NSDateFormatterFullStyle = kCFDateFormatterFullStyle
};
typedef NSUInteger NSDateFormatterStyle;

- (NSDateFormatterStyle)dateStyle;
- (void)setDateStyle:(NSDateFormatterStyle)style;

- (NSDateFormatterStyle)timeStyle;
- (void)setTimeStyle:(NSDateFormatterStyle)style;

- (NSLocale *)locale;
- (void)setLocale:(NSLocale *)locale;

- (BOOL)generatesCalendarDates;
- (void)setGeneratesCalendarDates:(BOOL)b;

enum {
    NSDateFormatterBehaviorDefault = 0,



    NSDateFormatterBehavior10_4 = 1040,
};
typedef NSUInteger NSDateFormatterBehavior;

- (NSDateFormatterBehavior)formatterBehavior;
- (void)setFormatterBehavior:(NSDateFormatterBehavior)behavior;

+ (NSDateFormatterBehavior)defaultFormatterBehavior;
+ (void)setDefaultFormatterBehavior:(NSDateFormatterBehavior)behavior;

- (void)setDateFormat:(NSString *)string;

- (NSTimeZone *)timeZone;
- (void)setTimeZone:(NSTimeZone *)tz;

- (NSCalendar *)calendar;
- (void)setCalendar:(NSCalendar *)calendar;

- (BOOL)isLenient;
- (void)setLenient:(BOOL)b;

- (NSDate *)twoDigitStartDate;
- (void)setTwoDigitStartDate:(NSDate *)date;

- (NSDate *)defaultDate;
- (void)setDefaultDate:(NSDate *)date;

- (NSArray *)eraSymbols;
- (void)setEraSymbols:(NSArray *)array;

- (NSArray *)monthSymbols;
- (void)setMonthSymbols:(NSArray *)array;

- (NSArray *)shortMonthSymbols;
- (void)setShortMonthSymbols:(NSArray *)array;

- (NSArray *)weekdaySymbols;
- (void)setWeekdaySymbols:(NSArray *)array;

- (NSArray *)shortWeekdaySymbols;
- (void)setShortWeekdaySymbols:(NSArray *)array;

- (NSString *)AMSymbol;
- (void)setAMSymbol:(NSString *)string;

- (NSString *)PMSymbol;
- (void)setPMSymbol:(NSString *)string;



- (NSArray *)longEraSymbols ;
- (void)setLongEraSymbols:(NSArray *)array ;

- (NSArray *)veryShortMonthSymbols ;
- (void)setVeryShortMonthSymbols:(NSArray *)array ;

- (NSArray *)standaloneMonthSymbols ;
- (void)setStandaloneMonthSymbols:(NSArray *)array ;

- (NSArray *)shortStandaloneMonthSymbols ;
- (void)setShortStandaloneMonthSymbols:(NSArray *)array ;

- (NSArray *)veryShortStandaloneMonthSymbols ;
- (void)setVeryShortStandaloneMonthSymbols:(NSArray *)array ;

- (NSArray *)veryShortWeekdaySymbols ;
- (void)setVeryShortWeekdaySymbols:(NSArray *)array ;

- (NSArray *)standaloneWeekdaySymbols ;
- (void)setStandaloneWeekdaySymbols:(NSArray *)array ;

- (NSArray *)shortStandaloneWeekdaySymbols ;
- (void)setShortStandaloneWeekdaySymbols:(NSArray *)array ;

- (NSArray *)veryShortStandaloneWeekdaySymbols ;
- (void)setVeryShortStandaloneWeekdaySymbols:(NSArray *)array ;

- (NSArray *)quarterSymbols ;
- (void)setQuarterSymbols:(NSArray *)array ;

- (NSArray *)shortQuarterSymbols ;
- (void)setShortQuarterSymbols:(NSArray *)array ;

- (NSArray *)standaloneQuarterSymbols ;
- (void)setStandaloneQuarterSymbols:(NSArray *)array ;

- (NSArray *)shortStandaloneQuarterSymbols ;
- (void)setShortStandaloneQuarterSymbols:(NSArray *)array ;

- (NSDate *)gregorianStartDate ;
- (void)setGregorianStartDate:(NSDate *)date ;

@end
# 20 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSDecimal.h" 1







@class NSDictionary;
# 20 "/var/include/Foundation/NSDecimal.h"
enum {
    NSRoundPlain,
    NSRoundDown,
    NSRoundUp,
    NSRoundBankers
};
typedef NSUInteger NSRoundingMode;

enum {
    NSCalculationNoError = 0,
    NSCalculationLossOfPrecision,
    NSCalculationUnderflow,
    NSCalculationOverflow,
    NSCalculationDivideByZero
};
typedef NSUInteger NSCalculationError;






typedef struct {
    signed int _exponent:8;
    unsigned int _length:4;
    unsigned int _isNegative:1;
    unsigned int _isCompact:1;
    unsigned int _reserved:18;
    unsigned short _mantissa[(8)];
} NSDecimal;

static __inline__ __attribute__((always_inline)) BOOL NSDecimalIsNotANumber(const NSDecimal *dcm)
  { return ((dcm->_length == 0) && dcm->_isNegative); }



extern void NSDecimalCopy(NSDecimal *destination, const NSDecimal *source);

extern void NSDecimalCompact(NSDecimal *number);

extern NSComparisonResult NSDecimalCompare(const NSDecimal *leftOperand, const NSDecimal *rightOperand);


extern void NSDecimalRound(NSDecimal *result, const NSDecimal *number, NSInteger scale, NSRoundingMode roundingMode);




extern NSCalculationError NSDecimalNormalize(NSDecimal *number1, NSDecimal *number2, NSRoundingMode roundingMode);

extern NSCalculationError NSDecimalAdd(NSDecimal *result, const NSDecimal *leftOperand, const NSDecimal *rightOperand, NSRoundingMode roundingMode);


extern NSCalculationError NSDecimalSubtract(NSDecimal *result, const NSDecimal *leftOperand, const NSDecimal *rightOperand, NSRoundingMode roundingMode);


extern NSCalculationError NSDecimalMultiply(NSDecimal *result, const NSDecimal *leftOperand, const NSDecimal *rightOperand, NSRoundingMode roundingMode);


extern NSCalculationError NSDecimalDivide(NSDecimal *result, const NSDecimal *leftOperand, const NSDecimal *rightOperand, NSRoundingMode roundingMode);



extern NSCalculationError NSDecimalPower(NSDecimal *result, const NSDecimal *number, NSUInteger power, NSRoundingMode roundingMode);

extern NSCalculationError NSDecimalMultiplyByPowerOf10(NSDecimal *result, const NSDecimal *number, short power, NSRoundingMode roundingMode);

extern NSString *NSDecimalString(const NSDecimal *dcm, id locale);
# 21 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSDecimalNumber.h" 1





# 1 "/var/include/Foundation/NSScanner.h" 1






@class NSString, NSCharacterSet, NSDictionary;

@interface NSScanner : NSObject <NSCopying>

- (NSString *)string;
- (NSUInteger)scanLocation;
- (void)setScanLocation:(NSUInteger)pos;
- (void)setCharactersToBeSkipped:(NSCharacterSet *)set;
- (void)setCaseSensitive:(BOOL)flag;
- (void)setLocale:(id)locale;

@end

@interface NSScanner (NSExtendedScanner)

- (NSCharacterSet *)charactersToBeSkipped;
- (BOOL)caseSensitive;
- (id)locale;

- (BOOL)scanInt:(int *)value;

- (BOOL)scanInteger:(NSInteger *)value;
- (BOOL)scanHexLongLong:(unsigned long long *)result;
- (BOOL)scanHexFloat:(float *)result;
- (BOOL)scanHexDouble:(double *)result;

- (BOOL)scanHexInt:(unsigned *)value;
- (BOOL)scanLongLong:(long long *)value;
- (BOOL)scanFloat:(float *)value;
- (BOOL)scanDouble:(double *)value;

- (BOOL)scanString:(NSString *)string intoString:(NSString **)value;
- (BOOL)scanCharactersFromSet:(NSCharacterSet *)set intoString:(NSString **)value;

- (BOOL)scanUpToString:(NSString *)string intoString:(NSString **)value;
- (BOOL)scanUpToCharactersFromSet:(NSCharacterSet *)set intoString:(NSString **)value;

- (BOOL)isAtEnd;

- (id)initWithString:(NSString *)string;
+ (id)scannerWithString:(NSString *)string;
+ (id)localizedScannerWithString:(NSString *)string;

@end
# 7 "/var/include/Foundation/NSDecimalNumber.h" 2

# 1 "/var/include/Foundation/NSDictionary.h" 1







@class NSArray, NSString, NSURL;



@interface NSDictionary : NSObject <NSCopying, NSMutableCopying, NSCoding, NSFastEnumeration>

- (NSUInteger)count;
- (id)objectForKey:(id)aKey;
- (NSEnumerator *)keyEnumerator;

@end

@interface NSDictionary (NSExtendedDictionary)

- (NSArray *)allKeys;
- (NSArray *)allKeysForObject:(id)anObject;
- (NSArray *)allValues;
- (NSString *)description;
- (NSString *)descriptionInStringsFileFormat;
- (NSString *)descriptionWithLocale:(id)locale;
- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level;
- (BOOL)isEqualToDictionary:(NSDictionary *)otherDictionary;
- (NSEnumerator *)objectEnumerator;
- (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)marker;
- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;
- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)atomically;

- (NSArray *)keysSortedByValueUsingSelector:(SEL)comparator;
- (void)getObjects:(id *)objects andKeys:(id *)keys;

@end

@interface NSDictionary (NSDictionaryCreation)

+ (id)dictionary;
+ (id)dictionaryWithObject:(id)object forKey:(id)key;
+ (id)dictionaryWithObjects:(id *)objects forKeys:(id *)keys count:(NSUInteger)cnt;
+ (id)dictionaryWithObjectsAndKeys:(id)firstObject, ... __attribute__((sentinel(0,1)));
+ (id)dictionaryWithDictionary:(NSDictionary *)dict;
+ (id)dictionaryWithObjects:(NSArray *)objects forKeys:(NSArray *)keys;

- (id)initWithObjects:(id *)objects forKeys:(id *)keys count:(NSUInteger)cnt;
- (id)initWithObjectsAndKeys:(id)firstObject, ... __attribute__((sentinel(0,1)));
- (id)initWithDictionary:(NSDictionary *)otherDictionary;
- (id)initWithDictionary:(NSDictionary *)otherDictionary copyItems:(BOOL)flag;
- (id)initWithObjects:(NSArray *)objects forKeys:(NSArray *)keys;

+ (id)dictionaryWithContentsOfFile:(NSString *)path;
+ (id)dictionaryWithContentsOfURL:(NSURL *)url;
- (id)initWithContentsOfFile:(NSString *)path;
- (id)initWithContentsOfURL:(NSURL *)url;

@end



@interface NSMutableDictionary : NSDictionary

- (void)removeObjectForKey:(id)aKey;
- (void)setObject:(id)anObject forKey:(id)aKey;

@end

@interface NSMutableDictionary (NSExtendedMutableDictionary)

- (void)addEntriesFromDictionary:(NSDictionary *)otherDictionary;
- (void)removeAllObjects;
- (void)removeObjectsForKeys:(NSArray *)keyArray;
- (void)setDictionary:(NSDictionary *)otherDictionary;

@end

@interface NSMutableDictionary (NSMutableDictionaryCreation)

+ (id)dictionaryWithCapacity:(NSUInteger)numItems;
- (id)initWithCapacity:(NSUInteger)numItems;

@end
# 9 "/var/include/Foundation/NSDecimalNumber.h" 2



extern NSString * const NSDecimalNumberExactnessException;
extern NSString * const NSDecimalNumberOverflowException;
extern NSString * const NSDecimalNumberUnderflowException;
extern NSString * const NSDecimalNumberDivideByZeroException;



@class NSDecimalNumber;

@protocol NSDecimalNumberBehaviors

- (NSRoundingMode)roundingMode;

- (short)scale;


- (NSDecimalNumber *)exceptionDuringOperation:(SEL)operation error:(NSCalculationError)error leftOperand:(NSDecimalNumber *)leftOperand rightOperand:(NSDecimalNumber *)rightOperand;


@end



@interface NSDecimalNumber : NSNumber {
@private
    signed int _exponent:8;
    unsigned int _length:4;
    unsigned int _isNegative:1;
    unsigned int _isCompact:1;
    unsigned int _reserved:1;
    unsigned int _hasExternalRefCount:1;
    unsigned int _refs:16;
    unsigned short _mantissa[0];
}

- (id)initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
- (id)initWithDecimal:(NSDecimal)dcm;
- (id)initWithString:(NSString *)numberValue;
- (id)initWithString:(NSString *)numberValue locale:(id)locale;

- (NSString *)descriptionWithLocale:(id)locale;

- (NSDecimal)decimalValue;

+ (NSDecimalNumber *)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag;
+ (NSDecimalNumber *)decimalNumberWithDecimal:(NSDecimal)dcm;
+ (NSDecimalNumber *)decimalNumberWithString:(NSString *)numberValue;
+ (NSDecimalNumber *)decimalNumberWithString:(NSString *)numberValue locale:(id)locale;

+ (NSDecimalNumber *)zero;
+ (NSDecimalNumber *)one;
+ (NSDecimalNumber *)minimumDecimalNumber;
+ (NSDecimalNumber *)maximumDecimalNumber;
+ (NSDecimalNumber *)notANumber;

- (NSDecimalNumber *)decimalNumberByAdding:(NSDecimalNumber *)decimalNumber;
- (NSDecimalNumber *)decimalNumberByAdding:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior;

- (NSDecimalNumber *)decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber;
- (NSDecimalNumber *)decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior;

- (NSDecimalNumber *)decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber;
- (NSDecimalNumber *)decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior;

- (NSDecimalNumber *)decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber;
- (NSDecimalNumber *)decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id <NSDecimalNumberBehaviors>)behavior;

- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power;
- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id <NSDecimalNumberBehaviors>)behavior;

- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power;
- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id <NSDecimalNumberBehaviors>)behavior;


- (NSDecimalNumber *)decimalNumberByRoundingAccordingToBehavior:(id <NSDecimalNumberBehaviors>)behavior;


- (NSComparisonResult)compare:(NSNumber *)decimalNumber;


+ (void)setDefaultBehavior:(id <NSDecimalNumberBehaviors>)behavior;

+ (id <NSDecimalNumberBehaviors>)defaultBehavior;






- (const char *)objCType;


- (double)doubleValue;


@end



@interface NSDecimalNumberHandler : NSObject <NSDecimalNumberBehaviors, NSCoding> {
  @private
    signed int _scale:16;
    unsigned _roundingMode:3;
    unsigned _raiseOnExactness:1;
    unsigned _raiseOnOverflow:1;
    unsigned _raiseOnUnderflow:1;
    unsigned _raiseOnDivideByZero:1;
    unsigned _unused:9;
    void *_reserved2;
    void *_reserved;
}

+ (id)defaultDecimalNumberHandler;





- (id)initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero;

+ (id)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)exact raiseOnOverflow:(BOOL)overflow raiseOnUnderflow:(BOOL)underflow raiseOnDivideByZero:(BOOL)divideByZero;

@end



@interface NSNumber (NSDecimalNumberExtensions)

- (NSDecimal)decimalValue;


@end

@interface NSScanner (NSDecimalNumberScanning)

- (BOOL)scanDecimal:(NSDecimal *)dcm;

@end
# 22 "/var/include/Foundation/Foundation.h" 2


# 1 "/var/include/Foundation/NSError.h" 1
# 9 "/var/include/Foundation/NSError.h"
@class NSDictionary, NSArray;



extern NSString *const NSCocoaErrorDomain ;


extern NSString *const NSPOSIXErrorDomain ;
extern NSString *const NSOSStatusErrorDomain ;
extern NSString *const NSMachErrorDomain ;


extern NSString *const NSUnderlyingErrorKey ;


extern NSString *const NSLocalizedDescriptionKey ;
extern NSString *const NSLocalizedFailureReasonErrorKey ;
extern NSString *const NSLocalizedRecoverySuggestionErrorKey ;
extern NSString *const NSLocalizedRecoveryOptionsErrorKey ;
extern NSString *const NSRecoveryAttempterErrorKey ;


extern NSString *const NSStringEncodingErrorKey ;
extern NSString *const NSURLErrorKey ;
extern NSString *const NSFilePathErrorKey ;



@interface NSError : NSObject <NSCopying, NSCoding> {
    @private
    void *_reserved;
    NSInteger _code;
    NSString *_domain;
    NSDictionary *_userInfo;
}



- (id)initWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict;
+ (id)errorWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict;



- (NSString *)domain;
- (NSInteger)code;



- (NSDictionary *)userInfo;



- (NSString *)localizedDescription;





- (NSString *)localizedFailureReason;



- (NSString *)localizedRecoverySuggestion;



- (NSArray *)localizedRecoveryOptions;



- (id)recoveryAttempter;



@end



@interface NSObject(NSErrorRecoveryAttempting)







- (void)attemptRecoveryFromError:(NSError *)error optionIndex:(NSUInteger)recoveryOptionIndex delegate:(id)delegate didRecoverSelector:(SEL)didRecoverSelector contextInfo:(void *)contextInfo;



- (BOOL)attemptRecoveryFromError:(NSError *)error optionIndex:(NSUInteger)recoveryOptionIndex;

@end
# 25 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSException.h" 1
# 9 "/var/include/Foundation/NSException.h"
@class NSString, NSDictionary, NSArray;



extern NSString * const NSGenericException;
extern NSString * const NSRangeException;
extern NSString * const NSInvalidArgumentException;
extern NSString * const NSInternalInconsistencyException;

extern NSString * const NSMallocException;

extern NSString * const NSObjectInaccessibleException;
extern NSString * const NSObjectNotAvailableException;
extern NSString * const NSDestinationInvalidException;

extern NSString * const NSPortTimeoutException;
extern NSString * const NSInvalidSendPortException;
extern NSString * const NSInvalidReceivePortException;
extern NSString * const NSPortSendException;
extern NSString * const NSPortReceiveException;

extern NSString * const NSOldStyleException;




__attribute__((__objc_exception__))

@interface NSException : NSObject <NSCopying, NSCoding> {
    @private
    NSString *name;
    NSString *reason;
    NSDictionary *userInfo;
    id reserved;
}

+ (NSException *)exceptionWithName:(NSString *)name reason:(NSString *)reason userInfo:(NSDictionary *)userInfo;
- (id)initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

- (NSString *)name;
- (NSString *)reason;
- (NSDictionary *)userInfo;

- (NSArray *)callStackReturnAddresses ;

- (void)raise;

@end

@interface NSException (NSExceptionRaisingConveniences)

+ (void)raise:(NSString *)name format:(NSString *)format, ...;
+ (void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList;

@end
# 73 "/var/include/Foundation/NSException.h"
typedef void NSUncaughtExceptionHandler(NSException *exception);

extern NSUncaughtExceptionHandler *NSGetUncaughtExceptionHandler(void);
extern void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *);

@class NSAssertionHandler;
# 159 "/var/include/Foundation/NSException.h"
@interface NSAssertionHandler : NSObject {
    @private
    void *_reserved;
}

+ (NSAssertionHandler *)currentHandler;

- (void)handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format,...;

- (void)handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format,...;

@end
# 26 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSFileHandle.h" 1
# 9 "/var/include/Foundation/NSFileHandle.h"
@class NSString, NSData;

@interface NSFileHandle : NSObject

- (NSData *)availableData;

- (NSData *)readDataToEndOfFile;
- (NSData *)readDataOfLength:(NSUInteger)length;

- (void)writeData:(NSData *)data;

- (unsigned long long)offsetInFile;
- (unsigned long long)seekToEndOfFile;
- (void)seekToFileOffset:(unsigned long long)offset;

- (void)truncateFileAtOffset:(unsigned long long)offset;
- (void)synchronizeFile;
- (void)closeFile;

@end

@interface NSFileHandle (NSFileHandleCreation)

+ (id)fileHandleWithStandardInput;
+ (id)fileHandleWithStandardOutput;
+ (id)fileHandleWithStandardError;
+ (id)fileHandleWithNullDevice;

+ (id)fileHandleForReadingAtPath:(NSString *)path;
+ (id)fileHandleForWritingAtPath:(NSString *)path;
+ (id)fileHandleForUpdatingAtPath:(NSString *)path;

@end

extern NSString * const NSFileHandleOperationException;

extern NSString * const NSFileHandleReadCompletionNotification;
extern NSString * const NSFileHandleReadToEndOfFileCompletionNotification;
extern NSString * const NSFileHandleConnectionAcceptedNotification;
extern NSString * const NSFileHandleDataAvailableNotification;

extern NSString * const NSFileHandleNotificationDataItem;
extern NSString * const NSFileHandleNotificationFileHandleItem;
extern NSString * const NSFileHandleNotificationMonitorModes;

@interface NSFileHandle (NSFileHandleAsynchronousAccess)

- (void)readInBackgroundAndNotifyForModes:(NSArray *)modes;
- (void)readInBackgroundAndNotify;

- (void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray *)modes;
- (void)readToEndOfFileInBackgroundAndNotify;

- (void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray *)modes;
- (void)acceptConnectionInBackgroundAndNotify;

- (void)waitForDataInBackgroundAndNotifyForModes:(NSArray *)modes;
- (void)waitForDataInBackgroundAndNotify;

@end

@interface NSFileHandle (NSFileHandlePlatformSpecific)

- (id)initWithFileDescriptor:(int)fd closeOnDealloc:(BOOL)closeopt;
- (id)initWithFileDescriptor:(int)fd;
- (int)fileDescriptor;

@end

@interface NSPipe : NSObject

- (NSFileHandle *)fileHandleForReading;
- (NSFileHandle *)fileHandleForWriting;

- (id)init;
+ (id)pipe;

@end
# 27 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSFileManager.h" 1
# 10 "/var/include/Foundation/NSFileManager.h"
@class NSArray, NSData, NSDate, NSDirectoryEnumerator, NSError, NSNumber;





@interface NSFileManager : NSObject



+ (NSFileManager *)defaultManager;





- (void)setDelegate:(id)delegate;
- (id)delegate;





- (BOOL)setAttributes:(NSDictionary *)attributes ofItemAtPath:(NSString *)path error:(NSError **)error;





- (BOOL)createDirectoryAtPath:(NSString *)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error;





- (NSArray *)contentsOfDirectoryAtPath:(NSString *)path error:(NSError **)error;





- (NSArray *)subpathsOfDirectoryAtPath:(NSString *)path error:(NSError **)error;





- (NSDictionary *)attributesOfItemAtPath:(NSString *)path error:(NSError **)error;





- (NSDictionary *)attributesOfFileSystemForPath:(NSString *)path error:(NSError **)error;





- (BOOL)createSymbolicLinkAtPath:(NSString *)path withDestinationPath:(NSString *)destPath error:(NSError **)error;





- (NSString *)destinationOfSymbolicLinkAtPath:(NSString *)path error:(NSError **)error;



- (BOOL)copyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error;
- (BOOL)moveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error;
- (BOOL)linkItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error;
- (BOOL)removeItemAtPath:(NSString *)path error:(NSError **)error;





- (NSDictionary *)fileAttributesAtPath:(NSString *)path traverseLink:(BOOL)yorn;
- (BOOL)changeFileAttributes:(NSDictionary *)attributes atPath:(NSString *)path;
- (NSArray *)directoryContentsAtPath:(NSString *)path;
- (NSDictionary *)fileSystemAttributesAtPath:(NSString *)path;
- (NSString *)pathContentOfSymbolicLinkAtPath:(NSString *)path;
- (BOOL)createSymbolicLinkAtPath:(NSString *)path pathContent:(NSString *)otherpath;
- (BOOL)createDirectoryAtPath:(NSString *)path attributes:(NSDictionary *)attributes;
# 105 "/var/include/Foundation/NSFileManager.h"
- (NSString *)currentDirectoryPath;
- (BOOL)changeCurrentDirectoryPath:(NSString *)path;



- (BOOL)fileExistsAtPath:(NSString *)path;
- (BOOL)fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDirectory;
- (BOOL)isReadableFileAtPath:(NSString *)path;
- (BOOL)isWritableFileAtPath:(NSString *)path;
- (BOOL)isExecutableFileAtPath:(NSString *)path;
- (BOOL)isDeletableFileAtPath:(NSString *)path;



- (BOOL)contentsEqualAtPath:(NSString *)path1 andPath:(NSString *)path2;



- (NSString *)displayNameAtPath:(NSString *)path;




- (NSArray *)componentsToDisplayForPath:(NSString *)path;




- (NSDirectoryEnumerator *)enumeratorAtPath:(NSString *)path;



- (NSArray *)subpathsAtPath:(NSString *)path;



- (NSData *)contentsAtPath:(NSString *)path;
- (BOOL)createFileAtPath:(NSString *)path contents:(NSData *)data attributes:(NSDictionary *)attr;



- (const char *)fileSystemRepresentationWithPath:(NSString *)path;



- (NSString *)stringWithFileSystemRepresentation:(const char *)str length:(NSUInteger)len;

@end



@interface NSObject (NSCopyLinkMoveHandler)
- (BOOL)fileManager:(NSFileManager *)fm shouldProceedAfterError:(NSDictionary *)errorInfo;
- (void)fileManager:(NSFileManager *)fm willProcessPath:(NSString *)path;
@end



@interface NSObject (NSFileManagerFileOperationAdditions)





- (BOOL)fileManager:(NSFileManager *)fileManager shouldCopyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error copyingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldMoveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error movingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldLinkItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error linkingItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldRemoveItemAtPath:(NSString *)path;





- (BOOL)fileManager:(NSFileManager *)fileManager shouldProceedAfterError:(NSError *)error removingItemAtPath:(NSString *)path;

@end



@interface NSDirectoryEnumerator : NSEnumerator
- (NSDictionary *)fileAttributes;
- (NSDictionary *)directoryAttributes;
- (void)skipDescendents;
@end

       
       

extern NSString * const NSFileType;
extern NSString * const NSFileTypeDirectory;
extern NSString * const NSFileTypeRegular;
extern NSString * const NSFileTypeSymbolicLink;
extern NSString * const NSFileTypeSocket;
extern NSString * const NSFileTypeCharacterSpecial;
extern NSString * const NSFileTypeBlockSpecial;
extern NSString * const NSFileTypeUnknown;
extern NSString * const NSFileSize;
extern NSString * const NSFileModificationDate;
extern NSString * const NSFileReferenceCount;
extern NSString * const NSFileDeviceIdentifier;
extern NSString * const NSFileOwnerAccountName;
extern NSString * const NSFileGroupOwnerAccountName;
extern NSString * const NSFilePosixPermissions;
extern NSString * const NSFileSystemNumber;
extern NSString * const NSFileSystemFileNumber;
extern NSString * const NSFileExtensionHidden;
extern NSString * const NSFileHFSCreatorCode;
extern NSString * const NSFileHFSTypeCode;

extern NSString * const NSFileImmutable;
extern NSString * const NSFileAppendOnly;
extern NSString * const NSFileCreationDate;
extern NSString * const NSFileOwnerAccountID;
extern NSString * const NSFileGroupOwnerAccountID;


extern NSString * const NSFileBusy;


       
       

extern NSString * const NSFileSystemSize;
extern NSString * const NSFileSystemFreeSize;
extern NSString * const NSFileSystemNodes;
extern NSString * const NSFileSystemFreeNodes;

@interface NSDictionary (NSFileAttributes)

- (unsigned long long)fileSize;
- (NSDate *)fileModificationDate;
- (NSString *)fileType;
- (NSUInteger)filePosixPermissions;
- (NSString *)fileOwnerAccountName;
- (NSString *)fileGroupOwnerAccountName;
- (NSInteger)fileSystemNumber;
- (NSUInteger)fileSystemFileNumber;
- (BOOL)fileExtensionHidden;
- (OSType)fileHFSCreatorCode;
- (OSType)fileHFSTypeCode;

- (BOOL)fileIsImmutable;
- (BOOL)fileIsAppendOnly;
- (NSDate *)fileCreationDate;
- (NSNumber *)fileOwnerAccountID;
- (NSNumber *)fileGroupOwnerAccountID;

@end
# 28 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSIndexPath.h" 1
# 9 "/var/include/Foundation/NSIndexPath.h"
@interface NSIndexPath : NSObject <NSCopying, NSCoding> {
 @private
 NSUInteger *_indexes;
 NSUInteger _hash;
 NSUInteger _length;
        void *_reserved;
}

+ (id)indexPathWithIndex:(NSUInteger)index;
+ (id)indexPathWithIndexes:(NSUInteger *)indexes length:(NSUInteger)length;

- (id)initWithIndex:(NSUInteger)index;
- (id)initWithIndexes:(NSUInteger *)indexes length:(NSUInteger)length;

- (NSIndexPath *)indexPathByAddingIndex:(NSUInteger)index;
- (NSIndexPath *)indexPathByRemovingLastIndex;

- (NSUInteger)indexAtPosition:(NSUInteger)position;
- (NSUInteger)length;

- (void)getIndexes:(NSUInteger *)indexes;


- (NSComparisonResult)compare:(NSIndexPath *)otherObject;

@end
# 30 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSIndexSet.h" 1
# 31 "/var/include/Foundation/NSIndexSet.h"
@interface NSIndexSet : NSObject <NSCopying, NSMutableCopying, NSCoding> {
@protected
    struct {
        NSUInteger _isEmpty:1;
        NSUInteger _hasSingleRange:1;
        NSUInteger _cacheValid:1;
        NSUInteger _reservedArrayBinderController:29;
    } _indexSetFlags;
    union {
        struct {
            NSRange _range;
        } _singleRange;
        struct {
            void * _data;
            void *_reserved;
        } _multipleRanges;
    } _internal;
}

+ (id)indexSet;
+ (id)indexSetWithIndex:(NSUInteger)value;
+ (id)indexSetWithIndexesInRange:(NSRange)range;

- (id)init;
- (id)initWithIndex:(NSUInteger)value;
- (id)initWithIndexesInRange:(NSRange)range;
- (id)initWithIndexSet:(NSIndexSet *)indexSet;

- (BOOL)isEqualToIndexSet:(NSIndexSet *)indexSet;

- (NSUInteger)count;



- (NSUInteger)firstIndex;
- (NSUInteger)lastIndex;
- (NSUInteger)indexGreaterThanIndex:(NSUInteger)value;
- (NSUInteger)indexLessThanIndex:(NSUInteger)value;
- (NSUInteger)indexGreaterThanOrEqualToIndex:(NSUInteger)value;
- (NSUInteger)indexLessThanOrEqualToIndex:(NSUInteger)value;



- (NSUInteger)getIndexes:(NSUInteger *)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer)range;


- (NSUInteger)countOfIndexesInRange:(NSRange)range;


- (BOOL)containsIndex:(NSUInteger)value;
- (BOOL)containsIndexesInRange:(NSRange)range;
- (BOOL)containsIndexes:(NSIndexSet *)indexSet;

- (BOOL)intersectsIndexesInRange:(NSRange)range;

@end


@interface NSMutableIndexSet : NSIndexSet {
    void *_reserved;
}

- (void)addIndexes:(NSIndexSet *)indexSet;
- (void)removeIndexes:(NSIndexSet *)indexSet;
- (void)removeAllIndexes;
- (void)addIndex:(NSUInteger)value;
- (void)removeIndex:(NSUInteger)value;
- (void)addIndexesInRange:(NSRange)range;
- (void)removeIndexesInRange:(NSRange)range;



- (void)shiftIndexesStartingAtIndex:(NSUInteger)index by:(NSInteger)delta;

@end
# 31 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSInvocation.h" 1







@class NSMethodSignature;

@interface NSInvocation : NSObject {
@private
    void *_frame;
    void *_retdata;
    id _signature;
    id _container;
    uint8_t _retainedArgs;
    uint8_t _reserved[15];
}

+ (NSInvocation *)invocationWithMethodSignature:(NSMethodSignature *)sig;

- (NSMethodSignature *)methodSignature;

- (void)retainArguments;
- (BOOL)argumentsRetained;

- (id)target;
- (void)setTarget:(id)target;

- (SEL)selector;
- (void)setSelector:(SEL)selector;

- (void)getReturnValue:(void *)retLoc;
- (void)setReturnValue:(void *)retLoc;

- (void)getArgument:(void *)argumentLocation atIndex:(NSInteger)idx;
- (void)setArgument:(void *)argumentLocation atIndex:(NSInteger)idx;

- (void)invoke;
- (void)invokeWithTarget:(id)target;

@end
# 32 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSKeyValueCoding.h" 1
# 9 "/var/include/Foundation/NSKeyValueCoding.h"
# 1 "/var/include/Foundation/NSSet.h" 1







@class NSArray, NSDictionary, NSString;



@interface NSSet : NSObject <NSCopying, NSMutableCopying, NSCoding, NSFastEnumeration>

- (NSUInteger)count;
- (id)member:(id)object;
- (NSEnumerator *)objectEnumerator;

@end

@interface NSSet (NSExtendedSet)

- (NSArray *)allObjects;
- (id)anyObject;
- (BOOL)containsObject:(id)anObject;
- (NSString *)description;
- (NSString *)descriptionWithLocale:(id)locale;
- (BOOL)intersectsSet:(NSSet *)otherSet;
- (BOOL)isEqualToSet:(NSSet *)otherSet;
- (BOOL)isSubsetOfSet:(NSSet *)otherSet;

- (void)makeObjectsPerformSelector:(SEL)aSelector;
- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument;

- (NSSet *)setByAddingObject:(id)anObject ;
- (NSSet *)setByAddingObjectsFromSet:(NSSet *)other ;
- (NSSet *)setByAddingObjectsFromArray:(NSArray *)other ;

@end

@interface NSSet (NSSetCreation)

+ (id)set;
+ (id)setWithObject:(id)object;
+ (id)setWithObjects:(id *)objects count:(NSUInteger)cnt;
+ (id)setWithObjects:(id)firstObj, ... __attribute__((sentinel(0,1)));
+ (id)setWithSet:(NSSet *)set;
+ (id)setWithArray:(NSArray *)array;

- (id)initWithObjects:(id *)objects count:(NSUInteger)cnt;
- (id)initWithObjects:(id)firstObj, ... __attribute__((sentinel(0,1)));
- (id)initWithSet:(NSSet *)set;
- (id)initWithSet:(NSSet *)set copyItems:(BOOL)flag;
- (id)initWithArray:(NSArray *)array;

@end



@interface NSMutableSet : NSSet

- (void)addObject:(id)object;
- (void)removeObject:(id)object;

@end

@interface NSMutableSet (NSExtendedMutableSet)

- (void)addObjectsFromArray:(NSArray *)array;
- (void)intersectSet:(NSSet *)otherSet;
- (void)minusSet:(NSSet *)otherSet;
- (void)removeAllObjects;
- (void)unionSet:(NSSet *)otherSet;

- (void)setSet:(NSSet *)otherSet;

@end

@interface NSMutableSet (NSMutableSetCreation)

+ (id)setWithCapacity:(NSUInteger)numItems;
- (id)initWithCapacity:(NSUInteger)numItems;

@end



@interface NSCountedSet : NSMutableSet {
    @private
    id _table;
    void *_reserved;
}

- (id)initWithCapacity:(NSUInteger)numItems;

- (id)initWithArray:(NSArray *)array;
- (id)initWithSet:(NSSet *)set;

- (NSUInteger)countForObject:(id)object;

- (NSEnumerator *)objectEnumerator;
- (void)addObject:(id)object;
- (void)removeObject:(id)object;

@end
# 10 "/var/include/Foundation/NSKeyValueCoding.h" 2

@class NSError, NSString;







extern NSString *const NSUndefinedKeyException ;



extern NSString *const NSAverageKeyValueOperator ;
extern NSString *const NSCountKeyValueOperator ;
extern NSString *const NSDistinctUnionOfArraysKeyValueOperator ;
extern NSString *const NSDistinctUnionOfObjectsKeyValueOperator ;
extern NSString *const NSDistinctUnionOfSetsKeyValueOperator ;
extern NSString *const NSMaximumKeyValueOperator ;
extern NSString *const NSMinimumKeyValueOperator ;
extern NSString *const NSSumKeyValueOperator ;
extern NSString *const NSUnionOfArraysKeyValueOperator ;
extern NSString *const NSUnionOfObjectsKeyValueOperator ;
extern NSString *const NSUnionOfSetsKeyValueOperator ;

@interface NSObject(NSKeyValueCoding)



+ (BOOL)accessInstanceVariablesDirectly;
# 55 "/var/include/Foundation/NSKeyValueCoding.h"
- (id)valueForKey:(NSString *)key;
# 72 "/var/include/Foundation/NSKeyValueCoding.h"
- (void)setValue:(id)value forKey:(NSString *)key;





- (BOOL)validateValue:(id *)ioValue forKey:(NSString *)inKey error:(NSError **)outError;
# 90 "/var/include/Foundation/NSKeyValueCoding.h"
- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;
# 106 "/var/include/Foundation/NSKeyValueCoding.h"
- (NSMutableSet *)mutableSetValueForKey:(NSString *)key;





- (id)valueForKeyPath:(NSString *)keyPath;

- (void)setValue:(id)value forKeyPath:(NSString *)keyPath;
- (BOOL)validateValue:(id *)ioValue forKeyPath:(NSString *)inKeyPath error:(NSError **)outError;
- (NSMutableArray *)mutableArrayValueForKeyPath:(NSString *)keyPath;


- (NSMutableSet *)mutableSetValueForKeyPath:(NSString *)keyPath;






- (id)valueForUndefinedKey:(NSString *)key;



- (void)setValue:(id)value forUndefinedKey:(NSString *)key;



- (void)setNilValueForKey:(NSString *)key;



- (NSDictionary *)dictionaryWithValuesForKeys:(NSArray *)keys;



- (void)setValuesForKeysWithDictionary:(NSDictionary *)keyedValues;



@end



@interface NSArray(NSKeyValueCoding)



- (id)valueForKey:(NSString *)key;



- (void)setValue:(id)value forKey:(NSString *)key;

@end



@interface NSDictionary(NSKeyValueCoding)



- (id)valueForKey:(NSString *)key;

@end



@interface NSMutableDictionary(NSKeyValueCoding)



- (void)setValue:(id)value forKey:(NSString *)key;

@end





@interface NSSet(NSKeyValueCoding)



- (id)valueForKey:(NSString *)key;



- (void)setValue:(id)value forKey:(NSString *)key;

@end
# 33 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSKeyValueObserving.h" 1
# 12 "/var/include/Foundation/NSKeyValueObserving.h"
@class NSIndexSet, NSString;



enum {



    NSKeyValueObservingOptionNew = 0x01,
    NSKeyValueObservingOptionOld = 0x02,





    NSKeyValueObservingOptionInitial = 0x04,



    NSKeyValueObservingOptionPrior = 0x08



};
typedef NSUInteger NSKeyValueObservingOptions;



enum {
    NSKeyValueChangeSetting = 1,
    NSKeyValueChangeInsertion = 2,
    NSKeyValueChangeRemoval = 3,
    NSKeyValueChangeReplacement = 4
};
typedef NSUInteger NSKeyValueChange;





enum {
    NSKeyValueUnionSetMutation = 1,
    NSKeyValueMinusSetMutation = 2,
    NSKeyValueIntersectSetMutation = 3,
    NSKeyValueSetSetMutation = 4
};
typedef NSUInteger NSKeyValueSetMutationKind;





extern NSString *const NSKeyValueChangeKindKey ;
extern NSString *const NSKeyValueChangeNewKey ;
extern NSString *const NSKeyValueChangeOldKey ;
extern NSString *const NSKeyValueChangeIndexesKey ;
extern NSString *const NSKeyValueChangeNotificationIsPriorKey ;

@interface NSObject(NSKeyValueObserving)
# 87 "/var/include/Foundation/NSKeyValueObserving.h"
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;

@end

@interface NSObject(NSKeyValueObserverRegistration)



- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;

@end

@interface NSArray(NSKeyValueObserverRegistration)



- (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
- (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;



- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;

@end



@interface NSSet(NSKeyValueObserverRegistration)



- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;

@end



@interface NSObject(NSKeyValueObserverNotification)







- (void)willChangeValueForKey:(NSString *)key;
- (void)didChangeValueForKey:(NSString *)key;







- (void)willChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet *)indexes forKey:(NSString *)key;
- (void)didChange:(NSKeyValueChange)changeKind valuesAtIndexes:(NSIndexSet *)indexes forKey:(NSString *)key;
# 161 "/var/include/Foundation/NSKeyValueObserving.h"
- (void)willChangeValueForKey:(NSString *)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet *)objects;
- (void)didChangeValueForKey:(NSString *)key withSetMutation:(NSKeyValueSetMutationKind)mutationKind usingObjects:(NSSet *)objects;



@end

@interface NSObject(NSKeyValueObservingCustomization)
# 180 "/var/include/Foundation/NSKeyValueObserving.h"
+ (NSSet *)keyPathsForValuesAffectingValueForKey:(NSString *)key;





+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key;



- (void)setObservationInfo:(void *)observationInfo;
- (void *)observationInfo;

@end
# 34 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSKeyedArchiver.h" 1





# 1 "/var/include/Foundation/NSPropertyList.h" 1
# 10 "/var/include/Foundation/NSPropertyList.h"
@class NSData, NSString;

enum {
    NSPropertyListImmutable = kCFPropertyListImmutable,
    NSPropertyListMutableContainers = kCFPropertyListMutableContainers,
    NSPropertyListMutableContainersAndLeaves = kCFPropertyListMutableContainersAndLeaves
};
typedef NSUInteger NSPropertyListMutabilityOptions;

enum {
    NSPropertyListOpenStepFormat = kCFPropertyListOpenStepFormat,
    NSPropertyListXMLFormat_v1_0 = kCFPropertyListXMLFormat_v1_0,
    NSPropertyListBinaryFormat_v1_0 = kCFPropertyListBinaryFormat_v1_0
};
typedef NSUInteger NSPropertyListFormat;

@interface NSPropertyListSerialization : NSObject {
    void *reserved[6];
}

+ (BOOL)propertyList:(id)plist isValidForFormat:(NSPropertyListFormat)format;
+ (NSData *)dataFromPropertyList:(id)plist format:(NSPropertyListFormat)format errorDescription:(NSString **)errorString;
+ (id)propertyListFromData:(NSData *)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat *)format errorDescription:(NSString **)errorString;

@end
# 7 "/var/include/Foundation/NSKeyedArchiver.h" 2






@class NSArray, NSMutableData, NSData;

extern NSString * const NSInvalidArchiveOperationException;
extern NSString * const NSInvalidUnarchiveOperationException;

@interface NSKeyedArchiver : NSCoder {
@private
    void *_stream;
    NSUInteger _flags;
    id _delegate;
    id _containers;
    id _objects;
    id _objRefMap;
    id _replacementMap;
    id _classNameMap;
    id _conditionals;
    id _classes;
    NSUInteger _genericKey;
    void *_cache;
    NSUInteger _cacheSize;
    void *_reserved3;
    void *_reserved2;
    void *_reserved1;
    void * _reserved0;
}

+ (NSData *)archivedDataWithRootObject:(id)rootObject;
+ (BOOL)archiveRootObject:(id)rootObject toFile:(NSString *)path;

- (id)initForWritingWithMutableData:(NSMutableData *)data;

- (void)setDelegate:(id)delegate;
- (id)delegate;

- (void)setOutputFormat:(NSPropertyListFormat)format;
- (NSPropertyListFormat)outputFormat;

- (void)finishEncoding;

+ (void)setClassName:(NSString *)codedName forClass:(Class)cls;
- (void)setClassName:(NSString *)codedName forClass:(Class)cls;



+ (NSString *)classNameForClass:(Class)cls;
- (NSString *)classNameForClass:(Class)cls;

- (void)encodeObject:(id)objv forKey:(NSString *)key;
- (void)encodeConditionalObject:(id)objv forKey:(NSString *)key;
- (void)encodeBool:(BOOL)boolv forKey:(NSString *)key;
- (void)encodeInt:(int)intv forKey:(NSString *)key;
- (void)encodeInt32:(int32_t)intv forKey:(NSString *)key;
- (void)encodeInt64:(int64_t)intv forKey:(NSString *)key;
- (void)encodeFloat:(float)realv forKey:(NSString *)key;
- (void)encodeDouble:(double)realv forKey:(NSString *)key;
- (void)encodeBytes:(const uint8_t *)bytesp length:(NSUInteger)lenv forKey:(NSString *)key;

@end

@interface NSKeyedUnarchiver : NSCoder {
@private
    id _delegate;
    uint32_t _flags;
    id _objRefMap;
    id _replacementMap;
    id _nameClassMap;
    id _tmpRefObjMap;
    id _refObjMap;
    int32_t _genericKey;
    id _data;
    void *_offsetData;
    id _containers;
    id _objects;
    const uint8_t *_bytes;
    uint64_t _len;
    id _white;
    void * _reserved0;
}

+ (id)unarchiveObjectWithData:(NSData *)data;
+ (id)unarchiveObjectWithFile:(NSString *)path;

- (id)initForReadingWithData:(NSData *)data;

- (void)setDelegate:(id)delegate;
- (id)delegate;

- (void)finishDecoding;

+ (void)setClass:(Class)cls forClassName:(NSString *)codedName;
- (void)setClass:(Class)cls forClassName:(NSString *)codedName;



+ (Class)classForClassName:(NSString *)codedName;
- (Class)classForClassName:(NSString *)codedName;

- (BOOL)containsValueForKey:(NSString *)key;

- (id)decodeObjectForKey:(NSString *)key;
- (BOOL)decodeBoolForKey:(NSString *)key;
- (int)decodeIntForKey:(NSString *)key;
- (int32_t)decodeInt32ForKey:(NSString *)key;
- (int64_t)decodeInt64ForKey:(NSString *)key;
- (float)decodeFloatForKey:(NSString *)key;
- (double)decodeDoubleForKey:(NSString *)key;
- (const uint8_t *)decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp;

@end

@interface NSObject (NSKeyedArchiverDelegate)


- (id)archiver:(NSKeyedArchiver *)archiver willEncodeObject:(id)object;
# 137 "/var/include/Foundation/NSKeyedArchiver.h"
- (void)archiver:(NSKeyedArchiver *)archiver didEncodeObject:(id)object;






- (void)archiver:(NSKeyedArchiver *)archiver willReplaceObject:(id)object withObject:(id)newObject;





- (void)archiverWillFinish:(NSKeyedArchiver *)archiver;


- (void)archiverDidFinish:(NSKeyedArchiver *)archiver;


@end

@interface NSObject (NSKeyedUnarchiverDelegate)


- (Class)unarchiver:(NSKeyedUnarchiver *)unarchiver cannotDecodeObjectOfClassName:(NSString *)name originalClasses:(NSArray *)classNames;
# 170 "/var/include/Foundation/NSKeyedArchiver.h"
- (id)unarchiver:(NSKeyedUnarchiver *)unarchiver didDecodeObject:(id)object;







- (void)unarchiver:(NSKeyedUnarchiver *)unarchiver willReplaceObject:(id)object withObject:(id)newObject;





- (void)unarchiverWillFinish:(NSKeyedUnarchiver *)unarchiver;


- (void)unarchiverDidFinish:(NSKeyedUnarchiver *)unarchiver;


@end

@interface NSObject (NSKeyedArchiverObjectSubstitution)

- (Class)classForKeyedArchiver;
# 203 "/var/include/Foundation/NSKeyedArchiver.h"
- (id)replacementObjectForKeyedArchiver:(NSKeyedArchiver *)archiver;
# 216 "/var/include/Foundation/NSKeyedArchiver.h"
+ (NSArray *)classFallbacksForKeyedArchiver;



@end

@interface NSObject (NSKeyedUnarchiverObjectSubstitution)

+ (Class)classForKeyedUnarchiver;





@end
# 35 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSLocale.h" 1
# 9 "/var/include/Foundation/NSLocale.h"
@class NSArray, NSDictionary, NSString;



@interface NSLocale : NSObject <NSCopying, NSCoding>

- (id)objectForKey:(id)key;

- (NSString *)displayNameForKey:(id)key value:(id)value;

@end

@interface NSLocale (NSExtendedLocale)

- (NSString *)localeIdentifier;

@end

@interface NSLocale (NSLocaleCreation)

+ (id)systemLocale;
+ (id)currentLocale;
+ (id)autoupdatingCurrentLocale ;

- (id)initWithLocaleIdentifier:(NSString *)string;

@end

@interface NSLocale (NSLocaleGeneralInfo)

+ (NSArray *)availableLocaleIdentifiers;
+ (NSArray *)ISOLanguageCodes;
+ (NSArray *)ISOCountryCodes;
+ (NSArray *)ISOCurrencyCodes;
+ (NSArray *)commonISOCurrencyCodes ;
+ (NSArray *)preferredLanguages ;

+ (NSDictionary *)componentsFromLocaleIdentifier:(NSString *)string;
+ (NSString *)localeIdentifierFromComponents:(NSDictionary *)dict;

+ (NSString *)canonicalLocaleIdentifierFromString:(NSString *)string;

@end


extern NSString * const NSCurrentLocaleDidChangeNotification ;


extern NSString * const NSLocaleIdentifier ;
extern NSString * const NSLocaleLanguageCode ;
extern NSString * const NSLocaleCountryCode ;
extern NSString * const NSLocaleScriptCode ;
extern NSString * const NSLocaleVariantCode ;
extern NSString * const NSLocaleExemplarCharacterSet ;
extern NSString * const NSLocaleCalendar ;
extern NSString * const NSLocaleCollationIdentifier ;
extern NSString * const NSLocaleUsesMetricSystem ;
extern NSString * const NSLocaleMeasurementSystem ;
extern NSString * const NSLocaleDecimalSeparator ;
extern NSString * const NSLocaleGroupingSeparator ;
extern NSString * const NSLocaleCurrencySymbol ;
extern NSString * const NSLocaleCurrencyCode ;


extern NSString * const NSGregorianCalendar ;
extern NSString * const NSBuddhistCalendar ;
extern NSString * const NSChineseCalendar ;
extern NSString * const NSHebrewCalendar ;
extern NSString * const NSIslamicCalendar ;
extern NSString * const NSIslamicCivilCalendar ;
extern NSString * const NSJapaneseCalendar ;
# 36 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSLock.h" 1






@class NSDate;

@protocol NSLocking

- (void)lock;
- (void)unlock;

@end

@interface NSLock : NSObject <NSLocking> {
@private
    void *_priv;
}

- (BOOL)tryLock;
- (BOOL)lockBeforeDate:(NSDate *)limit;

- (void)setName:(NSString *)n ;
- (NSString *)name ;

@end

@interface NSConditionLock : NSObject <NSLocking> {
@private
    void *_priv;
}

- (id)initWithCondition:(NSInteger)condition;

- (NSInteger)condition;
- (void)lockWhenCondition:(NSInteger)condition;
- (BOOL)tryLock;
- (BOOL)tryLockWhenCondition:(NSInteger)condition;
- (void)unlockWithCondition:(NSInteger)condition;
- (BOOL)lockBeforeDate:(NSDate *)limit;
- (BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit;

- (void)setName:(NSString *)n ;
- (NSString *)name ;

@end

@interface NSRecursiveLock : NSObject <NSLocking> {
@private
    void *_priv;
}

- (BOOL)tryLock;
- (BOOL)lockBeforeDate:(NSDate *)limit;

- (void)setName:(NSString *)n ;
- (NSString *)name ;

@end

@interface NSCondition : NSObject <NSLocking> {
@private
    void *_priv;
}

- (void)wait;
- (BOOL)waitUntilDate:(NSDate *)limit;
- (void)signal;
- (void)broadcast;

- (void)setName:(NSString *)n ;
- (NSString *)name ;

@end
# 37 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSMethodSignature.h" 1






@interface NSMethodSignature : NSObject {
@private
    void *_private;
    void *_reserved[6];
}

+ (NSMethodSignature *)signatureWithObjCTypes:(const char *)types;

- (NSUInteger)numberOfArguments;
- (const char *)getArgumentTypeAtIndex:(NSUInteger)idx;

- (NSUInteger)frameLength;

- (BOOL)isOneway;

- (const char *)methodReturnType;
- (NSUInteger)methodReturnLength;

@end
# 38 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSNotification.h" 1






@class NSString, NSDictionary;



@interface NSNotification : NSObject <NSCopying, NSCoding>

- (NSString *)name;
- (id)object;
- (NSDictionary *)userInfo;

@end

@interface NSNotification (NSNotificationCreation)

+ (id)notificationWithName:(NSString *)aName object:(id)anObject;
+ (id)notificationWithName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo;

@end



@interface NSNotificationCenter : NSObject {
    @protected
    void * _impl;
    void *_callback_block[4];
    void *_pad[8];
}

+ (id)defaultCenter;

- (void)addObserver:(id)observer selector:(SEL)aSelector name:(NSString *)aName object:(id)anObject;

- (void)postNotification:(NSNotification *)notification;
- (void)postNotificationName:(NSString *)aName object:(id)anObject;
- (void)postNotificationName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)aUserInfo;

- (void)removeObserver:(id)observer;
- (void)removeObserver:(id)observer name:(NSString *)aName object:(id)anObject;

@end
# 39 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSNotificationQueue.h" 1






@class NSNotification, NSNotificationCenter, NSArray;

enum {
    NSPostWhenIdle = 1,
    NSPostASAP = 2,
    NSPostNow = 3
};
typedef NSUInteger NSPostingStyle;

enum {
    NSNotificationNoCoalescing = 0,
    NSNotificationCoalescingOnName = 1,
    NSNotificationCoalescingOnSender = 2
};
typedef NSUInteger NSNotificationCoalescing;

@interface NSNotificationQueue : NSObject {
@private
    id _notificationCenter;
    id _asapQueue;
    id _asapObs;
    id _idleQueue;
    id _idleObs;
}

+ (id)defaultQueue;

- (id)initWithNotificationCenter:(NSNotificationCenter *)notificationCenter;

- (void)enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle;
- (void)enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSUInteger)coalesceMask forModes:(NSArray *)modes;

- (void)dequeueNotificationsMatching:(NSNotification *)notification coalesceMask:(NSUInteger)coalesceMask;

@end
# 40 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSNull.h" 1






@interface NSNull : NSObject <NSCopying, NSCoding>

+ (NSNull *)null;

@end
# 41 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSNumberFormatter.h" 1







@class NSLocale, NSError, NSMutableDictionary;

@interface NSNumberFormatter : NSFormatter {
@private
    NSMutableDictionary *_attributes;
    CFNumberFormatterRef _formatter;
    NSUInteger _counter;
    void *_reserved[12];
}

- (id)init;





- (BOOL)getObjectValue:(out id *)obj forString:(NSString *)string range:(inout NSRange *)rangep error:(out NSError **)error;




- (NSString *)stringFromNumber:(NSNumber *)number;
- (NSNumber *)numberFromString:(NSString *)string;







enum {
    NSNumberFormatterNoStyle = kCFNumberFormatterNoStyle,
    NSNumberFormatterDecimalStyle = kCFNumberFormatterDecimalStyle,
    NSNumberFormatterCurrencyStyle = kCFNumberFormatterCurrencyStyle,
    NSNumberFormatterPercentStyle = kCFNumberFormatterPercentStyle,
    NSNumberFormatterScientificStyle = kCFNumberFormatterScientificStyle,
    NSNumberFormatterSpellOutStyle = kCFNumberFormatterSpellOutStyle
};
typedef NSUInteger NSNumberFormatterStyle;

- (NSNumberFormatterStyle)numberStyle;
- (void)setNumberStyle:(NSNumberFormatterStyle)style;

- (NSLocale *)locale;
- (void)setLocale:(NSLocale *)locale;

- (BOOL)generatesDecimalNumbers;
- (void)setGeneratesDecimalNumbers:(BOOL)b;

enum {
    NSNumberFormatterBehaviorDefault = 0,



    NSNumberFormatterBehavior10_4 = 1040,
};
typedef NSUInteger NSNumberFormatterBehavior;

- (NSNumberFormatterBehavior)formatterBehavior;
- (void)setFormatterBehavior:(NSNumberFormatterBehavior)behavior;

+ (NSNumberFormatterBehavior)defaultFormatterBehavior;
+ (void)setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior;



- (NSString *)negativeFormat;
- (void)setNegativeFormat:(NSString *)format;

- (NSDictionary *)textAttributesForNegativeValues;
- (void)setTextAttributesForNegativeValues:(NSDictionary *)newAttributes;

- (NSString *)positiveFormat;
- (void)setPositiveFormat:(NSString *)format;

- (NSDictionary *)textAttributesForPositiveValues;
- (void)setTextAttributesForPositiveValues:(NSDictionary *)newAttributes;

- (BOOL)allowsFloats;
- (void)setAllowsFloats:(BOOL)flag;

- (NSString *)decimalSeparator;
- (void)setDecimalSeparator:(NSString *)string;



- (BOOL)alwaysShowsDecimalSeparator;
- (void)setAlwaysShowsDecimalSeparator:(BOOL)b;

- (NSString *)currencyDecimalSeparator;
- (void)setCurrencyDecimalSeparator:(NSString *)string;

- (BOOL)usesGroupingSeparator;
- (void)setUsesGroupingSeparator:(BOOL)b;

- (NSString *)groupingSeparator;
- (void)setGroupingSeparator:(NSString *)string;


- (NSString *)zeroSymbol;
- (void)setZeroSymbol:(NSString *)string;

- (NSDictionary *)textAttributesForZero;
- (void)setTextAttributesForZero:(NSDictionary *)newAttributes;

- (NSString *)nilSymbol;
- (void)setNilSymbol:(NSString *)string;

- (NSDictionary *)textAttributesForNil;
- (void)setTextAttributesForNil:(NSDictionary *)newAttributes;

- (NSString *)notANumberSymbol;
- (void)setNotANumberSymbol:(NSString *)string;

- (NSDictionary *)textAttributesForNotANumber;
- (void)setTextAttributesForNotANumber:(NSDictionary *)newAttributes;

- (NSString *)positiveInfinitySymbol;
- (void)setPositiveInfinitySymbol:(NSString *)string;

- (NSDictionary *)textAttributesForPositiveInfinity;
- (void)setTextAttributesForPositiveInfinity:(NSDictionary *)newAttributes;

- (NSString *)negativeInfinitySymbol;
- (void)setNegativeInfinitySymbol:(NSString *)string;

- (NSDictionary *)textAttributesForNegativeInfinity;
- (void)setTextAttributesForNegativeInfinity:(NSDictionary *)newAttributes;


- (NSString *)positivePrefix;
- (void)setPositivePrefix:(NSString *)string;

- (NSString *)positiveSuffix;
- (void)setPositiveSuffix:(NSString *)string;

- (NSString *)negativePrefix;
- (void)setNegativePrefix:(NSString *)string;

- (NSString *)negativeSuffix;
- (void)setNegativeSuffix:(NSString *)string;

- (NSString *)currencyCode;
- (void)setCurrencyCode:(NSString *)string;

- (NSString *)currencySymbol;
- (void)setCurrencySymbol:(NSString *)string;

- (NSString *)internationalCurrencySymbol;
- (void)setInternationalCurrencySymbol:(NSString *)string;

- (NSString *)percentSymbol;
- (void)setPercentSymbol:(NSString *)string;

- (NSString *)perMillSymbol;
- (void)setPerMillSymbol:(NSString *)string;

- (NSString *)minusSign;
- (void)setMinusSign:(NSString *)string;

- (NSString *)plusSign;
- (void)setPlusSign:(NSString *)string;

- (NSString *)exponentSymbol;
- (void)setExponentSymbol:(NSString *)string;


- (NSUInteger)groupingSize;
- (void)setGroupingSize:(NSUInteger)number;

- (NSUInteger)secondaryGroupingSize;
- (void)setSecondaryGroupingSize:(NSUInteger)number;

- (NSNumber *)multiplier;
- (void)setMultiplier:(NSNumber *)number;

- (NSUInteger)formatWidth;
- (void)setFormatWidth:(NSUInteger)number;

- (NSString *)paddingCharacter;
- (void)setPaddingCharacter:(NSString *)string;

enum {
    NSNumberFormatterPadBeforePrefix = kCFNumberFormatterPadBeforePrefix,
    NSNumberFormatterPadAfterPrefix = kCFNumberFormatterPadAfterPrefix,
    NSNumberFormatterPadBeforeSuffix = kCFNumberFormatterPadBeforeSuffix,
    NSNumberFormatterPadAfterSuffix = kCFNumberFormatterPadAfterSuffix
};
typedef NSUInteger NSNumberFormatterPadPosition;

- (NSNumberFormatterPadPosition)paddingPosition;
- (void)setPaddingPosition:(NSNumberFormatterPadPosition)position;

enum {
    NSNumberFormatterRoundCeiling = kCFNumberFormatterRoundCeiling,
    NSNumberFormatterRoundFloor = kCFNumberFormatterRoundFloor,
    NSNumberFormatterRoundDown = kCFNumberFormatterRoundDown,
    NSNumberFormatterRoundUp = kCFNumberFormatterRoundUp,
    NSNumberFormatterRoundHalfEven = kCFNumberFormatterRoundHalfEven,
    NSNumberFormatterRoundHalfDown = kCFNumberFormatterRoundHalfDown,
    NSNumberFormatterRoundHalfUp = kCFNumberFormatterRoundHalfUp
};
typedef NSUInteger NSNumberFormatterRoundingMode;

- (NSNumberFormatterRoundingMode)roundingMode;
- (void)setRoundingMode:(NSNumberFormatterRoundingMode)mode;

- (NSNumber *)roundingIncrement;
- (void)setRoundingIncrement:(NSNumber *)number;

- (NSUInteger)minimumIntegerDigits;
- (void)setMinimumIntegerDigits:(NSUInteger)number;

- (NSUInteger)maximumIntegerDigits;
- (void)setMaximumIntegerDigits:(NSUInteger)number;

- (NSUInteger)minimumFractionDigits;
- (void)setMinimumFractionDigits:(NSUInteger)number;

- (NSUInteger)maximumFractionDigits;
- (void)setMaximumFractionDigits:(NSUInteger)number;


- (NSNumber *)minimum;
- (void)setMinimum:(NSNumber *)number;

- (NSNumber *)maximum;
- (void)setMaximum:(NSNumber *)number;



- (NSString *)currencyGroupingSeparator ;
- (void)setCurrencyGroupingSeparator:(NSString *)string ;

- (BOOL)isLenient ;
- (void)setLenient:(BOOL)b ;

- (BOOL)usesSignificantDigits ;
- (void)setUsesSignificantDigits:(BOOL)b ;

- (NSUInteger)minimumSignificantDigits ;
- (void)setMinimumSignificantDigits:(NSUInteger)number ;

- (NSUInteger)maximumSignificantDigits ;
- (void)setMaximumSignificantDigits:(NSUInteger)number ;

- (BOOL)isPartialStringValidationEnabled ;
- (void)setPartialStringValidationEnabled:(BOOL)b ;

@end

@class NSDecimalNumberHandler;
# 42 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSOperation.h" 1
# 9 "/var/include/Foundation/NSOperation.h"
@class NSArray, NSSet;

@interface NSOperation : NSObject {
@private
    id _private;
    void *_reserved;
}

- (id)init;

- (void)start;
- (void)main;

- (BOOL)isCancelled;
- (void)cancel;

- (BOOL)isExecuting;
- (BOOL)isFinished;

- (BOOL)isConcurrent;

- (BOOL)isReady;

- (void)addDependency:(NSOperation *)op;
- (void)removeDependency:(NSOperation *)op;

- (NSArray *)dependencies;

enum {
 NSOperationQueuePriorityVeryLow = -8,
 NSOperationQueuePriorityLow = -4,
 NSOperationQueuePriorityNormal = 0,
 NSOperationQueuePriorityHigh = 4,
 NSOperationQueuePriorityVeryHigh = 8
};
typedef NSInteger NSOperationQueuePriority;

- (NSOperationQueuePriority)queuePriority;
- (void)setQueuePriority:(NSOperationQueuePriority)p;

@end

@interface NSInvocationOperation : NSOperation {
@private
    id _inv;
    id _exception;
    void *_reserved2;
}

- (id)initWithTarget:(id)target selector:(SEL)sel object:(id)arg;
- (id)initWithInvocation:(NSInvocation *)inv;

- (NSInvocation *)invocation;

- (id)result;

@end

extern NSString * const NSInvocationOperationVoidResultException;
extern NSString * const NSInvocationOperationCancelledException;


@interface NSOperationQueue : NSObject {
@private
    id _private;
    void *_reserved;
}

- (void)addOperation:(NSOperation *)op;

- (NSArray *)operations;

- (NSInteger)maxConcurrentOperationCount;
- (void)setMaxConcurrentOperationCount:(NSInteger)cnt;

enum {
    NSOperationQueueDefaultMaxConcurrentOperationCount = -1
};

- (void)setSuspended:(BOOL)b;
- (BOOL)isSuspended;

- (void)cancelAllOperations;

- (void)waitUntilAllOperationsAreFinished;

@end
# 44 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSPathUtilities.h" 1







@interface NSString (NSStringPathExtensions)

+ (NSString *)pathWithComponents:(NSArray *)components;
- (NSArray *)pathComponents;

- (BOOL)isAbsolutePath;

- (NSString *)lastPathComponent;
- (NSString *)stringByDeletingLastPathComponent;
- (NSString *)stringByAppendingPathComponent:(NSString *)str;

- (NSString *)pathExtension;
- (NSString *)stringByDeletingPathExtension;
- (NSString *)stringByAppendingPathExtension:(NSString *)str;

- (NSString *)stringByAbbreviatingWithTildeInPath;
- (NSString *)stringByExpandingTildeInPath;

- (NSString *)stringByStandardizingPath;

- (NSString *)stringByResolvingSymlinksInPath;

- (NSArray *)stringsByAppendingPaths:(NSArray *)paths;

- (NSUInteger)completePathIntoString:(NSString **)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray **)outputArray filterTypes:(NSArray *)filterTypes;

- (const char *)fileSystemRepresentation;
- (BOOL)getFileSystemRepresentation:(char *)cname maxLength:(NSUInteger)max;

@end

@interface NSArray (NSArrayPathExtensions)

- (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;

@end

extern NSString *NSUserName(void);
extern NSString *NSFullUserName(void);

extern NSString *NSHomeDirectory(void);
extern NSString *NSHomeDirectoryForUser(NSString *userName);

extern NSString *NSTemporaryDirectory(void);

extern NSString *NSOpenStepRootDirectory(void);

enum {
    NSApplicationDirectory = 1,
    NSDemoApplicationDirectory,
    NSDeveloperApplicationDirectory,
    NSAdminApplicationDirectory,
    NSLibraryDirectory,
    NSDeveloperDirectory,
    NSUserDirectory,
    NSDocumentationDirectory,

    NSDocumentDirectory,


    NSCoreServiceDirectory,


    NSDesktopDirectory = 12,
    NSCachesDirectory = 13,
    NSApplicationSupportDirectory = 14,


    NSDownloadsDirectory = 15,

    NSAllApplicationsDirectory = 100,
    NSAllLibrariesDirectory = 101
};
typedef NSUInteger NSSearchPathDirectory;

enum {
    NSUserDomainMask = 1,
    NSLocalDomainMask = 2,
    NSNetworkDomainMask = 4,
    NSSystemDomainMask = 8,
    NSAllDomainsMask = 0x0ffff
};
typedef NSUInteger NSSearchPathDomainMask;

extern NSArray *NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde);
# 45 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSPort.h" 1






typedef int NSSocketNativeHandle;

@class NSRunLoop, NSMutableArray, NSDate;
@class NSConnection, NSPortMessage;
@class NSData;

extern NSString * const NSPortDidBecomeInvalidNotification;

@interface NSPort : NSObject <NSCopying, NSCoding>






+ (id)allocWithZone:(NSZone *)zone;

+ (NSPort *)port;

- (void)invalidate;
- (BOOL)isValid;

- (void)setDelegate:(id)anId;
- (id)delegate;





- (void)scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;


- (NSUInteger)reservedSpaceLength;
- (BOOL)sendBeforeDate:(NSDate *)limitDate components:(NSMutableArray *)components from:(NSPort *) receivePort reserved:(NSUInteger)headerSpaceReserved;
- (BOOL)sendBeforeDate:(NSDate *)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray *)components from:(NSPort *)receivePort reserved:(NSUInteger)headerSpaceReserved;
# 63 "/var/include/Foundation/NSPort.h"
@end

@interface NSObject (NSPortDelegateMethods)

- (void)handlePortMessage:(NSPortMessage *)message;



@end



@interface NSMachPort : NSPort {
    @private
    id _delegate;
    NSUInteger _flags;
    uint32_t _machPort;
    NSUInteger _reserved;
}

+ (NSPort *)portWithMachPort:(uint32_t)machPort;
- (id)initWithMachPort:(uint32_t)machPort;


enum {
    NSMachPortDeallocateNone = 0,
    NSMachPortDeallocateSendRight = (1 << 0),
    NSMachPortDeallocateReceiveRight = (1 << 1)
};

+ (NSPort *)portWithMachPort:(uint32_t)machPort options:(NSUInteger)f ;
- (id)initWithMachPort:(uint32_t)machPort options:(NSUInteger)f ;


- (uint32_t)machPort;

- (void)scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;




@end

@interface NSObject (NSMachPortDelegateMethods)



- (void)handleMachMessage:(void *)msg;

@end





@interface NSMessagePort : NSPort {
    @private
    void * _port;
    id _delegate;
}

@end
# 46 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSProcessInfo.h" 1






enum {
 NSWindowsNTOperatingSystem = 1,
 NSWindows95OperatingSystem,
 NSSolarisOperatingSystem,
 NSHPUXOperatingSystem,
 NSMACHOperatingSystem,
 NSSunOSOperatingSystem,
 NSOSF1OperatingSystem
};

@class NSArray, NSString, NSDictionary;

@interface NSProcessInfo : NSObject {
    @private
    NSDictionary *environment;
    NSArray *arguments;
    NSString *hostName;
    NSString *name;
    void *reserved;
}

+ (NSProcessInfo *)processInfo;

- (NSDictionary *)environment;

- (NSArray *)arguments;

- (NSString *)hostName;

- (NSString *)processName;

- (int)processIdentifier;

- (void)setProcessName:(NSString *)newName;

- (NSString *)globallyUniqueString;

- (NSUInteger)operatingSystem;
- (NSString *)operatingSystemName;


- (NSString *)operatingSystemVersionString;



- (NSUInteger)processorCount;
- (NSUInteger)activeProcessorCount;
- (unsigned long long)physicalMemory;


@end
# 47 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSProxy.h" 1






@class NSMethodSignature, NSInvocation;

@interface NSProxy <NSObject> {
    Class isa;
}

+ (id)alloc;
+ (id)allocWithZone:(NSZone *)zone;
+ (Class)class;

- (void)forwardInvocation:(NSInvocation *)invocation;
- (NSMethodSignature *)methodSignatureForSelector:(SEL)sel;
- (void)dealloc;
- (void)finalize;
- (NSString *)description;
+ (BOOL)respondsToSelector:(SEL)aSelector;

@end
# 49 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSRunLoop.h" 1
# 9 "/var/include/Foundation/NSRunLoop.h"
@class NSTimer, NSPort, NSArray;

extern NSString * const NSDefaultRunLoopMode;
extern NSString * const NSRunLoopCommonModes ;

@interface NSRunLoop : NSObject {
@private
    id _rl;
    id _dperf;
    id _perft;
    void *_reserved[8];
}

+ (NSRunLoop *)currentRunLoop;
+ (NSRunLoop *)mainRunLoop ;

- (NSString *)currentMode;
- (CFRunLoopRef)getCFRunLoop;

- (void)addTimer:(NSTimer *)timer forMode:(NSString *)mode;

- (void)addPort:(NSPort *)aPort forMode:(NSString *)mode;
- (void)removePort:(NSPort *)aPort forMode:(NSString *)mode;

- (NSDate *)limitDateForMode:(NSString *)mode;
- (void)acceptInputForMode:(NSString *)mode beforeDate:(NSDate *)limitDate;

@end

@interface NSRunLoop (NSRunLoopConveniences)

- (void)run;
- (void)runUntilDate:(NSDate *)limitDate;
- (BOOL)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate;





@end



@interface NSObject (NSDelayedPerforming)

- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray *)modes;
- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)aTarget selector:(SEL)aSelector object:(id)anArgument;

+ (void)cancelPreviousPerformRequestsWithTarget:(id)aTarget;


@end

@interface NSRunLoop (NSOrderedPerform)

- (void)performSelector:(SEL)aSelector target:(id)target argument:(id)arg order:(NSUInteger)order modes:(NSArray *)modes;
- (void)cancelPerformSelector:(SEL)aSelector target:(id)target argument:(id)arg;

- (void)cancelPerformSelectorsWithTarget:(id)target;


@end
# 51 "/var/include/Foundation/Foundation.h" 2


# 1 "/var/include/Foundation/NSSortDescriptor.h" 1
# 12 "/var/include/Foundation/NSSortDescriptor.h"
@interface NSSortDescriptor : NSObject <NSCoding, NSCopying> {
@private
    NSUInteger _sortDescriptorFlags;
    NSString *_key;
    SEL _selector;
    NSString *_selectorName;
}


- (id)initWithKey:(NSString *)key ascending:(BOOL)ascending;
- (id)initWithKey:(NSString *)key ascending:(BOOL)ascending selector:(SEL)selector;

- (NSString *)key;
- (BOOL)ascending;
- (SEL)selector;

- (NSComparisonResult)compareObject:(id)object1 toObject:(id)object2;
- (id)reversedSortDescriptor;

@end

@interface NSArray (NSSortDescriptorSorting)

- (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;

@end

@interface NSMutableArray (NSSortDescriptorSorting)

- (void)sortUsingDescriptors:(NSArray *)sortDescriptors;

@end
# 54 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSStream.h" 1
# 9 "/var/include/Foundation/NSStream.h"
@class NSData, NSDictionary, NSError, NSHost, NSInputStream, NSRunLoop, NSString, NSOutputStream;

enum {
    NSStreamStatusNotOpen = 0,
    NSStreamStatusOpening = 1,
    NSStreamStatusOpen = 2,
    NSStreamStatusReading = 3,
    NSStreamStatusWriting = 4,
    NSStreamStatusAtEnd = 5,
    NSStreamStatusClosed = 6,
    NSStreamStatusError = 7
};
typedef NSUInteger NSStreamStatus;

enum {
    NSStreamEventNone = 0,
    NSStreamEventOpenCompleted = 1 << 0,
    NSStreamEventHasBytesAvailable = 1 << 1,
    NSStreamEventHasSpaceAvailable = 1 << 2,
    NSStreamEventErrorOccurred = 1 << 3,
    NSStreamEventEndEncountered = 1 << 4
};
typedef NSUInteger NSStreamEvent;



@interface NSStream : NSObject
- (void)open;
- (void)close;

- (id)delegate;
- (void)setDelegate:(id)delegate;


- (id)propertyForKey:(NSString *)key;
- (BOOL)setProperty:(id)property forKey:(NSString *)key;

- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;

- (NSStreamStatus)streamStatus;
- (NSError *)streamError;
@end



@interface NSInputStream : NSStream
- (NSInteger)read:(uint8_t *)buffer maxLength:(NSUInteger)len;


- (BOOL)getBuffer:(uint8_t **)buffer length:(NSUInteger *)len;


- (BOOL)hasBytesAvailable;

@end



@interface NSOutputStream : NSStream
- (NSInteger)write:(const uint8_t *)buffer maxLength:(NSUInteger)len;


- (BOOL)hasSpaceAvailable;

@end
# 83 "/var/include/Foundation/NSStream.h"
@interface NSInputStream (NSInputStreamExtensions)
- (id)initWithData:(NSData *)data;
- (id)initWithFileAtPath:(NSString *)path;

+ (id)inputStreamWithData:(NSData *)data;
+ (id)inputStreamWithFileAtPath:(NSString *)path;
@end


@interface NSOutputStream (NSOutputStreamExtensions)
- (id)initToMemory;
- (id)initToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity;
- (id)initToFileAtPath:(NSString *)path append:(BOOL)shouldAppend;

+ (id)outputStreamToMemory;
+ (id)outputStreamToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity;
+ (id)outputStreamToFileAtPath:(NSString *)path append:(BOOL)shouldAppend;
@end

@interface NSObject (NSStreamDelegateEventExtensions)
- (void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode;
@end



extern NSString * const NSStreamSocketSecurityLevelKey ;

extern NSString * const NSStreamSocketSecurityLevelNone ;
extern NSString * const NSStreamSocketSecurityLevelSSLv2 ;
extern NSString * const NSStreamSocketSecurityLevelSSLv3 ;
extern NSString * const NSStreamSocketSecurityLevelTLSv1 ;
extern NSString * const NSStreamSocketSecurityLevelNegotiatedSSL ;

extern NSString * const NSStreamSOCKSProxyConfigurationKey ;

extern NSString * const NSStreamSOCKSProxyHostKey ;

extern NSString * const NSStreamSOCKSProxyPortKey ;

extern NSString * const NSStreamSOCKSProxyVersionKey ;

extern NSString * const NSStreamSOCKSProxyUserKey ;

extern NSString * const NSStreamSOCKSProxyPasswordKey ;


extern NSString * const NSStreamSOCKSProxyVersion4 ;

extern NSString * const NSStreamSOCKSProxyVersion5 ;


extern NSString * const NSStreamDataWrittenToMemoryStreamKey ;


extern NSString * const NSStreamFileCurrentOffsetKey ;



extern NSString * const NSStreamSocketSSLErrorDomain ;

extern NSString * const NSStreamSOCKSErrorDomain ;
# 55 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/NSThread.h" 1







@class NSArray, NSMutableDictionary, NSDate;

@interface NSThread : NSObject {
@private
    id _private;
    uint8_t _bytes[44];
}

+ (NSThread *)currentThread;

+ (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(id)argument;

+ (BOOL)isMultiThreaded;

- (NSMutableDictionary *)threadDictionary;

+ (void)sleepUntilDate:(NSDate *)date;
+ (void)sleepForTimeInterval:(NSTimeInterval)ti;

+ (void)exit;


+ (double)threadPriority;
+ (BOOL)setThreadPriority:(double)p;




+ (NSArray *)callStackReturnAddresses;

- (void)setName:(NSString *)n;
- (NSString *)name;

- (NSUInteger)stackSize;
- (void)setStackSize:(NSUInteger)s;

- (BOOL)isMainThread;
+ (BOOL)isMainThread;
+ (NSThread *)mainThread;

- (id)init;
- (id)initWithTarget:(id)target selector:(SEL)selector object:(id)argument;

- (BOOL)isExecuting;
- (BOOL)isFinished;

- (BOOL)isCancelled;
- (void)cancel;

- (void)start;

- (void)main;



@end

extern NSString * const NSWillBecomeMultiThreadedNotification;
extern NSString * const NSDidBecomeSingleThreadedNotification;
extern NSString * const NSThreadWillExitNotification;

@interface NSObject (NSThreadPerformAdditions)


- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array;
- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait;




- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array;
- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait;

- (void)performSelectorInBackground:(SEL)aSelector withObject:(id)arg;


@end
# 57 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSTimeZone.h" 1







@class NSString, NSArray, NSDictionary, NSDate, NSData, NSLocale;

@interface NSTimeZone : NSObject <NSCopying, NSCoding>

- (NSString *)name;
- (NSData *)data;

- (NSInteger)secondsFromGMTForDate:(NSDate *)aDate;
- (NSString *)abbreviationForDate:(NSDate *)aDate;
- (BOOL)isDaylightSavingTimeForDate:(NSDate *)aDate;
- (NSTimeInterval)daylightSavingTimeOffsetForDate:(NSDate *)aDate ;
- (NSDate *)nextDaylightSavingTimeTransitionAfterDate:(NSDate *)aDate ;

@end

@interface NSTimeZone (NSExtendedTimeZone)

+ (NSTimeZone *)systemTimeZone;
+ (void)resetSystemTimeZone;

+ (NSTimeZone *)defaultTimeZone;
+ (void)setDefaultTimeZone:(NSTimeZone *)aTimeZone;

+ (NSTimeZone *)localTimeZone;

+ (NSArray *)knownTimeZoneNames;

+ (NSDictionary *)abbreviationDictionary;

- (NSInteger)secondsFromGMT;
- (NSString *)abbreviation;
- (BOOL)isDaylightSavingTime;
- (NSTimeInterval)daylightSavingTimeOffset ;
- (NSDate *)nextDaylightSavingTimeTransition ;

- (NSString *)description;

- (BOOL)isEqualToTimeZone:(NSTimeZone *)aTimeZone;

enum {
 NSTimeZoneNameStyleStandard,
 NSTimeZoneNameStyleShortStandard,
 NSTimeZoneNameStyleDaylightSaving,
 NSTimeZoneNameStyleShortDaylightSaving
};
typedef NSInteger NSTimeZoneNameStyle;

- (NSString *)localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale *)locale ;

@end

@interface NSTimeZone (NSTimeZoneCreation)




+ (id)timeZoneWithName:(NSString *)tzName;
+ (id)timeZoneWithName:(NSString *)tzName data:(NSData *)aData;

- (id)initWithName:(NSString *)tzName;
- (id)initWithName:(NSString *)tzName data:(NSData *)aData;




+ (id)timeZoneForSecondsFromGMT:(NSInteger)seconds;

+ (id)timeZoneWithAbbreviation:(NSString *)abbreviation;

@end

extern NSString * const NSSystemTimeZoneDidChangeNotification ;
# 58 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSTimer.h" 1







@interface NSTimer : NSObject

+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation *)invocation repeats:(BOOL)yesOrNo;
+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation *)invocation repeats:(BOOL)yesOrNo;

+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;
+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;


- (id)initWithFireDate:(NSDate *)date interval:(NSTimeInterval)ti target:(id)t selector:(SEL)s userInfo:(id)ui repeats:(BOOL)rep;


- (void)fire;

- (NSDate *)fireDate;

- (void)setFireDate:(NSDate *)date;


- (NSTimeInterval)timeInterval;

- (void)invalidate;
- (BOOL)isValid;

- (id)userInfo;

@end
# 59 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURL.h" 1
# 11 "/var/include/Foundation/NSURL.h"
@class NSNumber, NSData, NSDictionary;


extern NSString *NSURLFileScheme;


@interface NSURL: NSObject <NSCoding, NSCopying>



{
    NSString *_urlString;
    NSURL *_baseURL;
    void *_clients;
    void *_reserved;
}


- initWithScheme:(NSString *)scheme host:(NSString *)host path:(NSString *)path;
- initFileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir ;
- initFileURLWithPath:(NSString *)path;

+ (id)fileURLWithPath:(NSString *)path isDirectory:(BOOL) isDir ;
+ (id)fileURLWithPath:(NSString *)path;


- initWithString:(NSString *)URLString;
- initWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL;
+ (id)URLWithString:(NSString *)URLString;
+ (id)URLWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL;

- (NSString *)absoluteString;
- (NSString *)relativeString;
- (NSURL *)baseURL;
- (NSURL *)absoluteURL;


- (NSString *)scheme;
- (NSString *)resourceSpecifier;


- (NSString *)host;
- (NSNumber *)port;
- (NSString *)user;
- (NSString *)password;
- (NSString *)path;
- (NSString *)fragment;
- (NSString *)parameterString;
- (NSString *)query;
- (NSString *)relativePath;

- (BOOL)isFileURL;

- (NSURL *)standardizedURL;
@end


@interface NSString (NSURLUtilities)


- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)enc;


- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc;

@end
# 60 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSUserDefaults.h" 1






@class NSArray, NSData, NSDictionary, NSMutableDictionary, NSString;

extern NSString * const NSGlobalDomain;
extern NSString * const NSArgumentDomain;
extern NSString * const NSRegistrationDomain;

@interface NSUserDefaults : NSObject {
@private
    id _private;
    void *_reserved[4];
}

+ (NSUserDefaults *)standardUserDefaults;
+ (void)resetStandardUserDefaults;

- (id)init;
- (id)initWithUser:(NSString *)username;

- (id)objectForKey:(NSString *)defaultName;
- (void)setObject:(id)value forKey:(NSString *)defaultName;
- (void)removeObjectForKey:(NSString *)defaultName;

- (NSString *)stringForKey:(NSString *)defaultName;
- (NSArray *)arrayForKey:(NSString *)defaultName;
- (NSDictionary *)dictionaryForKey:(NSString *)defaultName;
- (NSData *)dataForKey:(NSString *)defaultName;
- (NSArray *)stringArrayForKey:(NSString *)defaultName;
- (NSInteger)integerForKey:(NSString *)defaultName;
- (float)floatForKey:(NSString *)defaultName;
- (double)doubleForKey:(NSString *)defaultName;
- (BOOL)boolForKey:(NSString *)defaultName;

- (void)setInteger:(NSInteger)value forKey:(NSString *)defaultName;
- (void)setFloat:(float)value forKey:(NSString *)defaultName;
- (void)setDouble:(double)value forKey:(NSString *)defaultName;
- (void)setBool:(BOOL)value forKey:(NSString *)defaultName;

- (void)registerDefaults:(NSDictionary *)registrationDictionary;

- (void)addSuiteNamed:(NSString *)suiteName;
- (void)removeSuiteNamed:(NSString *)suiteName;

- (NSDictionary *)dictionaryRepresentation;

- (NSArray *)volatileDomainNames;
- (NSDictionary *)volatileDomainForName:(NSString *)domainName;
- (void)setVolatileDomain:(NSDictionary *)domain forName:(NSString *)domainName;
- (void)removeVolatileDomainForName:(NSString *)domainName;

- (NSArray *)persistentDomainNames;
- (NSDictionary *)persistentDomainForName:(NSString *)domainName;
- (void)setPersistentDomain:(NSDictionary *)domain forName:(NSString *)domainName;
- (void)removePersistentDomainForName:(NSString *)domainName;

- (BOOL)synchronize;


- (BOOL)objectIsForcedForKey:(NSString *)key;
- (BOOL)objectIsForcedForKey:(NSString *)key inDomain:(NSString *)domain;



@end

extern NSString * const NSUserDefaultsDidChangeNotification;
# 61 "/var/include/Foundation/Foundation.h" 2


# 1 "/var/include/Foundation/NSPredicate.h" 1
# 14 "/var/include/Foundation/NSPredicate.h"
@interface NSPredicate : NSObject <NSCoding, NSCopying> {
    void *_reserved;
}


+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat argumentArray:(NSArray *)arguments;
+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat, ...;
+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat arguments:(va_list)argList;

+ (NSPredicate *)predicateWithValue:(BOOL)value;

- (NSString *)predicateFormat;

- (NSPredicate *)predicateWithSubstitutionVariables:(NSDictionary *)variables;

- (BOOL)evaluateWithObject:(id)object;

- (BOOL)evaluateWithObject:(id)object substitutionVariables:(NSDictionary *)bindings __attribute__((weak_import));

@end

@interface NSArray (NSPredicateSupport)
- (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
@end

@interface NSMutableArray (NSPredicateSupport)
- (void)filterUsingPredicate:(NSPredicate *)predicate;
@end


@interface NSSet (NSPredicateSupport)
- (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate __attribute__((weak_import));
@end

@interface NSMutableSet (NSPredicateSupport)
- (void)filterUsingPredicate:(NSPredicate *)predicate __attribute__((weak_import));
@end
# 64 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSExpression.h" 1
# 10 "/var/include/Foundation/NSExpression.h"
@class NSString;
@class NSArray;
@class NSMutableDictionary;
@class NSPredicate;



enum {
    NSConstantValueExpressionType = 0,
    NSEvaluatedObjectExpressionType,
    NSVariableExpressionType,
    NSKeyPathExpressionType,
    NSFunctionExpressionType

    ,
    NSUnionSetExpressionType,
    NSIntersectSetExpressionType,
    NSMinusSetExpressionType,
    NSSubqueryExpressionType = 13,
    NSAggregateExpressionType

};
typedef NSUInteger NSExpressionType;

@interface NSExpression : NSObject <NSCoding, NSCopying> {
    @private
    void *_reserved;
    NSExpressionType _expressionType;
}

+ (NSExpression *)expressionForConstantValue:(id)obj;
+ (NSExpression *)expressionForEvaluatedObject;
+ (NSExpression *)expressionForVariable:(NSString *)string;
+ (NSExpression *)expressionForKeyPath:(NSString *)keyPath;
+ (NSExpression *)expressionForFunction:(NSString *)name arguments:(NSArray *)parameters;
# 83 "/var/include/Foundation/NSExpression.h"
+ (NSExpression *)expressionForAggregate:(NSArray *)subexpressions __attribute__((weak_import));
+ (NSExpression *)expressionForUnionSet:(NSExpression *)left with:(NSExpression *)right __attribute__((weak_import));
+ (NSExpression *)expressionForIntersectSet:(NSExpression *)left with:(NSExpression *)right __attribute__((weak_import));
+ (NSExpression *)expressionForMinusSet:(NSExpression *)left with:(NSExpression *)right __attribute__((weak_import));
+ (NSExpression *)expressionForSubquery:(NSExpression *)expression usingIteratorVariable:(NSString *)variable predicate:(id)predicate __attribute__((weak_import));
+ (NSExpression *)expressionForFunction:(NSExpression *)target selectorName:(NSString *)name arguments:(NSArray *)parameters __attribute__((weak_import));

- (id)initWithExpressionType:(NSExpressionType)type;


- (NSExpressionType)expressionType;
- (id)constantValue;
- (NSString *)keyPath;
- (NSString *)function;
- (NSString *)variable;
- (NSExpression *)operand;
- (NSArray *)arguments;

- (id)collection __attribute__((weak_import));
- (NSPredicate *)predicate __attribute__((weak_import));
- (NSExpression *)leftExpression __attribute__((weak_import));
- (NSExpression *)rightExpression __attribute__((weak_import));


- (id)expressionValueWithObject:(id)object context:(NSMutableDictionary *)context;
@end
# 65 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSComparisonPredicate.h" 1
# 10 "/var/include/Foundation/NSComparisonPredicate.h"
enum {
    NSCaseInsensitivePredicateOption = 0x01,
    NSDiacriticInsensitivePredicateOption = 0x02,
};


enum {
    NSDirectPredicateModifier = 0,
    NSAllPredicateModifier,
    NSAnyPredicateModifier
};
typedef NSUInteger NSComparisonPredicateModifier;



enum {
    NSLessThanPredicateOperatorType = 0,
    NSLessThanOrEqualToPredicateOperatorType,
    NSGreaterThanPredicateOperatorType,
    NSGreaterThanOrEqualToPredicateOperatorType,
    NSEqualToPredicateOperatorType,
    NSNotEqualToPredicateOperatorType,
    NSMatchesPredicateOperatorType,
    NSLikePredicateOperatorType,
    NSBeginsWithPredicateOperatorType,
    NSEndsWithPredicateOperatorType,
    NSInPredicateOperatorType,
    NSCustomSelectorPredicateOperatorType

    ,
    NSContainsPredicateOperatorType = 99,
    NSBetweenPredicateOperatorType

};
typedef NSUInteger NSPredicateOperatorType;

@class NSPredicateOperator;
@class NSExpression;



@interface NSComparisonPredicate : NSPredicate {
    @private
    void *_reserved2;
    NSPredicateOperator *_predicateOperator;
    NSExpression *_lhs;
    NSExpression *_rhs;
}

+ (NSPredicate *)predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSUInteger)options;
+ (NSPredicate *)predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector;

- (id)initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSUInteger)options;
- (id)initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector;

- (NSPredicateOperatorType)predicateOperatorType;
- (NSComparisonPredicateModifier)comparisonPredicateModifier;
- (NSExpression *)leftExpression;
- (NSExpression *)rightExpression;
- (SEL)customSelector;
- (NSUInteger)options;

@end
# 66 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSCompoundPredicate.h" 1
# 9 "/var/include/Foundation/NSCompoundPredicate.h"
@class NSArray;



enum {
    NSNotPredicateType = 0,
    NSAndPredicateType,
    NSOrPredicateType,
};
typedef NSUInteger NSCompoundPredicateType;

@interface NSCompoundPredicate : NSPredicate {
    @private
    void *_reserved2;
    NSUInteger _type;
    NSArray *_subpredicates;
}

- (id)initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray *)subpredicates;

- (NSCompoundPredicateType)compoundPredicateType;
- (NSArray *)subpredicates;


+ (NSPredicate *)andPredicateWithSubpredicates:(NSArray *)subpredicates;
+ (NSPredicate *)orPredicateWithSubpredicates:(NSArray *)subpredicates;
+ (NSPredicate *)notPredicateWithSubpredicate:(NSPredicate *)predicate;
@end
# 67 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSUndoManager.h" 1
# 14 "/var/include/Foundation/NSUndoManager.h"
@class NSArray;
@class NSString;


enum {
    NSUndoCloseGroupingRunLoopOrdering = 350000
};

@interface NSUndoManager : NSObject
{
    @private
    id _undoStack;
    id _redoStack;
    NSArray *_runLoopModes;
    NSInteger _disabled;
    struct {
        unsigned int undoing:1;
        unsigned int redoing:1;
        unsigned int registeredForCallback:1;
        unsigned int postingCheckpointNotification:1;
        unsigned int groupsByEvent:1;
        unsigned int reserved:27;
    } _flags;

    id _target;

    void *_NSUndoManagerReserved1;
    void *_NSUndoManagerReserved2;
    void *_NSUndoManagerReserved3;
}



- (void)beginUndoGrouping;
- (void)endUndoGrouping;


- (NSInteger)groupingLevel;




- (void)disableUndoRegistration;
- (void)enableUndoRegistration;
- (BOOL)isUndoRegistrationEnabled;



- (BOOL)groupsByEvent;
- (void)setGroupsByEvent:(BOOL)groupsByEvent;






- (void)setLevelsOfUndo:(NSUInteger)levels;
- (NSUInteger)levelsOfUndo;






- (void)setRunLoopModes:(NSArray *)runLoopModes;
- (NSArray *)runLoopModes;



- (void)undo;



- (void)redo;


- (void)undoNestedGroup;



- (BOOL)canUndo;
- (BOOL)canRedo;


- (BOOL)isUndoing;
- (BOOL)isRedoing;





- (void)removeAllActions;

- (void)removeAllActionsWithTarget:(id)target;



- (void)registerUndoWithTarget:(id)target selector:(SEL)selector object:(id)anObject;



- (id)prepareWithInvocationTarget:(id)target;







- (NSString *)undoActionName;
- (NSString *)redoActionName;



- (void)setActionName:(NSString *)actionName;





- (NSString *)undoMenuItemTitle;
- (NSString *)redoMenuItemTitle;






- (NSString *)undoMenuTitleForUndoActionName:(NSString *)actionName;
- (NSString *)redoMenuTitleForUndoActionName:(NSString *)actionName;




@end

extern NSString * const NSUndoManagerCheckpointNotification;




extern NSString * const NSUndoManagerWillUndoChangeNotification;
extern NSString * const NSUndoManagerWillRedoChangeNotification;

extern NSString * const NSUndoManagerDidUndoChangeNotification;
extern NSString * const NSUndoManagerDidRedoChangeNotification;

extern NSString * const NSUndoManagerDidOpenUndoGroupNotification;
extern NSString * const NSUndoManagerWillCloseUndoGroupNotification;
# 68 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSValueTransformer.h" 1
# 10 "/var/include/Foundation/NSValueTransformer.h"
@class NSArray, NSString;

extern NSString * const NSNegateBooleanTransformerName __attribute__((weak_import));
extern NSString * const NSIsNilTransformerName __attribute__((weak_import));
extern NSString * const NSIsNotNilTransformerName __attribute__((weak_import));
extern NSString * const NSUnarchiveFromDataTransformerName __attribute__((weak_import));
extern NSString * const NSKeyedUnarchiveFromDataTransformerName __attribute__((weak_import));

@interface NSValueTransformer : NSObject {
}



+ (void)setValueTransformer:(NSValueTransformer *)transformer forName:(NSString *)name;
+ (NSValueTransformer *)valueTransformerForName:(NSString *)name;
+ (NSArray *)valueTransformerNames;


+ (Class)transformedValueClass;
+ (BOOL)allowsReverseTransformation;

- (id)transformedValue:(id)value;
- (id)reverseTransformedValue:(id)value;

@end
# 69 "/var/include/Foundation/Foundation.h" 2

# 1 "/var/include/Foundation/FoundationErrors.h" 1
# 11 "/var/include/Foundation/FoundationErrors.h"
enum {

    NSFileNoSuchFileError = 4,
    NSFileLockingError = 255,
    NSFileReadUnknownError = 256,
    NSFileReadNoPermissionError = 257,
    NSFileReadInvalidFileNameError = 258,
    NSFileReadCorruptFileError = 259,
    NSFileReadNoSuchFileError = 260,
    NSFileReadInapplicableStringEncodingError = 261,
    NSFileReadUnsupportedSchemeError = 262,

    NSFileReadTooLargeError = 263,
    NSFileReadUnknownStringEncodingError = 264,

    NSFileWriteUnknownError = 512,
    NSFileWriteNoPermissionError = 513,
    NSFileWriteInvalidFileNameError = 514,
    NSFileWriteInapplicableStringEncodingError = 517,
    NSFileWriteUnsupportedSchemeError = 518,
    NSFileWriteOutOfSpaceError = 640,


    NSKeyValueValidationError = 1024,
    NSFormattingError = 2048,
    NSUserCancelledError = 3072,



    NSExecutableNotLoadableError = 3584,
    NSExecutableArchitectureMismatchError = 3585,
    NSExecutableRuntimeMismatchError = 3586,
    NSExecutableLoadError = 3587,
    NSExecutableLinkError = 3588,



    NSFileErrorMinimum = 0,
    NSFileErrorMaximum = 1023,

    NSValidationErrorMinimum = 1024,
    NSValidationErrorMaximum = 2047,


    NSExecutableErrorMinimum = 3584,
    NSExecutableErrorMaximum = 3839,


    NSFormattingErrorMinimum = 2048,
    NSFormattingErrorMaximum = 2559
};
# 71 "/var/include/Foundation/Foundation.h" 2



# 1 "/var/include/Foundation/NSHTTPCookie.h" 1
# 15 "/var/include/Foundation/NSHTTPCookie.h"
@class NSArray;
@class NSDate;
@class NSDictionary;
@class NSString;
@class NSURL;





extern NSString * const NSHTTPCookieName;





extern NSString * const NSHTTPCookieValue;





extern NSString * const NSHTTPCookieOriginURL;





extern NSString * const NSHTTPCookieVersion;





extern NSString * const NSHTTPCookieDomain;





extern NSString * const NSHTTPCookiePath;





extern NSString * const NSHTTPCookieSecure;





extern NSString * const NSHTTPCookieExpires;





extern NSString * const NSHTTPCookieComment;





extern NSString * const NSHTTPCookieCommentURL;





extern NSString * const NSHTTPCookieDiscard;





extern NSString * const NSHTTPCookieMaximumAge;





extern NSString * const NSHTTPCookiePort;


@class NSHTTPCookieInternal;
# 111 "/var/include/Foundation/NSHTTPCookie.h"
@interface NSHTTPCookie : NSObject
{
@private
    NSHTTPCookieInternal * _cookiePrivate;
}
# 240 "/var/include/Foundation/NSHTTPCookie.h"
- (id)initWithProperties:(NSDictionary *)properties;
# 255 "/var/include/Foundation/NSHTTPCookie.h"
+ (id)cookieWithProperties:(NSDictionary *)properties;
# 265 "/var/include/Foundation/NSHTTPCookie.h"
+ (NSDictionary *)requestHeaderFieldsWithCookies:(NSArray *)cookies;
# 276 "/var/include/Foundation/NSHTTPCookie.h"
+ (NSArray *)cookiesWithResponseHeaderFields:(NSDictionary *)headerFields forURL:(NSURL *)URL;
# 290 "/var/include/Foundation/NSHTTPCookie.h"
- (NSDictionary *)properties;
# 299 "/var/include/Foundation/NSHTTPCookie.h"
- (NSUInteger)version;






- (NSString *)name;






- (NSString *)value;
# 324 "/var/include/Foundation/NSHTTPCookie.h"
- (NSDate *)expiresDate;
# 333 "/var/include/Foundation/NSHTTPCookie.h"
- (BOOL)isSessionOnly;
# 344 "/var/include/Foundation/NSHTTPCookie.h"
- (NSString *)domain;
# 354 "/var/include/Foundation/NSHTTPCookie.h"
- (NSString *)path;
# 363 "/var/include/Foundation/NSHTTPCookie.h"
- (BOOL)isSecure;
# 377 "/var/include/Foundation/NSHTTPCookie.h"
- (BOOL)isHTTPOnly;
# 388 "/var/include/Foundation/NSHTTPCookie.h"
- (NSString *)comment;
# 399 "/var/include/Foundation/NSHTTPCookie.h"
- (NSURL *)commentURL;
# 412 "/var/include/Foundation/NSHTTPCookie.h"
- (NSArray *)portList;

@end
# 75 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSHTTPCookieStorage.h" 1
# 15 "/var/include/Foundation/NSHTTPCookieStorage.h"
@class NSArray;
@class NSHTTPCookie;
@class NSURL;
# 27 "/var/include/Foundation/NSHTTPCookieStorage.h"
enum {
    NSHTTPCookieAcceptPolicyAlways,
    NSHTTPCookieAcceptPolicyNever,
    NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain
};
typedef NSUInteger NSHTTPCookieAcceptPolicy;


@class NSHTTPCookieStorageInternal;
# 46 "/var/include/Foundation/NSHTTPCookieStorage.h"
@interface NSHTTPCookieStorage : NSObject
{
    @private
    NSHTTPCookieStorageInternal *_internal;
}






+ (NSHTTPCookieStorage *)sharedHTTPCookieStorage;






- (NSArray *)cookies;







- (void)setCookie:(NSHTTPCookie *)cookie;





- (void)deleteCookie:(NSHTTPCookie *)cookie;
# 90 "/var/include/Foundation/NSHTTPCookieStorage.h"
- (NSArray *)cookiesForURL:(NSURL *)URL;
# 109 "/var/include/Foundation/NSHTTPCookieStorage.h"
- (void)setCookies:(NSArray *)cookies forURL:(NSURL *)URL mainDocumentURL:(NSURL *)mainDocumentURL;







- (NSHTTPCookieAcceptPolicy)cookieAcceptPolicy;







- (void)setCookieAcceptPolicy:(NSHTTPCookieAcceptPolicy)cookieAcceptPolicy;

@end







extern NSString * const NSHTTPCookieManagerAcceptPolicyChangedNotification;





extern NSString * const NSHTTPCookieManagerCookiesChangedNotification;
# 76 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSNetServices.h" 1
# 10 "/var/include/Foundation/NSNetServices.h"
@class NSArray, NSData, NSDictionary, NSInputStream, NSOutputStream, NSRunLoop, NSString;

       

extern NSString * const NSNetServicesErrorCode;
extern NSString * const NSNetServicesErrorDomain;

enum {



    NSNetServicesUnknownError = -72000,



    NSNetServicesCollisionError = -72001,



    NSNetServicesNotFoundError = -72002,



    NSNetServicesActivityInProgress = -72003,



    NSNetServicesBadArgumentError = -72004,



    NSNetServicesCancelledError = -72005,



    NSNetServicesInvalidError = -72006,





    NSNetServicesTimeoutError = -72007,



};
typedef NSInteger NSNetServicesError;


enum {


    NSNetServiceNoAutoRename = 1 << 0
};
typedef NSUInteger NSNetServiceOptions;


       

@interface NSNetService : NSObject {
@private
    id _netService;
    id _delegate;
    id _reserved;
}



- (id)initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name port:(int)port;





- (id)initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name;

- (id)delegate;
- (void)setDelegate:(id)delegate;



- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;



- (NSString *)domain;



- (NSString *)type;



- (NSString *)name;



- (NSArray *)addresses;




- (NSInteger)port;







- (void)publish;







- (void)publishWithOptions:(NSNetServiceOptions)options;





- (void)resolve;



- (void)stop;





+ (NSDictionary *)dictionaryFromTXTRecordData:(NSData *)txtData;



+ (NSData *)dataFromTXTRecordDictionary:(NSDictionary *)txtDictionary;



- (NSString *)hostName;



- (void)resolveWithTimeout:(NSTimeInterval)timeout;



- (BOOL)getInputStream:(NSInputStream **)inputStream outputStream:(NSOutputStream **)outputStream;



- (BOOL)setTXTRecordData:(NSData *)recordData;



- (NSData *)TXTRecordData;



- (void)startMonitoring;



- (void)stopMonitoring;



@end

       

@interface NSNetServiceBrowser : NSObject {
@private
    id _netServiceBrowser;
    id _delegate;
    void * _reserved;
}

- (id)init;

- (id)delegate;
- (void)setDelegate:(id)delegate;



- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;





- (void)searchForBrowsableDomains;





- (void)searchForRegistrationDomains;



- (void)searchForServicesOfType:(NSString *)type inDomain:(NSString *)domainString;



- (void)stop;

@end

       

@interface NSObject (NSNetServiceDelegateMethods)



- (void)netServiceWillPublish:(NSNetService *)sender;





- (void)netServiceDidPublish:(NSNetService *)sender;





- (void)netService:(NSNetService *)sender didNotPublish:(NSDictionary *)errorDict;



- (void)netServiceWillResolve:(NSNetService *)sender;



- (void)netServiceDidResolveAddress:(NSNetService *)sender;



- (void)netService:(NSNetService *)sender didNotResolve:(NSDictionary *)errorDict;



- (void)netServiceDidStop:(NSNetService *)sender;





- (void)netService:(NSNetService *)sender didUpdateTXTRecordData:(NSData *)data;



@end

       

@interface NSObject (NSNetServiceBrowserDelegateMethods)



- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)aNetServiceBrowser;



- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)aNetServiceBrowser;



- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didNotSearch:(NSDictionary *)errorDict;



- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didFindDomain:(NSString *)domainString moreComing:(BOOL)moreComing;



- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didFindService:(NSNetService *)aNetService moreComing:(BOOL)moreComing;



- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didRemoveDomain:(NSString *)domainString moreComing:(BOOL)moreComing;



- (void)netServiceBrowser:(NSNetServiceBrowser *)aNetServiceBrowser didRemoveService:(NSNetService *)aNetService moreComing:(BOOL)moreComing;

@end

       
       
# 77 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLAuthenticationChallenge.h" 1
# 15 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSURLProtectionSpace;
@class NSURLResponse;
@class NSError;
# 29 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
@protocol NSURLAuthenticationChallengeSender <NSObject>




- (void)useCredential:(NSURLCredential *)credential forAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;




- (void)continueWithoutCredentialForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;




- (void)cancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;

@end

@class NSURLAuthenticationChallengeInternal;
# 57 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
@interface NSURLAuthenticationChallenge : NSObject
{
@private
    NSURLAuthenticationChallengeInternal *_internal;
}
# 73 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
- (id)initWithProtectionSpace:(NSURLProtectionSpace *)space proposedCredential:(NSURLCredential *)credential previousFailureCount:(NSInteger)previousFailureCount failureResponse:(NSURLResponse *)response error:(NSError *)error sender:(id<NSURLAuthenticationChallengeSender>)sender;
# 83 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
- (id)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge sender:(id<NSURLAuthenticationChallengeSender>)sender;






- (NSURLProtectionSpace *)protectionSpace;
# 104 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
- (NSURLCredential *)proposedCredential;






- (NSInteger)previousFailureCount;
# 122 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
- (NSURLResponse *)failureResponse;
# 132 "/var/include/Foundation/NSURLAuthenticationChallenge.h"
- (NSError *)error;







- (id<NSURLAuthenticationChallengeSender>)sender;

@end
# 78 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLCache.h" 1
# 35 "/var/include/Foundation/NSURLCache.h"
enum
{
    NSURLCacheStorageAllowed,
    NSURLCacheStorageAllowedInMemoryOnly,
    NSURLCacheStorageNotAllowed,
};
typedef NSUInteger NSURLCacheStoragePolicy;


@class NSCachedURLResponseInternal;
@class NSData;
@class NSDictionary;
@class NSURLRequest;
@class NSURLResponse;
# 57 "/var/include/Foundation/NSURLCache.h"
@interface NSCachedURLResponse : NSObject <NSCoding, NSCopying>
{
    NSCachedURLResponseInternal *_internal;
}
# 74 "/var/include/Foundation/NSURLCache.h"
- (id)initWithResponse:(NSURLResponse *)response data:(NSData *)data;
# 88 "/var/include/Foundation/NSURLCache.h"
- (id)initWithResponse:(NSURLResponse *)response data:(NSData *)data userInfo:(NSDictionary *)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy;






- (NSURLResponse *)response;






- (NSData *)data;






- (NSDictionary *)userInfo;






- (NSURLCacheStoragePolicy)storagePolicy;

@end


@class NSURLRequest;
@class NSURLCacheInternal;

@interface NSURLCache : NSObject
{
    @private
    NSURLCacheInternal *_internal;
}
# 153 "/var/include/Foundation/NSURLCache.h"
+ (NSURLCache *)sharedURLCache;
# 166 "/var/include/Foundation/NSURLCache.h"
+ (void)setSharedURLCache:(NSURLCache *)cache;
# 181 "/var/include/Foundation/NSURLCache.h"
- (id)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString *)path;
# 194 "/var/include/Foundation/NSURLCache.h"
- (NSCachedURLResponse *)cachedResponseForRequest:(NSURLRequest *)request;
# 203 "/var/include/Foundation/NSURLCache.h"
- (void)storeCachedResponse:(NSCachedURLResponse *)cachedResponse forRequest:(NSURLRequest *)request;
# 213 "/var/include/Foundation/NSURLCache.h"
- (void)removeCachedResponseForRequest:(NSURLRequest *)request;






- (void)removeAllCachedResponses;






- (NSUInteger)memoryCapacity;






- (NSUInteger)diskCapacity;
# 244 "/var/include/Foundation/NSURLCache.h"
- (void)setMemoryCapacity:(NSUInteger)memoryCapacity;
# 254 "/var/include/Foundation/NSURLCache.h"
- (void)setDiskCapacity:(NSUInteger)diskCapacity;
# 264 "/var/include/Foundation/NSURLCache.h"
- (NSUInteger)currentMemoryUsage;
# 274 "/var/include/Foundation/NSURLCache.h"
- (NSUInteger)currentDiskUsage;

@end
# 79 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLConnection.h" 1
# 17 "/var/include/Foundation/NSURLConnection.h"
@class NSCachedURLResponse;
@class NSData;
@class NSError;
@class NSURLAuthenticationChallenge;
@class NSURLConnectionInternal;
@class NSURLRequest;
@class NSURLResponse;
@class NSRunLoop;
@class NSInputStream;
@class NSURLProtectionSpace;
# 43 "/var/include/Foundation/NSURLConnection.h"
@interface NSURLConnection : NSObject
{
    @private
    NSURLConnectionInternal *_internal;
}
# 65 "/var/include/Foundation/NSURLConnection.h"
+ (BOOL)canHandleRequest:(NSURLRequest *)request;
# 87 "/var/include/Foundation/NSURLConnection.h"
+ (NSURLConnection *)connectionWithRequest:(NSURLRequest *)request delegate:(id)delegate;
# 111 "/var/include/Foundation/NSURLConnection.h"
- (id)initWithRequest:(NSURLRequest *)request delegate:(id)delegate;
# 130 "/var/include/Foundation/NSURLConnection.h"
- (id)initWithRequest:(NSURLRequest *)request delegate:(id)delegate startImmediately:(BOOL)startImmediately ;





- (void)start ;
# 146 "/var/include/Foundation/NSURLConnection.h"
- (void)cancel;
# 157 "/var/include/Foundation/NSURLConnection.h"
- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode ;
- (void)unscheduleFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode ;

@end
# 219 "/var/include/Foundation/NSURLConnection.h"
@interface NSObject (NSURLConnectionDelegate)
# 257 "/var/include/Foundation/NSURLConnection.h"
- (NSURLRequest *)connection:(NSURLConnection *)connection willSendRequest:(NSURLRequest *)request redirectResponse:(NSURLResponse *)response;
# 272 "/var/include/Foundation/NSURLConnection.h"
- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace __attribute__((weak_import));
# 294 "/var/include/Foundation/NSURLConnection.h"
- (NSInputStream *)connection:(NSURLConnection *)connection needNewBodyStream:(NSURLRequest *)request __attribute__((weak_import));
# 305 "/var/include/Foundation/NSURLConnection.h"
- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;







- (void)connection:(NSURLConnection *)connection didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;
# 329 "/var/include/Foundation/NSURLConnection.h"
- (BOOL)connectionShouldUseCredentialStorage:(NSURLConnection *)connection __attribute__((weak_import));
# 346 "/var/include/Foundation/NSURLConnection.h"
- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response;
# 366 "/var/include/Foundation/NSURLConnection.h"
- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data;
# 385 "/var/include/Foundation/NSURLConnection.h"
- (void)connection:(NSURLConnection *)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite __attribute__((weak_import));
# 397 "/var/include/Foundation/NSURLConnection.h"
- (void)connectionDidFinishLoading:(NSURLConnection *)connection;
# 410 "/var/include/Foundation/NSURLConnection.h"
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error;
# 429 "/var/include/Foundation/NSURLConnection.h"
- (NSCachedURLResponse *)connection:(NSURLConnection *)connection willCacheResponse:(NSCachedURLResponse *)cachedResponse;

@end
# 441 "/var/include/Foundation/NSURLConnection.h"
@interface NSURLConnection (NSURLConnectionSynchronousLoading)
# 467 "/var/include/Foundation/NSURLConnection.h"
+ (NSData *)sendSynchronousRequest:(NSURLRequest *)request returningResponse:(NSURLResponse **)response error:(NSError **)error;

@end
# 80 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLCredential.h" 1
# 14 "/var/include/Foundation/NSURLCredential.h"
# 1 "/var/include/Security/Security.h" 1
# 24 "/var/include/Security/Security.h"
# 1 "/var/include/Security/SecBase.h" 1
# 43 "/var/include/Security/SecBase.h"
typedef struct __SecCertificate *SecCertificateRef;







typedef struct __SecIdentity *SecIdentityRef;






typedef struct __SecKey *SecKeyRef;
# 72 "/var/include/Security/SecBase.h"
enum
{
    errSecSuccess = 0,
    errSecUnimplemented = -4,
    errSecParam = -50,
    errSecAllocate = -108,
    errSecNotAvailable = -25291,
    errSecDuplicateItem = -25299,
    errSecItemNotFound = -25300,
    errSecInteractionNotAllowed = -25308,
    errSecDecode = -26275,
};
# 25 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecCertificate.h" 1
# 49 "/var/include/Security/SecCertificate.h"
CFTypeID SecCertificateGetTypeID(void)
    ;
# 60 "/var/include/Security/SecCertificate.h"
SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator,
    CFDataRef data) ;
# 70 "/var/include/Security/SecCertificate.h"
CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
    ;
# 84 "/var/include/Security/SecCertificate.h"
CFStringRef SecCertificateCopySubjectSummary(SecCertificateRef certificate)
    ;
# 26 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecIdentity.h" 1
# 45 "/var/include/Security/SecIdentity.h"
CFTypeID SecIdentityGetTypeID(void)
    ;
# 57 "/var/include/Security/SecIdentity.h"
OSStatus SecIdentityCopyCertificate(
            SecIdentityRef identityRef,
            SecCertificateRef *certificateRef)
    ;
# 70 "/var/include/Security/SecIdentity.h"
OSStatus SecIdentityCopyPrivateKey(
            SecIdentityRef identityRef,
            SecKeyRef *privateKeyRef)
    ;
# 27 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecImportExport.h" 1
# 50 "/var/include/Security/SecImportExport.h"
extern CFStringRef kSecImportExportPassphrase;
# 68 "/var/include/Security/SecImportExport.h"
extern CFStringRef kSecImportItemLabel;
extern CFStringRef kSecImportItemKeyID;
extern CFStringRef kSecImportItemTrust;
extern CFStringRef kSecImportItemCertChain;
extern CFStringRef kSecImportItemIdentity;
# 89 "/var/include/Security/SecImportExport.h"
OSStatus SecPKCS12Import(CFDataRef pkcs12_data, CFDictionaryRef options,
    CFArrayRef *items) ;
# 28 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecItem.h" 1
# 53 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecClass;
# 66 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecClassGenericPassword;
extern CFTypeRef kSecClassInternetPassword;
extern CFTypeRef kSecClassCertificate;
extern CFTypeRef kSecClassKey;
extern CFTypeRef kSecClassIdentity;
# 316 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecAttrAccessGroup
    __attribute__((weak_import));
extern CFTypeRef kSecAttrCreationDate;
extern CFTypeRef kSecAttrModificationDate;
extern CFTypeRef kSecAttrDescription;
extern CFTypeRef kSecAttrComment;
extern CFTypeRef kSecAttrCreator;
extern CFTypeRef kSecAttrType;
extern CFTypeRef kSecAttrLabel;
extern CFTypeRef kSecAttrIsInvisible;
extern CFTypeRef kSecAttrIsNegative;
extern CFTypeRef kSecAttrAccount;
extern CFTypeRef kSecAttrService;
extern CFTypeRef kSecAttrGeneric;
extern CFTypeRef kSecAttrSecurityDomain;
extern CFTypeRef kSecAttrServer;
extern CFTypeRef kSecAttrProtocol;
extern CFTypeRef kSecAttrAuthenticationType;
extern CFTypeRef kSecAttrPort;
extern CFTypeRef kSecAttrPath;
extern CFTypeRef kSecAttrSubject;
extern CFTypeRef kSecAttrIssuer;
extern CFTypeRef kSecAttrSerialNumber;
extern CFTypeRef kSecAttrSubjectKeyID;
extern CFTypeRef kSecAttrPublicKeyHash;
extern CFTypeRef kSecAttrCertificateType;
extern CFTypeRef kSecAttrCertificateEncoding;
extern CFTypeRef kSecAttrKeyClass;
extern CFTypeRef kSecAttrApplicationLabel;
extern CFTypeRef kSecAttrIsPermanent;
extern CFTypeRef kSecAttrApplicationTag;
extern CFTypeRef kSecAttrKeyType;
extern CFTypeRef kSecAttrKeySizeInBits;
extern CFTypeRef kSecAttrEffectiveKeySize;
extern CFTypeRef kSecAttrCanEncrypt;
extern CFTypeRef kSecAttrCanDecrypt;
extern CFTypeRef kSecAttrCanDerive;
extern CFTypeRef kSecAttrCanSign;
extern CFTypeRef kSecAttrCanVerify;
extern CFTypeRef kSecAttrCanWrap;
extern CFTypeRef kSecAttrCanUnwrap;
# 395 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecAttrProtocolFTP;
extern CFTypeRef kSecAttrProtocolFTPAccount;
extern CFTypeRef kSecAttrProtocolHTTP;
extern CFTypeRef kSecAttrProtocolIRC;
extern CFTypeRef kSecAttrProtocolNNTP;
extern CFTypeRef kSecAttrProtocolPOP3;
extern CFTypeRef kSecAttrProtocolSMTP;
extern CFTypeRef kSecAttrProtocolSOCKS;
extern CFTypeRef kSecAttrProtocolIMAP;
extern CFTypeRef kSecAttrProtocolLDAP;
extern CFTypeRef kSecAttrProtocolAppleTalk;
extern CFTypeRef kSecAttrProtocolAFP;
extern CFTypeRef kSecAttrProtocolTelnet;
extern CFTypeRef kSecAttrProtocolSSH;
extern CFTypeRef kSecAttrProtocolFTPS;
extern CFTypeRef kSecAttrProtocolHTTPS;
extern CFTypeRef kSecAttrProtocolHTTPProxy;
extern CFTypeRef kSecAttrProtocolHTTPSProxy;
extern CFTypeRef kSecAttrProtocolFTPProxy;
extern CFTypeRef kSecAttrProtocolSMB;
extern CFTypeRef kSecAttrProtocolRTSP;
extern CFTypeRef kSecAttrProtocolRTSPProxy;
extern CFTypeRef kSecAttrProtocolDAAP;
extern CFTypeRef kSecAttrProtocolEPPC;
extern CFTypeRef kSecAttrProtocolIPP;
extern CFTypeRef kSecAttrProtocolNNTPS;
extern CFTypeRef kSecAttrProtocolLDAPS;
extern CFTypeRef kSecAttrProtocolTelnetS;
extern CFTypeRef kSecAttrProtocolIMAPS;
extern CFTypeRef kSecAttrProtocolIRCS;
extern CFTypeRef kSecAttrProtocolPOP3S;
# 441 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecAttrAuthenticationTypeNTLM;
extern CFTypeRef kSecAttrAuthenticationTypeMSN;
extern CFTypeRef kSecAttrAuthenticationTypeDPA;
extern CFTypeRef kSecAttrAuthenticationTypeRPA;
extern CFTypeRef kSecAttrAuthenticationTypeHTTPBasic;
extern CFTypeRef kSecAttrAuthenticationTypeHTTPDigest;
extern CFTypeRef kSecAttrAuthenticationTypeHTMLForm;
extern CFTypeRef kSecAttrAuthenticationTypeDefault;
# 459 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecAttrKeyClassPublic;
extern CFTypeRef kSecAttrKeyClassPrivate;
extern CFTypeRef kSecAttrKeyClassSymmetric;
# 470 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecAttrKeyTypeRSA;
# 515 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecMatchPolicy;
extern CFTypeRef kSecMatchItemList;
extern CFTypeRef kSecMatchSearchList;
extern CFTypeRef kSecMatchIssuers;
extern CFTypeRef kSecMatchEmailAddressIfPresent;
extern CFTypeRef kSecMatchSubjectContains;
extern CFTypeRef kSecMatchCaseInsensitive;
extern CFTypeRef kSecMatchTrustedOnly;
extern CFTypeRef kSecMatchValidOnDate;
extern CFTypeRef kSecMatchLimit;
extern CFTypeRef kSecMatchLimitOne;
extern CFTypeRef kSecMatchLimitAll;
# 555 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecReturnData;
extern CFTypeRef kSecReturnAttributes;
extern CFTypeRef kSecReturnRef;
extern CFTypeRef kSecReturnPersistentRef;
# 578 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecValueData;
extern CFTypeRef kSecValueRef;
extern CFTypeRef kSecValuePersistentRef;
# 594 "/var/include/Security/SecItem.h"
extern CFTypeRef kSecUseItemList;
# 655 "/var/include/Security/SecItem.h"
OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
    ;
# 692 "/var/include/Security/SecItem.h"
OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
    ;
# 711 "/var/include/Security/SecItem.h"
OSStatus SecItemUpdate(CFDictionaryRef query,
    CFDictionaryRef attributesToUpdate)
    ;
# 738 "/var/include/Security/SecItem.h"
OSStatus SecItemDelete(CFDictionaryRef query)
    ;
# 29 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecKey.h" 1
# 47 "/var/include/Security/SecKey.h"
typedef uint32_t SecPadding;
enum
{
    kSecPaddingNone = 0,
    kSecPaddingPKCS1 = 1,




    kSecPaddingPKCS1MD2 = 0x8000,




    kSecPaddingPKCS1MD5 = 0x8001,




    kSecPaddingPKCS1SHA1 = 0x8002,
};
# 76 "/var/include/Security/SecKey.h"
CFTypeID SecKeyGetTypeID(void)
    ;
# 88 "/var/include/Security/SecKey.h"
extern CFTypeRef kSecPrivateKeyAttrs
    ;
extern CFTypeRef kSecPublicKeyAttrs
    ;
# 132 "/var/include/Security/SecKey.h"
OSStatus SecKeyGeneratePair(CFDictionaryRef parameters, SecKeyRef *publicKey,
    SecKeyRef *privateKey) ;
# 164 "/var/include/Security/SecKey.h"
OSStatus SecKeyRawSign(
    SecKeyRef key,
 SecPadding padding,
 const uint8_t *dataToSign,
 size_t dataToSignLen,
 uint8_t *sig,
 size_t *sigLen)
    ;
# 194 "/var/include/Security/SecKey.h"
OSStatus SecKeyRawVerify(
    SecKeyRef key,
 SecPadding padding,
 const uint8_t *signedData,
 size_t signedDataLen,
 const uint8_t *sig,
 size_t sigLen)
    ;
# 226 "/var/include/Security/SecKey.h"
OSStatus SecKeyEncrypt(
    SecKeyRef key,
 SecPadding padding,
 const uint8_t *plainText,
 size_t plainTextLen,
 uint8_t *cipherText,
 size_t *cipherTextLen)
    ;
# 255 "/var/include/Security/SecKey.h"
OSStatus SecKeyDecrypt(
    SecKeyRef key,
 SecPadding padding,


 const uint8_t *cipherText,
 size_t cipherTextLen,
 uint8_t *plainText,
 size_t *plainTextLen)
    ;
# 274 "/var/include/Security/SecKey.h"
size_t SecKeyGetBlockSize(SecKeyRef key)
    ;
# 30 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecPolicy.h" 1
# 44 "/var/include/Security/SecPolicy.h"
typedef struct __SecPolicy *SecPolicyRef;






CFTypeID SecPolicyGetTypeID(void)
    ;







SecPolicyRef SecPolicyCreateBasicX509(void)
    ;
# 73 "/var/include/Security/SecPolicy.h"
SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
    ;
# 31 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecRandom.h" 1
# 45 "/var/include/Security/SecRandom.h"
typedef const struct __SecRandom * SecRandomRef;



extern const SecRandomRef kSecRandomDefault
    ;







int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes)
    ;
# 32 "/var/include/Security/Security.h" 2
# 1 "/var/include/Security/SecTrust.h" 1
# 71 "/var/include/Security/SecTrust.h"
typedef UInt32 SecTrustResultType;
enum {
    kSecTrustResultInvalid,
    kSecTrustResultProceed,
    kSecTrustResultConfirm,
    kSecTrustResultDeny,
    kSecTrustResultUnspecified,
    kSecTrustResultRecoverableTrustFailure,
    kSecTrustResultFatalTrustFailure,
    kSecTrustResultOtherError
};







typedef struct __SecTrust *SecTrustRef;






CFTypeID SecTrustGetTypeID(void)
    ;
# 111 "/var/include/Security/SecTrust.h"
OSStatus SecTrustCreateWithCertificates(CFArrayRef certificates,
    CFTypeRef policies, SecTrustRef *trustRef)
    ;
# 125 "/var/include/Security/SecTrust.h"
OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust,
    CFArrayRef anchorCertificates)
    ;
# 139 "/var/include/Security/SecTrust.h"
OSStatus SecTrustSetAnchorCertificatesOnly(SecTrustRef trust,
    Boolean anchorCertificatesOnly)
    ;
# 152 "/var/include/Security/SecTrust.h"
OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
    ;
# 162 "/var/include/Security/SecTrust.h"
CFAbsoluteTime SecTrustGetVerifyTime(SecTrustRef trust)
    ;
# 172 "/var/include/Security/SecTrust.h"
OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
    ;
# 185 "/var/include/Security/SecTrust.h"
SecKeyRef SecTrustCopyPublicKey(SecTrustRef trust)
    ;
# 197 "/var/include/Security/SecTrust.h"
CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
    ;
# 210 "/var/include/Security/SecTrust.h"
SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
    ;
# 32 "/var/include/Security/Security.h" 2
# 15 "/var/include/Foundation/NSURLCredential.h" 2

@class NSString;
@class NSArray;
# 27 "/var/include/Foundation/NSURLCredential.h"
enum {
    NSURLCredentialPersistenceNone,
    NSURLCredentialPersistenceForSession,
    NSURLCredentialPersistencePermanent
};
typedef NSUInteger NSURLCredentialPersistence;

@class NSURLCredentialInternal;






@interface NSURLCredential : NSObject <NSCopying>
{
    @private
    NSURLCredentialInternal *_internal;
}






- (NSURLCredentialPersistence)persistence;

@end





@interface NSURLCredential(NSInternetPassword)
# 70 "/var/include/Foundation/NSURLCredential.h"
- (id)initWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence;
# 80 "/var/include/Foundation/NSURLCredential.h"
+ (NSURLCredential *)credentialWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence;






- (NSString *)user;
# 97 "/var/include/Foundation/NSURLCredential.h"
- (NSString *)password;
# 108 "/var/include/Foundation/NSURLCredential.h"
- (BOOL)hasPassword;

@end





@interface NSURLCredential(NSClientCertificate)
# 126 "/var/include/Foundation/NSURLCredential.h"
- (id)initWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence) persistence __attribute__((weak_import));
# 136 "/var/include/Foundation/NSURLCredential.h"
+ (NSURLCredential *)credentialWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence)persistence __attribute__((weak_import));






- (SecIdentityRef)identity __attribute__((weak_import));






- (NSArray *)certificates __attribute__((weak_import));

@end

@interface NSURLCredential(NSServerTrust)






- (id)initWithTrust:(SecTrustRef)trust __attribute__((weak_import));






+ (NSURLCredential *)credentialForTrust:(SecTrustRef)trust __attribute__((weak_import));

@end
# 81 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLCredentialStorage.h" 1
# 15 "/var/include/Foundation/NSURLCredentialStorage.h"
@class NSDictionary;
@class NSString;
@class NSURLCredential;
@class NSURLProtectionSpace;

@class NSURLCredentialStorageInternal;
# 29 "/var/include/Foundation/NSURLCredentialStorage.h"
@interface NSURLCredentialStorage : NSObject
{
    @private
    NSURLCredentialStorageInternal *_internal;
}






+ (NSURLCredentialStorage *)sharedCredentialStorage;







- (NSDictionary *)credentialsForProtectionSpace:(NSURLProtectionSpace *)space;
# 57 "/var/include/Foundation/NSURLCredentialStorage.h"
- (NSDictionary *)allCredentials;
# 68 "/var/include/Foundation/NSURLCredentialStorage.h"
- (void)setCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space;
# 77 "/var/include/Foundation/NSURLCredentialStorage.h"
- (void)removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space;






- (NSURLCredential *)defaultCredentialForProtectionSpace:(NSURLProtectionSpace *)space;
# 93 "/var/include/Foundation/NSURLCredentialStorage.h"
- (void)setDefaultCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space;

@end






extern NSString *const NSURLCredentialStorageChangedNotification;
# 82 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLError.h" 1
# 13 "/var/include/Foundation/NSURLError.h"
@class NSString;






extern NSString * const NSURLErrorDomain;






extern NSString * const NSErrorFailingURLStringKey;





extern NSString * const NSURLErrorFailingURLPeerTrustErrorKey;






enum
{
    NSURLErrorUnknown = -1,
    NSURLErrorCancelled = -999,
    NSURLErrorBadURL = -1000,
    NSURLErrorTimedOut = -1001,
    NSURLErrorUnsupportedURL = -1002,
    NSURLErrorCannotFindHost = -1003,
    NSURLErrorCannotConnectToHost = -1004,
    NSURLErrorNetworkConnectionLost = -1005,
    NSURLErrorDNSLookupFailed = -1006,
    NSURLErrorHTTPTooManyRedirects = -1007,
    NSURLErrorResourceUnavailable = -1008,
    NSURLErrorNotConnectedToInternet = -1009,
    NSURLErrorRedirectToNonExistentLocation = -1010,
    NSURLErrorBadServerResponse = -1011,
    NSURLErrorUserCancelledAuthentication = -1012,
    NSURLErrorUserAuthenticationRequired = -1013,
    NSURLErrorZeroByteResource = -1014,
    NSURLErrorCannotDecodeRawData = -1015,
    NSURLErrorCannotDecodeContentData = -1016,
    NSURLErrorCannotParseResponse = -1017,
    NSURLErrorInternationalRoamingOff = -1018,
    NSURLErrorCallIsActive = -1019,
    NSURLErrorDataNotAllowed = -1020,
    NSURLErrorRequestBodyStreamExhausted = -1021,
    NSURLErrorFileDoesNotExist = -1100,
    NSURLErrorFileIsDirectory = -1101,
    NSURLErrorNoPermissionsToReadFile = -1102,

    NSURLErrorDataLengthExceedsMaximum = -1103,

    NSURLErrorSecureConnectionFailed = -1200,
    NSURLErrorServerCertificateHasBadDate = -1201,
    NSURLErrorServerCertificateUntrusted = -1202,
    NSURLErrorServerCertificateHasUnknownRoot = -1203,
    NSURLErrorServerCertificateNotYetValid = -1204,
 NSURLErrorClientCertificateRejected = -1205,
    NSURLErrorCannotLoadFromNetwork = -2000,


    NSURLErrorCannotCreateFile = -3000,
    NSURLErrorCannotOpenFile = -3001,
    NSURLErrorCannotCloseFile = -3002,
    NSURLErrorCannotWriteToFile = -3003,
    NSURLErrorCannotRemoveFile = -3004,
    NSURLErrorCannotMoveFile = -3005,
    NSURLErrorDownloadDecodingFailedMidStream = -3006,
    NSURLErrorDownloadDecodingFailedToComplete =-3007,
};
# 83 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLProtectionSpace.h" 1
# 17 "/var/include/Foundation/NSURLProtectionSpace.h"
@class NSString;
@class NSArray;





extern NSString * const NSURLProtectionSpaceHTTPProxy;





extern NSString * const NSURLProtectionSpaceHTTPSProxy;





extern NSString * const NSURLProtectionSpaceFTPProxy;





extern NSString * const NSURLProtectionSpaceSOCKSProxy;





extern NSString * const NSURLAuthenticationMethodDefault;






extern NSString * const NSURLAuthenticationMethodHTTPBasic;





extern NSString * const NSURLAuthenticationMethodHTTPDigest;





extern NSString * const NSURLAuthenticationMethodHTMLForm;





extern NSString * const NSURLAuthenticationMethodClientCertificate __attribute__((weak_import));





extern NSString * const NSURLAuthenticationMethodServerTrust __attribute__((weak_import));

@class NSURLProtectionSpaceInternal;






@interface NSURLProtectionSpace : NSObject <NSCopying>
{
@private
    NSURLProtectionSpaceInternal *_internal;
}
# 108 "/var/include/Foundation/NSURLProtectionSpace.h"
- (id)initWithHost:(NSString *)host port:(NSInteger)port protocol:(NSString *)protocol realm:(NSString *)realm authenticationMethod:(NSString *)authenticationMethod;
# 124 "/var/include/Foundation/NSURLProtectionSpace.h"
- (id)initWithProxyHost:(NSString *)host port:(NSInteger)port type:(NSString *)type realm:(NSString *)realm authenticationMethod:(NSString *)authenticationMethod;
# 134 "/var/include/Foundation/NSURLProtectionSpace.h"
- (NSString *)realm;






- (BOOL)receivesCredentialSecurely;






- (BOOL)isProxy;






- (NSString *)host;






- (NSInteger)port;






- (NSString *)proxyType;






- (NSString *)protocol;






- (NSString *)authenticationMethod;

@end





@interface NSURLProtectionSpace(NSClientCertificateSpace)






- (NSArray *)distinguishedNames __attribute__((weak_import));

@end





@interface NSURLProtectionSpace(NSServerTrustValidationSpace)






- (SecTrustRef)serverTrust __attribute__((weak_import));

@end
# 84 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLProtocol.h" 1
# 16 "/var/include/Foundation/NSURLProtocol.h"
@class NSCachedURLResponse;
@class NSError;
@class NSMutableURLRequest;
@class NSURLAuthenticationChallenge;
@class NSURLConnection;
@class NSURLProtocol;
@class NSURLProtocolInternal;
@class NSURLRequest;
@class NSURLResponse;
# 68 "/var/include/Foundation/NSURLProtocol.h"
@protocol NSURLProtocolClient <NSObject>
# 78 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol wasRedirectedToRequest:(NSURLRequest *)request redirectResponse:(NSURLResponse *)redirectResponse;
# 89 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol cachedResponseIsValid:(NSCachedURLResponse *)cachedResponse;
# 102 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol didReceiveResponse:(NSURLResponse *)response cacheStoragePolicy:(NSURLCacheStoragePolicy)policy;
# 114 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol didLoadData:(NSData *)data;







- (void)URLProtocolDidFinishLoading:(NSURLProtocol *)protocol;
# 131 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol didFailWithError:(NSError *)error;
# 143 "/var/include/Foundation/NSURLProtocol.h"
- (void)URLProtocol:(NSURLProtocol *)protocol didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;







- (void)URLProtocol:(NSURLProtocol *)protocol didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge;

@end
# 164 "/var/include/Foundation/NSURLProtocol.h"
@interface NSURLProtocol : NSObject
{
    @private
    NSURLProtocolInternal *_internal;
}
# 183 "/var/include/Foundation/NSURLProtocol.h"
- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id <NSURLProtocolClient>)client;






- (id <NSURLProtocolClient>)client;






- (NSURLRequest *)request;






- (NSCachedURLResponse *)cachedResponse;
# 225 "/var/include/Foundation/NSURLProtocol.h"
+ (BOOL)canInitWithRequest:(NSURLRequest *)request;
# 245 "/var/include/Foundation/NSURLProtocol.h"
+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request;
# 256 "/var/include/Foundation/NSURLProtocol.h"
+ (BOOL)requestIsCacheEquivalent:(NSURLRequest *)a toRequest:(NSURLRequest *)b;







- (void)startLoading;
# 274 "/var/include/Foundation/NSURLProtocol.h"
- (void)stopLoading;
# 292 "/var/include/Foundation/NSURLProtocol.h"
+ (id)propertyForKey:(NSString *)key inRequest:(NSURLRequest *)request;
# 305 "/var/include/Foundation/NSURLProtocol.h"
+ (void)setProperty:(id)value forKey:(NSString *)key inRequest:(NSMutableURLRequest *)request;
# 316 "/var/include/Foundation/NSURLProtocol.h"
+ (void)removePropertyForKey:(NSString *)key inRequest:(NSMutableURLRequest *)request;
# 342 "/var/include/Foundation/NSURLProtocol.h"
+ (BOOL)registerClass:(Class)protocolClass;
# 351 "/var/include/Foundation/NSURLProtocol.h"
+ (void)unregisterClass:(Class)protocolClass;

@end
# 85 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLRequest.h" 1
# 16 "/var/include/Foundation/NSURLRequest.h"
@class NSData;
@class NSDictionary;
@class NSInputStream;
@class NSString;
@class NSURL;
@class NSURLRequestInternal;
# 100 "/var/include/Foundation/NSURLRequest.h"
enum
{
    NSURLRequestUseProtocolCachePolicy = 0,

    NSURLRequestReloadIgnoringLocalCacheData = 1,
    NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4,
    NSURLRequestReloadIgnoringCacheData = NSURLRequestReloadIgnoringLocalCacheData,

    NSURLRequestReturnCacheDataElseLoad = 2,
    NSURLRequestReturnCacheDataDontLoad = 3,

    NSURLRequestReloadRevalidatingCacheData = 5,
};
typedef NSUInteger NSURLRequestCachePolicy;
# 147 "/var/include/Foundation/NSURLRequest.h"
@interface NSURLRequest : NSObject <NSCoding, NSCopying, NSMutableCopying>
{
    @private
    NSURLRequestInternal *_internal;
}
# 163 "/var/include/Foundation/NSURLRequest.h"
+ (id)requestWithURL:(NSURL *)URL;
# 176 "/var/include/Foundation/NSURLRequest.h"
+ (id)requestWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;
# 187 "/var/include/Foundation/NSURLRequest.h"
- (id)initWithURL:(NSURL *)URL;
# 202 "/var/include/Foundation/NSURLRequest.h"
- (id)initWithURL:(NSURL *)URL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval;






- (NSURL *)URL;






- (NSURLRequestCachePolicy)cachePolicy;
# 233 "/var/include/Foundation/NSURLRequest.h"
- (NSTimeInterval)timeoutInterval;
# 246 "/var/include/Foundation/NSURLRequest.h"
- (NSURL *)mainDocumentURL;

@end
# 281 "/var/include/Foundation/NSURLRequest.h"
@interface NSMutableURLRequest : NSURLRequest






- (void)setURL:(NSURL *)URL;






- (void)setCachePolicy:(NSURLRequestCachePolicy)policy;
# 312 "/var/include/Foundation/NSURLRequest.h"
- (void)setTimeoutInterval:(NSTimeInterval)seconds;
# 328 "/var/include/Foundation/NSURLRequest.h"
- (void)setMainDocumentURL:(NSURL *)URL;

@end
# 339 "/var/include/Foundation/NSURLRequest.h"
@interface NSURLRequest (NSHTTPURLRequest)






- (NSString *)HTTPMethod;
# 355 "/var/include/Foundation/NSURLRequest.h"
- (NSDictionary *)allHTTPHeaderFields;
# 367 "/var/include/Foundation/NSURLRequest.h"
- (NSString *)valueForHTTPHeaderField:(NSString *)field;
# 376 "/var/include/Foundation/NSURLRequest.h"
- (NSData *)HTTPBody;
# 391 "/var/include/Foundation/NSURLRequest.h"
- (NSInputStream *)HTTPBodyStream;
# 402 "/var/include/Foundation/NSURLRequest.h"
- (BOOL)HTTPShouldHandleCookies;

@end
# 413 "/var/include/Foundation/NSURLRequest.h"
@interface NSMutableURLRequest (NSMutableHTTPURLRequest)






- (void)setHTTPMethod:(NSString *)method;
# 435 "/var/include/Foundation/NSURLRequest.h"
- (void)setAllHTTPHeaderFields:(NSDictionary *)headerFields;
# 447 "/var/include/Foundation/NSURLRequest.h"
- (void)setValue:(NSString *)value forHTTPHeaderField:(NSString *)field;
# 463 "/var/include/Foundation/NSURLRequest.h"
- (void)addValue:(NSString *)value forHTTPHeaderField:(NSString *)field;
# 472 "/var/include/Foundation/NSURLRequest.h"
- (void)setHTTPBody:(NSData *)data;
# 485 "/var/include/Foundation/NSURLRequest.h"
- (void)setHTTPBodyStream:(NSInputStream *)inputStream;
# 498 "/var/include/Foundation/NSURLRequest.h"
- (void)setHTTPShouldHandleCookies:(BOOL)should;

@end
# 86 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSURLResponse.h" 1
# 15 "/var/include/Foundation/NSURLResponse.h"
@class NSDictionary;
@class NSString;
@class NSURL;
@class NSURLRequest;
@class NSURLResponseInternal;
# 35 "/var/include/Foundation/NSURLResponse.h"
@interface NSURLResponse : NSObject <NSCoding, NSCopying>
{
    NSURLResponseInternal *_internal;
}
# 50 "/var/include/Foundation/NSURLResponse.h"
- (id)initWithURL:(NSURL *)URL MIMEType:(NSString *)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString *)name;






- (NSURL *)URL;
# 70 "/var/include/Foundation/NSURLResponse.h"
- (NSString *)MIMEType;
# 85 "/var/include/Foundation/NSURLResponse.h"
- (long long)expectedContentLength;
# 98 "/var/include/Foundation/NSURLResponse.h"
- (NSString *)textEncodingName;
# 112 "/var/include/Foundation/NSURLResponse.h"
- (NSString *)suggestedFilename;

@end



@class NSHTTPURLResponseInternal;
# 128 "/var/include/Foundation/NSURLResponse.h"
@interface NSHTTPURLResponse : NSURLResponse
{
    NSHTTPURLResponseInternal *_httpInternal;
}






- (NSInteger)statusCode;
# 151 "/var/include/Foundation/NSURLResponse.h"
- (NSDictionary *)allHeaderFields;
# 160 "/var/include/Foundation/NSURLResponse.h"
+ (NSString *)localizedStringForStatusCode:(NSInteger)statusCode;

@end
# 87 "/var/include/Foundation/Foundation.h" 2
# 1 "/var/include/Foundation/NSXMLParser.h" 1
# 9 "/var/include/Foundation/NSXMLParser.h"
@class NSData, NSDictionary, NSError, NSString, NSURL;

@interface NSXMLParser : NSObject {
@private
    void * _parser;
    id _delegate;
    id _reserved1;
    id _reserved2;
    id _reserved3;
}
- (id)initWithContentsOfURL:(NSURL *)url;
- (id)initWithData:(NSData *)data;


- (id)delegate;
- (void)setDelegate:(id)delegate;

- (void)setShouldProcessNamespaces:(BOOL)shouldProcessNamespaces;
- (void)setShouldReportNamespacePrefixes:(BOOL)shouldReportNamespacePrefixes;
- (void)setShouldResolveExternalEntities:(BOOL)shouldResolveExternalEntities;

- (BOOL)shouldProcessNamespaces;
- (BOOL)shouldReportNamespacePrefixes;
- (BOOL)shouldResolveExternalEntities;

- (BOOL)parse;
- (void)abortParsing;

- (NSError *)parserError;
@end


@interface NSXMLParser (NSXMLParserLocatorAdditions)
- (NSString *)publicID;
- (NSString *)systemID;
- (NSInteger)lineNumber;
- (NSInteger)columnNumber;
@end
# 65 "/var/include/Foundation/NSXMLParser.h"
@interface NSObject (NSXMLParserDelegateEventAdditions)

- (void)parserDidStartDocument:(NSXMLParser *)parser;

- (void)parserDidEndDocument:(NSXMLParser *)parser;



- (void)parser:(NSXMLParser *)parser foundNotationDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID;

- (void)parser:(NSXMLParser *)parser foundUnparsedEntityDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID notationName:(NSString *)notationName;

- (void)parser:(NSXMLParser *)parser foundAttributeDeclarationWithName:(NSString *)attributeName forElement:(NSString *)elementName type:(NSString *)type defaultValue:(NSString *)defaultValue;

- (void)parser:(NSXMLParser *)parser foundElementDeclarationWithName:(NSString *)elementName model:(NSString *)model;

- (void)parser:(NSXMLParser *)parser foundInternalEntityDeclarationWithName:(NSString *)name value:(NSString *)value;

- (void)parser:(NSXMLParser *)parser foundExternalEntityDeclarationWithName:(NSString *)name publicID:(NSString *)publicID systemID:(NSString *)systemID;

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict;







- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName;


- (void)parser:(NSXMLParser *)parser didStartMappingPrefix:(NSString *)prefix toURI:(NSString *)namespaceURI;




- (void)parser:(NSXMLParser *)parser didEndMappingPrefix:(NSString *)prefix;


- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string;


- (void)parser:(NSXMLParser *)parser foundIgnorableWhitespace:(NSString *)whitespaceString;


- (void)parser:(NSXMLParser *)parser foundProcessingInstructionWithTarget:(NSString *)target data:(NSString *)data;


- (void)parser:(NSXMLParser *)parser foundComment:(NSString *)comment;


- (void)parser:(NSXMLParser *)parser foundCDATA:(NSData *)CDATABlock;


- (NSData *)parser:(NSXMLParser *)parser resolveExternalEntityName:(NSString *)name systemID:(NSString *)systemID;


- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError;


- (void)parser:(NSXMLParser *)parser validationErrorOccurred:(NSError *)validationError;

@end

extern NSString * const NSXMLParserErrorDomain ;


enum {
    NSXMLParserInternalError = 1,
    NSXMLParserOutOfMemoryError = 2,
    NSXMLParserDocumentStartError = 3,
    NSXMLParserEmptyDocumentError = 4,
    NSXMLParserPrematureDocumentEndError = 5,
    NSXMLParserInvalidHexCharacterRefError = 6,
    NSXMLParserInvalidDecimalCharacterRefError = 7,
    NSXMLParserInvalidCharacterRefError = 8,
    NSXMLParserInvalidCharacterError = 9,
    NSXMLParserCharacterRefAtEOFError = 10,
    NSXMLParserCharacterRefInPrologError = 11,
    NSXMLParserCharacterRefInEpilogError = 12,
    NSXMLParserCharacterRefInDTDError = 13,
    NSXMLParserEntityRefAtEOFError = 14,
    NSXMLParserEntityRefInPrologError = 15,
    NSXMLParserEntityRefInEpilogError = 16,
    NSXMLParserEntityRefInDTDError = 17,
    NSXMLParserParsedEntityRefAtEOFError = 18,
    NSXMLParserParsedEntityRefInPrologError = 19,
    NSXMLParserParsedEntityRefInEpilogError = 20,
    NSXMLParserParsedEntityRefInInternalSubsetError = 21,
    NSXMLParserEntityReferenceWithoutNameError = 22,
    NSXMLParserEntityReferenceMissingSemiError = 23,
    NSXMLParserParsedEntityRefNoNameError = 24,
    NSXMLParserParsedEntityRefMissingSemiError = 25,
    NSXMLParserUndeclaredEntityError = 26,
    NSXMLParserUnparsedEntityError = 28,
    NSXMLParserEntityIsExternalError = 29,
    NSXMLParserEntityIsParameterError = 30,
    NSXMLParserUnknownEncodingError = 31,
    NSXMLParserEncodingNotSupportedError = 32,
    NSXMLParserStringNotStartedError = 33,
    NSXMLParserStringNotClosedError = 34,
    NSXMLParserNamespaceDeclarationError = 35,
    NSXMLParserEntityNotStartedError = 36,
    NSXMLParserEntityNotFinishedError = 37,
    NSXMLParserLessThanSymbolInAttributeError = 38,
    NSXMLParserAttributeNotStartedError = 39,
    NSXMLParserAttributeNotFinishedError = 40,
    NSXMLParserAttributeHasNoValueError = 41,
    NSXMLParserAttributeRedefinedError = 42,
    NSXMLParserLiteralNotStartedError = 43,
    NSXMLParserLiteralNotFinishedError = 44,
    NSXMLParserCommentNotFinishedError = 45,
    NSXMLParserProcessingInstructionNotStartedError = 46,
    NSXMLParserProcessingInstructionNotFinishedError = 47,
    NSXMLParserNotationNotStartedError = 48,
    NSXMLParserNotationNotFinishedError = 49,
    NSXMLParserAttributeListNotStartedError = 50,
    NSXMLParserAttributeListNotFinishedError = 51,
    NSXMLParserMixedContentDeclNotStartedError = 52,
    NSXMLParserMixedContentDeclNotFinishedError = 53,
    NSXMLParserElementContentDeclNotStartedError = 54,
    NSXMLParserElementContentDeclNotFinishedError = 55,
    NSXMLParserXMLDeclNotStartedError = 56,
    NSXMLParserXMLDeclNotFinishedError = 57,
    NSXMLParserConditionalSectionNotStartedError = 58,
    NSXMLParserConditionalSectionNotFinishedError = 59,
    NSXMLParserExternalSubsetNotFinishedError = 60,
    NSXMLParserDOCTYPEDeclNotFinishedError = 61,
    NSXMLParserMisplacedCDATAEndStringError = 62,
    NSXMLParserCDATANotFinishedError = 63,
    NSXMLParserMisplacedXMLDeclarationError = 64,
    NSXMLParserSpaceRequiredError = 65,
    NSXMLParserSeparatorRequiredError = 66,
    NSXMLParserNMTOKENRequiredError = 67,
    NSXMLParserNAMERequiredError = 68,
    NSXMLParserPCDATARequiredError = 69,
    NSXMLParserURIRequiredError = 70,
    NSXMLParserPublicIdentifierRequiredError = 71,
    NSXMLParserLTRequiredError = 72,
    NSXMLParserGTRequiredError = 73,
    NSXMLParserLTSlashRequiredError = 74,
    NSXMLParserEqualExpectedError = 75,
    NSXMLParserTagNameMismatchError = 76,
    NSXMLParserUnfinishedTagError = 77,
    NSXMLParserStandaloneValueError = 78,
    NSXMLParserInvalidEncodingNameError = 79,
    NSXMLParserCommentContainsDoubleHyphenError = 80,
    NSXMLParserInvalidEncodingError = 81,
    NSXMLParserExternalStandaloneEntityError = 82,
    NSXMLParserInvalidConditionalSectionError = 83,
    NSXMLParserEntityValueRequiredError = 84,
    NSXMLParserNotWellBalancedError = 85,
    NSXMLParserExtraContentError = 86,
    NSXMLParserInvalidCharacterInEntityError = 87,
    NSXMLParserParsedEntityRefInInternalError = 88,
    NSXMLParserEntityRefLoopError = 89,
    NSXMLParserEntityBoundaryError = 90,
    NSXMLParserInvalidURIError = 91,
    NSXMLParserURIFragmentError = 92,
    NSXMLParserNoDTDError = 94,
    NSXMLParserDelegateAbortedParseError = 512
};
typedef NSInteger NSXMLParserError;
# 88 "/var/include/Foundation/Foundation.h" 2
# 4 "test.c" 2

# 1 "/var/include/UIKit/UIKit.h" 1







# 1 "/var/include/UIKit/UIKitDefines.h" 1
# 9 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIAccelerometer.h" 1
# 11 "/var/include/UIKit/UIAccelerometer.h"
typedef double UIAccelerationValue;

@protocol UIAccelerometerDelegate;

__attribute__((visibility("default"))) @interface UIAcceleration : NSObject {
  @private
    NSTimeInterval timestamp;
    UIAccelerationValue x, y, z;
}

@property(nonatomic,readonly) NSTimeInterval timestamp;
@property(nonatomic,readonly) UIAccelerationValue x;
@property(nonatomic,readonly) UIAccelerationValue y;
@property(nonatomic,readonly) UIAccelerationValue z;

@end

__attribute__((visibility("default"))) @interface UIAccelerometer : NSObject {
  @private
    NSTimeInterval _updateInterval;
    id <UIAccelerometerDelegate> _delegate;
    struct {
        unsigned int delegateDidAccelerate:1;
        unsigned int reserved:31;
    } _accelerometerFlags;
}

+ (UIAccelerometer *)sharedAccelerometer;

@property(nonatomic) NSTimeInterval updateInterval;
@property(nonatomic,assign) id<UIAccelerometerDelegate> delegate;

@end

@protocol UIAccelerometerDelegate<NSObject>
@optional

- (void)accelerometer:(UIAccelerometer *)accelerometer didAccelerate:(UIAcceleration *)acceleration;

@end
# 10 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIAccessibility.h" 1
# 10 "/var/include/UIKit/UIAccessibility.h"
# 1 "/var/include/CoreGraphics/CoreGraphics.h" 1







# 1 "/var/include/CoreGraphics/CGBase.h" 1
# 9 "/var/include/CoreGraphics/CGBase.h"
# 1 "/var/include/stddef.h" 1
# 10 "/var/include/CoreGraphics/CGBase.h" 2
# 1 "/var/include/float.h" 1
# 11 "/var/include/CoreGraphics/CGBase.h" 2
# 87 "/var/include/CoreGraphics/CGBase.h"
typedef float CGFloat;
# 9 "/var/include/CoreGraphics/CoreGraphics.h" 2

# 1 "/var/include/CoreGraphics/CGAffineTransform.h" 1







typedef struct CGAffineTransform CGAffineTransform;


# 1 "/var/include/CoreGraphics/CGGeometry.h" 1
# 13 "/var/include/CoreGraphics/CGGeometry.h"
struct CGPoint {
  CGFloat x;
  CGFloat y;
};
typedef struct CGPoint CGPoint;



struct CGSize {
  CGFloat width;
  CGFloat height;
};
typedef struct CGSize CGSize;



struct CGRect {
  CGPoint origin;
  CGSize size;
};
typedef struct CGRect CGRect;



enum CGRectEdge {
  CGRectMinXEdge, CGRectMinYEdge, CGRectMaxXEdge, CGRectMaxYEdge
};
typedef enum CGRectEdge CGRectEdge;



extern const CGPoint CGPointZero
  ;



extern const CGSize CGSizeZero
  ;



extern const CGRect CGRectZero
  ;





extern const CGRect CGRectNull
  ;



extern const CGRect CGRectInfinite
  ;



static __inline__ CGPoint CGPointMake(CGFloat x, CGFloat y)
  ;



static __inline__ CGSize CGSizeMake(CGFloat width, CGFloat height)
  ;



static __inline__ CGRect CGRectMake(CGFloat x, CGFloat y, CGFloat width,
  CGFloat height) ;



extern CGFloat CGRectGetMinX(CGRect rect)
  ;



extern CGFloat CGRectGetMidX(CGRect rect)
  ;



extern CGFloat CGRectGetMaxX(CGRect rect)
  ;



extern CGFloat CGRectGetMinY(CGRect rect)
  ;



extern CGFloat CGRectGetMidY(CGRect rect)
  ;



extern CGFloat CGRectGetMaxY(CGRect rect)
  ;



extern CGFloat CGRectGetWidth(CGRect rect)
  ;



extern CGFloat CGRectGetHeight(CGRect rect)
  ;



extern _Bool CGPointEqualToPoint(CGPoint point1, CGPoint point2)
  ;



extern _Bool CGSizeEqualToSize(CGSize size1, CGSize size2)
  ;



extern _Bool CGRectEqualToRect(CGRect rect1, CGRect rect2)
  ;




extern CGRect CGRectStandardize(CGRect rect)
  ;




extern _Bool CGRectIsEmpty(CGRect rect)
  ;



extern _Bool CGRectIsNull(CGRect rect)
  ;



extern _Bool CGRectIsInfinite(CGRect rect)
  ;




extern CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
  ;




extern CGRect CGRectIntegral(CGRect rect)
  ;



extern CGRect CGRectUnion(CGRect r1, CGRect r2)
  ;



extern CGRect CGRectIntersection(CGRect r1, CGRect r2)
  ;



extern CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
  ;







extern void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder,
  CGFloat amount, CGRectEdge edge)
  ;



extern _Bool CGRectContainsPoint(CGRect rect, CGPoint point)
  ;





extern _Bool CGRectContainsRect(CGRect rect1, CGRect rect2)
  ;





extern _Bool CGRectIntersectsRect(CGRect rect1, CGRect rect2)
  ;





extern CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
  ;





extern _Bool CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict,
  CGPoint *point) ;



extern CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
  ;





extern _Bool CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict,
  CGSize *size) ;



extern CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect)
  ;





extern _Bool CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict,
  CGRect *rect) ;



static __inline__ CGPoint
CGPointMake(CGFloat x, CGFloat y)
{
  CGPoint p; p.x = x; p.y = y; return p;
}

static __inline__ CGSize
CGSizeMake(CGFloat width, CGFloat height)
{
  CGSize size; size.width = width; size.height = height; return size;
}

static __inline__ CGRect
CGRectMake(CGFloat x, CGFloat y, CGFloat width, CGFloat height)
{
  CGRect rect;
  rect.origin.x = x; rect.origin.y = y;
  rect.size.width = width; rect.size.height = height;
  return rect;
}

static __inline__ _Bool
__CGPointEqualToPoint(CGPoint point1, CGPoint point2)
{
  return point1.x == point2.x && point1.y == point2.y;
}


static __inline__ _Bool
__CGSizeEqualToSize(CGSize size1, CGSize size2)
{
  return size1.width == size2.width && size1.height == size2.height;
}
# 12 "/var/include/CoreGraphics/CGAffineTransform.h" 2

struct CGAffineTransform {
  CGFloat a, b, c, d;
  CGFloat tx, ty;
};



extern const CGAffineTransform CGAffineTransformIdentity
  ;



extern CGAffineTransform CGAffineTransformMake(CGFloat a, CGFloat b,
  CGFloat c, CGFloat d, CGFloat tx, CGFloat ty)
  ;




extern CGAffineTransform CGAffineTransformMakeTranslation(CGFloat tx,
  CGFloat ty) ;




extern CGAffineTransform CGAffineTransformMakeScale(CGFloat sx, CGFloat sy)
  ;




extern CGAffineTransform CGAffineTransformMakeRotation(CGFloat angle)
  ;



extern _Bool CGAffineTransformIsIdentity(CGAffineTransform t)
  ;




extern CGAffineTransform CGAffineTransformTranslate(CGAffineTransform t,
  CGFloat tx, CGFloat ty) ;




extern CGAffineTransform CGAffineTransformScale(CGAffineTransform t,
  CGFloat sx, CGFloat sy) ;




extern CGAffineTransform CGAffineTransformRotate(CGAffineTransform t,
  CGFloat angle) ;




extern CGAffineTransform CGAffineTransformInvert(CGAffineTransform t)
  ;




extern CGAffineTransform CGAffineTransformConcat(CGAffineTransform t1,
  CGAffineTransform t2) ;



extern _Bool CGAffineTransformEqualToTransform(CGAffineTransform t1,
  CGAffineTransform t2) ;





extern CGPoint CGPointApplyAffineTransform(CGPoint point,
  CGAffineTransform t) ;





extern CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)
  ;
# 108 "/var/include/CoreGraphics/CGAffineTransform.h"
extern CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform t)
  ;



static __inline__ CGAffineTransform
__CGAffineTransformMake(CGFloat a, CGFloat b, CGFloat c, CGFloat d,
  CGFloat tx, CGFloat ty)
{
  CGAffineTransform t;
  t.a = a; t.b = b; t.c = c; t.d = d; t.tx = tx; t.ty = ty;
  return t;
}


static __inline__ CGPoint
__CGPointApplyAffineTransform(CGPoint point, CGAffineTransform t)
{
  CGPoint p;
  p.x = (CGFloat)((double)t.a * point.x + (double)t.c * point.y + t.tx);
  p.y = (CGFloat)((double)t.b * point.x + (double)t.d * point.y + t.ty);
  return p;
}


static __inline__ CGSize
__CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)
{
  CGSize s;
  s.width = (CGFloat)((double)t.a * size.width + (double)t.c * size.height);
  s.height = (CGFloat)((double)t.b * size.width + (double)t.d * size.height);
  return s;
}
# 11 "/var/include/CoreGraphics/CoreGraphics.h" 2
# 1 "/var/include/CoreGraphics/CGBitmapContext.h" 1
# 9 "/var/include/CoreGraphics/CGBitmapContext.h"
# 1 "/var/include/CoreGraphics/CGContext.h" 1







typedef struct CGContext *CGContextRef;



# 1 "/var/include/CoreGraphics/CGColor.h" 1







typedef struct CGColor *CGColorRef;


# 1 "/var/include/CoreGraphics/CGColorSpace.h" 1







typedef struct CGColorSpace *CGColorSpaceRef;


# 1 "/var/include/CoreGraphics/CGDataProvider.h" 1







typedef struct CGDataProvider *CGDataProviderRef;



# 1 "/var/include/stddef.h" 1
# 13 "/var/include/CoreGraphics/CGDataProvider.h" 2
# 1 "/var/include/unistd.h" 1
# 14 "/var/include/CoreGraphics/CGDataProvider.h" 2




typedef size_t (*CGDataProviderGetBytesCallback)(void *info, void *buffer,
    size_t count);





typedef off_t (*CGDataProviderSkipForwardCallback)(void *info, off_t count);




typedef void (*CGDataProviderRewindCallback)(void *info);




typedef void (*CGDataProviderReleaseInfoCallback)(void *info);
# 49 "/var/include/CoreGraphics/CGDataProvider.h"
struct CGDataProviderSequentialCallbacks {
    unsigned int version;
    CGDataProviderGetBytesCallback getBytes;
    CGDataProviderSkipForwardCallback skipForward;
    CGDataProviderRewindCallback rewind;
    CGDataProviderReleaseInfoCallback releaseInfo;
};
typedef struct CGDataProviderSequentialCallbacks
    CGDataProviderSequentialCallbacks;



typedef const void *(*CGDataProviderGetBytePointerCallback)(void *info);




typedef void (*CGDataProviderReleaseBytePointerCallback)(void *info,
    const void *pointer);




typedef size_t (*CGDataProviderGetBytesAtPositionCallback)(void *info,
    void *buffer, off_t position, size_t count);
# 90 "/var/include/CoreGraphics/CGDataProvider.h"
struct CGDataProviderDirectCallbacks {
    unsigned int version;
    CGDataProviderGetBytePointerCallback getBytePointer;
    CGDataProviderReleaseBytePointerCallback releaseBytePointer;
    CGDataProviderGetBytesAtPositionCallback getBytesAtPosition;
    CGDataProviderReleaseInfoCallback releaseInfo;
};
typedef struct CGDataProviderDirectCallbacks CGDataProviderDirectCallbacks;



extern CFTypeID CGDataProviderGetTypeID(void)
    ;




extern CGDataProviderRef CGDataProviderCreateSequential(void *info,
    const CGDataProviderSequentialCallbacks *callbacks)
    ;




extern CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size,
    const CGDataProviderDirectCallbacks *callbacks)
    ;



typedef void (*CGDataProviderReleaseDataCallback)(void *info, const void *data,
    size_t size);





extern CGDataProviderRef CGDataProviderCreateWithData(void *info,
    const void *data, size_t size,
    CGDataProviderReleaseDataCallback releaseData)
    ;



extern CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
    ;



extern CGDataProviderRef CGDataProviderCreateWithURL(CFURLRef url)
    ;



extern CGDataProviderRef
    CGDataProviderCreateWithFilename(const char *filename)
    ;




extern CGDataProviderRef CGDataProviderRetain(CGDataProviderRef provider)
    ;




extern void CGDataProviderRelease(CGDataProviderRef provider)
    ;





extern CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
    ;






typedef void (*CGDataProviderSkipBytesCallback)(void *info, size_t count);
# 185 "/var/include/CoreGraphics/CGDataProvider.h"
struct CGDataProviderCallbacks {
    CGDataProviderGetBytesCallback getBytes;
    CGDataProviderSkipBytesCallback skipBytes;
    CGDataProviderRewindCallback rewind;
    CGDataProviderReleaseInfoCallback releaseProvider;
};
typedef struct CGDataProviderCallbacks CGDataProviderCallbacks;




typedef size_t (*CGDataProviderGetBytesAtOffsetCallback)(void *info,
    void *buffer, size_t offset, size_t count);
# 211 "/var/include/CoreGraphics/CGDataProvider.h"
struct CGDataProviderDirectAccessCallbacks {
    CGDataProviderGetBytePointerCallback getBytePointer;
    CGDataProviderReleaseBytePointerCallback releaseBytePointer;
    CGDataProviderGetBytesAtOffsetCallback getBytes;
    CGDataProviderReleaseInfoCallback releaseProvider;
};
typedef struct CGDataProviderDirectAccessCallbacks
    CGDataProviderDirectAccessCallbacks;




extern CGDataProviderRef CGDataProviderCreate(void *info,
    const CGDataProviderCallbacks *callbacks)
    __attribute__((unavailable));





extern CGDataProviderRef CGDataProviderCreateDirectAccess(void *info,
    size_t size, const CGDataProviderDirectAccessCallbacks *callbacks)
    __attribute__((unavailable));
# 12 "/var/include/CoreGraphics/CGColorSpace.h" 2



enum CGColorRenderingIntent {
    kCGRenderingIntentDefault,
    kCGRenderingIntentAbsoluteColorimetric,
    kCGRenderingIntentRelativeColorimetric,
    kCGRenderingIntentPerceptual,
    kCGRenderingIntentSaturation
};
typedef enum CGColorRenderingIntent CGColorRenderingIntent;



enum CGColorSpaceModel {
    kCGColorSpaceModelUnknown = -1,
    kCGColorSpaceModelMonochrome,
    kCGColorSpaceModelRGB,
    kCGColorSpaceModelCMYK,
    kCGColorSpaceModelLab,
    kCGColorSpaceModelDeviceN,
    kCGColorSpaceModelIndexed,
    kCGColorSpaceModelPattern
};
typedef enum CGColorSpaceModel CGColorSpaceModel;



extern const CFStringRef kCGColorSpaceGenericGray
    __attribute__((unavailable));



extern const CFStringRef kCGColorSpaceGenericRGB
    __attribute__((unavailable));



extern const CFStringRef kCGColorSpaceGenericCMYK
    __attribute__((unavailable));




extern const CFStringRef kCGColorSpaceGenericRGBLinear
    __attribute__((unavailable));





extern const CFStringRef kCGColorSpaceAdobeRGB1998
    __attribute__((unavailable));







extern const CFStringRef kCGColorSpaceSRGB
    __attribute__((unavailable));



extern CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
    ;



extern CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
    ;



extern CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
    ;







extern CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat
    whitePoint[3], const CGFloat blackPoint[3], CGFloat gamma)
    ;
# 109 "/var/include/CoreGraphics/CGColorSpace.h"
extern CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat
    whitePoint[3], const CGFloat blackPoint[3], const CGFloat gamma[3],
    const CGFloat matrix[9])
    ;
# 121 "/var/include/CoreGraphics/CGColorSpace.h"
extern CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat whitePoint[3],
    const CGFloat blackPoint[3], const CGFloat range[4])
    ;
# 138 "/var/include/CoreGraphics/CGColorSpace.h"
extern CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents,
    const CGFloat *range, CGDataProviderRef profile,
    CGColorSpaceRef alternate)
    ;
# 153 "/var/include/CoreGraphics/CGColorSpace.h"
extern CGColorSpaceRef CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace,
    size_t lastIndex, const unsigned char *colorTable)
    ;






extern CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
    ;




extern CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(void *ref)
    __attribute__((unavailable));




extern CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
    ;




extern CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
    ;




extern void CGColorSpaceRelease(CGColorSpaceRef space)
    ;



extern CFTypeID CGColorSpaceGetTypeID(void)
    ;



extern size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
    ;



extern CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
    ;





extern CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
    ;





extern size_t CGColorSpaceGetColorTableCount(CGColorSpaceRef space)
    ;
# 225 "/var/include/CoreGraphics/CGColorSpace.h"
extern void CGColorSpaceGetColorTable(CGColorSpaceRef space, uint8_t *table)
    ;




extern CFDataRef CGColorSpaceCopyICCProfile(CGColorSpaceRef space)
    __attribute__((unavailable));
# 12 "/var/include/CoreGraphics/CGColor.h" 2
# 1 "/var/include/CoreGraphics/CGPattern.h" 1







typedef struct CGPattern *CGPatternRef;


# 1 "/var/include/CoreGraphics/CGContext.h" 1
# 12 "/var/include/CoreGraphics/CGPattern.h" 2
# 27 "/var/include/CoreGraphics/CGPattern.h"
enum CGPatternTiling {
    kCGPatternTilingNoDistortion,
    kCGPatternTilingConstantSpacingMinimalDistortion,
    kCGPatternTilingConstantSpacing
};
typedef enum CGPatternTiling CGPatternTiling;
# 43 "/var/include/CoreGraphics/CGPattern.h"
typedef void (*CGPatternDrawPatternCallback)(void *info, CGContextRef c);
typedef void (*CGPatternReleaseInfoCallback)(void *info);

struct CGPatternCallbacks {
    unsigned int version;
    CGPatternDrawPatternCallback drawPattern;
    CGPatternReleaseInfoCallback releaseInfo;
};
typedef struct CGPatternCallbacks CGPatternCallbacks;



extern CFTypeID CGPatternGetTypeID(void)
    ;



extern CGPatternRef CGPatternCreate(void *info, CGRect bounds,
    CGAffineTransform matrix, CGFloat xStep, CGFloat yStep,
    CGPatternTiling tiling, _Bool isColored,
    const CGPatternCallbacks *callbacks)
    ;





extern CGPatternRef CGPatternRetain(CGPatternRef pattern)
    ;




extern void CGPatternRelease(CGPatternRef pattern)
    ;
# 13 "/var/include/CoreGraphics/CGColor.h" 2





extern CGColorRef CGColorCreate(CGColorSpaceRef space,
    const CGFloat components[])
    ;



extern CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
    __attribute__((unavailable));



extern CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green,
    CGFloat blue, CGFloat alpha)
    __attribute__((unavailable));



extern CGColorRef CGColorCreateGenericCMYK(CGFloat cyan, CGFloat magenta,
    CGFloat yellow, CGFloat black, CGFloat alpha)
    __attribute__((unavailable));
# 46 "/var/include/CoreGraphics/CGColor.h"
extern CGColorRef CGColorGetConstantColor(CFStringRef colorName)
    ;




extern CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space,
    CGPatternRef pattern, const CGFloat components[])
    ;



extern CGColorRef CGColorCreateCopy(CGColorRef color)
    ;



extern CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color,
    CGFloat alpha)
    ;




extern CGColorRef CGColorRetain(CGColorRef color)
    ;




extern void CGColorRelease(CGColorRef color)
    ;



extern _Bool CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
    ;




extern size_t CGColorGetNumberOfComponents(CGColorRef color)
    ;



extern const CGFloat *CGColorGetComponents(CGColorRef color)
    ;



extern CGFloat CGColorGetAlpha(CGColorRef color)
    ;



extern CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
    ;




extern CGPatternRef CGColorGetPattern(CGColorRef color)
    ;



extern CFTypeID CGColorGetTypeID(void)
    ;





extern const CFStringRef kCGColorWhite
    __attribute__((unavailable));

extern const CFStringRef kCGColorBlack
    __attribute__((unavailable));

extern const CFStringRef kCGColorClear
    __attribute__((unavailable));
# 13 "/var/include/CoreGraphics/CGContext.h" 2

# 1 "/var/include/CoreGraphics/CGFont.h" 1
# 10 "/var/include/CoreGraphics/CGFont.h"
typedef struct CGFont *CGFontRef;



typedef unsigned short CGFontIndex;



typedef CGFontIndex CGGlyph;






enum CGFontPostScriptFormat {
    kCGFontPostScriptFormatType1 = 1,
    kCGFontPostScriptFormatType3 = 3,
    kCGFontPostScriptFormatType42 = 42
};
typedef enum CGFontPostScriptFormat CGFontPostScriptFormat;
# 39 "/var/include/CoreGraphics/CGFont.h"
enum {

    kCGFontIndexMax = ((1 << 16) - 2),


    kCGFontIndexInvalid = ((1 << 16) - 1),


    kCGGlyphMax = kCGFontIndexMax
};



extern CFTypeID CGFontGetTypeID(void)
    ;





extern CGFontRef CGFontCreateWithPlatformFont(void *platformFontReference)
    __attribute__((unavailable));




extern CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider)
    ;





extern CGFontRef CGFontCreateWithFontName(CFStringRef name)
    ;
# 83 "/var/include/CoreGraphics/CGFont.h"
extern CGFontRef CGFontCreateCopyWithVariations(CGFontRef font,
    CFDictionaryRef variations)
    ;




extern CGFontRef CGFontRetain(CGFontRef font)
    ;




extern void CGFontRelease(CGFontRef font)
    ;



extern size_t CGFontGetNumberOfGlyphs(CGFontRef font)
    ;



extern int CGFontGetUnitsPerEm(CGFontRef font)
    ;



extern CFStringRef CGFontCopyPostScriptName(CGFontRef font)
    ;



extern CFStringRef CGFontCopyFullName(CGFontRef font)
    ;





extern int CGFontGetAscent(CGFontRef font)
    ;





extern int CGFontGetDescent(CGFontRef font)
    ;





extern int CGFontGetLeading(CGFontRef font)
    ;





extern int CGFontGetCapHeight(CGFontRef font)
    ;





extern int CGFontGetXHeight(CGFontRef font)
    ;





extern CGRect CGFontGetFontBBox(CGFontRef font)
    ;




extern CGFloat CGFontGetItalicAngle(CGFontRef font)
    ;




extern CGFloat CGFontGetStemV(CGFontRef font)
    ;






extern CFArrayRef CGFontCopyVariationAxes(CGFontRef font)
    ;
# 188 "/var/include/CoreGraphics/CGFont.h"
extern CFDictionaryRef CGFontCopyVariations(CGFontRef font)
    ;






extern _Bool CGFontGetGlyphAdvances(CGFontRef font, const CGGlyph glyphs[],
    size_t count, int advances[])
    ;







extern _Bool CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph glyphs[],
    size_t count, CGRect bboxes[])
    ;




extern CGGlyph CGFontGetGlyphWithGlyphName(CGFontRef font, CFStringRef name)
    ;




extern CFStringRef CGFontCopyGlyphNameForGlyph(CGFontRef font,
    CGGlyph glyph) ;




extern _Bool CGFontCanCreatePostScriptSubset(CGFontRef font,
    CGFontPostScriptFormat format)
    ;






extern CFDataRef CGFontCreatePostScriptSubset(CGFontRef font,
    CFStringRef subsetName, CGFontPostScriptFormat format,
    const CGGlyph glyphs[], size_t count, const CGGlyph encoding[256])
    ;




extern CFDataRef CGFontCreatePostScriptEncoding(CGFontRef font,
    const CGGlyph encoding[256])
    ;





extern CFArrayRef CGFontCopyTableTags(CGFontRef font)
    ;




extern CFDataRef CGFontCopyTableForTag(CGFontRef font, uint32_t tag)
    ;







extern const CFStringRef kCGFontVariationAxisName
    ;





extern const CFStringRef kCGFontVariationAxisMinValue
    ;





extern const CFStringRef kCGFontVariationAxisMaxValue
    ;





extern const CFStringRef kCGFontVariationAxisDefaultValue
    ;



enum {
    CGGlyphMin = 0,
    CGGlyphMax = kCGGlyphMax
};
# 15 "/var/include/CoreGraphics/CGContext.h" 2
# 1 "/var/include/CoreGraphics/CGGradient.h" 1
# 10 "/var/include/CoreGraphics/CGGradient.h"
typedef struct CGGradient *CGGradientRef;

enum {
    kCGGradientDrawsBeforeStartLocation = (1 << 0),
    kCGGradientDrawsAfterEndLocation = (1 << 1)
};
typedef uint32_t CGGradientDrawingOptions;
# 34 "/var/include/CoreGraphics/CGGradient.h"
extern CFTypeID CGGradientGetTypeID(void)
    ;
# 50 "/var/include/CoreGraphics/CGGradient.h"
extern CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef
    space, const CGFloat components[], const CGFloat locations[], size_t count)
    ;
# 70 "/var/include/CoreGraphics/CGGradient.h"
extern CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space,
    CFArrayRef colors, const CGFloat locations[])
    ;




extern CGGradientRef CGGradientRetain(CGGradientRef gradient)
    ;




extern void CGGradientRelease(CGGradientRef gradient)
    ;
# 16 "/var/include/CoreGraphics/CGContext.h" 2
# 1 "/var/include/CoreGraphics/CGImage.h" 1







typedef struct CGImage *CGImageRef;





enum CGImageAlphaInfo {
    kCGImageAlphaNone,
    kCGImageAlphaPremultipliedLast,
    kCGImageAlphaPremultipliedFirst,
    kCGImageAlphaLast,
    kCGImageAlphaFirst,
    kCGImageAlphaNoneSkipLast,
    kCGImageAlphaNoneSkipFirst,
    kCGImageAlphaOnly
};
typedef enum CGImageAlphaInfo CGImageAlphaInfo;

enum {
    kCGBitmapAlphaInfoMask = 0x1F,
    kCGBitmapFloatComponents = (1 << 8),

    kCGBitmapByteOrderMask = 0x7000,
    kCGBitmapByteOrderDefault = (0 << 12),
    kCGBitmapByteOrder16Little = (1 << 12),
    kCGBitmapByteOrder32Little = (2 << 12),
    kCGBitmapByteOrder16Big = (3 << 12),
    kCGBitmapByteOrder32Big = (4 << 12)
};
typedef uint32_t CGBitmapInfo;
# 49 "/var/include/CoreGraphics/CGImage.h"
extern CFTypeID CGImageGetTypeID(void)
    ;



extern CGImageRef CGImageCreate(size_t width, size_t height,
    size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow,
    CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider,
    const CGFloat decode[], _Bool shouldInterpolate,
    CGColorRenderingIntent intent)
    ;



extern CGImageRef CGImageMaskCreate(size_t width, size_t height,
    size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow,
    CGDataProviderRef provider, const CGFloat decode[], _Bool shouldInterpolate)
    ;




extern CGImageRef CGImageCreateCopy(CGImageRef image)
    ;



extern CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef
    source, const CGFloat decode[], _Bool shouldInterpolate,
    CGColorRenderingIntent intent)
    ;



extern CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source,
    const CGFloat decode[], _Bool shouldInterpolate,
    CGColorRenderingIntent intent)
    ;
# 109 "/var/include/CoreGraphics/CGImage.h"
extern CGImageRef CGImageCreateWithImageInRect(CGImageRef image,
    CGRect rect) ;
# 138 "/var/include/CoreGraphics/CGImage.h"
extern CGImageRef CGImageCreateWithMask(CGImageRef image, CGImageRef mask)
    ;
# 157 "/var/include/CoreGraphics/CGImage.h"
extern CGImageRef CGImageCreateWithMaskingColors(CGImageRef image,
    const CGFloat components[])
    ;






extern CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image,
    CGColorSpaceRef space) ;



extern CGImageRef CGImageRetain(CGImageRef image)
    ;



extern void CGImageRelease(CGImageRef image)
    ;



extern _Bool CGImageIsMask(CGImageRef image)
    ;



extern size_t CGImageGetWidth(CGImageRef image)
    ;



extern size_t CGImageGetHeight(CGImageRef image)
    ;



extern size_t CGImageGetBitsPerComponent(CGImageRef image)
    ;



extern size_t CGImageGetBitsPerPixel(CGImageRef image)
    ;



extern size_t CGImageGetBytesPerRow(CGImageRef image)
    ;




extern CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
    ;



extern CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
    ;



extern CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
    ;



extern const CGFloat *CGImageGetDecode(CGImageRef image)
    ;



extern _Bool CGImageGetShouldInterpolate(CGImageRef image)
    ;



extern CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
    ;



extern CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
    ;
# 17 "/var/include/CoreGraphics/CGContext.h" 2
# 1 "/var/include/CoreGraphics/CGPath.h" 1







typedef struct CGPath *CGMutablePathRef;
typedef const struct CGPath *CGPathRef;







extern CFTypeID CGPathGetTypeID(void)
    ;



extern CGMutablePathRef CGPathCreateMutable(void)
    ;



extern CGPathRef CGPathCreateCopy(CGPathRef path)
    ;



extern CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
    ;




extern CGPathRef CGPathRetain(CGPathRef path)
    ;




extern void CGPathRelease(CGPathRef path)
    ;



extern _Bool CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
    ;






extern void CGPathMoveToPoint(CGMutablePathRef path,
    const CGAffineTransform *m, CGFloat x, CGFloat y)
    ;





extern void CGPathAddLineToPoint(CGMutablePathRef path,
    const CGAffineTransform *m, CGFloat x, CGFloat y)
    ;





extern void CGPathAddQuadCurveToPoint(CGMutablePathRef path,
    const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
    ;






extern void CGPathAddCurveToPoint(CGMutablePathRef path,
    const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y,
    CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
    ;




extern void CGPathCloseSubpath(CGMutablePathRef path)
    ;






extern void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m,
    CGRect rect) ;





extern void CGPathAddRects(CGMutablePathRef path,
    const CGAffineTransform *m, const CGRect rects[], size_t count)
    ;





extern void CGPathAddLines(CGMutablePathRef path,
    const CGAffineTransform *m, const CGPoint points[], size_t count)
    ;
# 128 "/var/include/CoreGraphics/CGPath.h"
extern void CGPathAddEllipseInRect(CGMutablePathRef path,
    const CGAffineTransform *m, CGRect rect)
    ;
# 142 "/var/include/CoreGraphics/CGPath.h"
extern void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m,
    CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle,
    _Bool clockwise) ;
# 154 "/var/include/CoreGraphics/CGPath.h"
extern void CGPathAddArcToPoint(CGMutablePathRef path,
    const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2,
    CGFloat radius) ;




extern void CGPathAddPath(CGMutablePathRef path1,
    const CGAffineTransform *m, CGPathRef path2)
    ;





extern _Bool CGPathIsEmpty(CGPathRef path)
    ;



extern _Bool CGPathIsRect(CGPathRef path, CGRect *rect)
    ;




extern CGPoint CGPathGetCurrentPoint(CGPathRef path)
    ;






extern CGRect CGPathGetBoundingBox(CGPathRef path)
    ;
# 198 "/var/include/CoreGraphics/CGPath.h"
extern _Bool CGPathContainsPoint(CGPathRef path,
    const CGAffineTransform *m, CGPoint point, _Bool eoFill)
    ;



enum CGPathElementType {
    kCGPathElementMoveToPoint,
    kCGPathElementAddLineToPoint,
    kCGPathElementAddQuadCurveToPoint,
    kCGPathElementAddCurveToPoint,
    kCGPathElementCloseSubpath
};
typedef enum CGPathElementType CGPathElementType;



struct CGPathElement {
    CGPathElementType type;
    CGPoint *points;
};
typedef struct CGPathElement CGPathElement;



typedef void (*CGPathApplierFunction)(void *info,
    const CGPathElement *element);




extern void CGPathApply(CGPathRef path, void *info,
    CGPathApplierFunction function)
    ;
# 18 "/var/include/CoreGraphics/CGContext.h" 2

# 1 "/var/include/CoreGraphics/CGPDFDocument.h" 1







typedef struct CGPDFDocument *CGPDFDocumentRef;



# 1 "/var/include/CoreGraphics/CGPDFPage.h" 1







typedef struct CGPDFPage *CGPDFPageRef;


# 1 "/var/include/CoreGraphics/CGPDFDictionary.h" 1







typedef struct CGPDFDictionary *CGPDFDictionaryRef;

# 1 "/var/include/CoreGraphics/CGPDFArray.h" 1







typedef struct CGPDFArray *CGPDFArrayRef;

# 1 "/var/include/CoreGraphics/CGPDFDictionary.h" 1
# 11 "/var/include/CoreGraphics/CGPDFArray.h" 2
# 1 "/var/include/CoreGraphics/CGPDFObject.h" 1
# 12 "/var/include/CoreGraphics/CGPDFObject.h"
typedef unsigned char CGPDFBoolean;



typedef long int CGPDFInteger;



typedef CGFloat CGPDFReal;



typedef union CGPDFObject *CGPDFObjectRef;



enum CGPDFObjectType {
    kCGPDFObjectTypeNull = 1,
    kCGPDFObjectTypeBoolean,
    kCGPDFObjectTypeInteger,
    kCGPDFObjectTypeReal,
    kCGPDFObjectTypeName,
    kCGPDFObjectTypeString,
    kCGPDFObjectTypeArray,
    kCGPDFObjectTypeDictionary,
    kCGPDFObjectTypeStream
};
typedef enum CGPDFObjectType CGPDFObjectType;



extern CGPDFObjectType CGPDFObjectGetType(CGPDFObjectRef object)
    ;
# 53 "/var/include/CoreGraphics/CGPDFObject.h"
extern _Bool CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type,
    void *value) ;
# 12 "/var/include/CoreGraphics/CGPDFArray.h" 2
# 1 "/var/include/CoreGraphics/CGPDFStream.h" 1







typedef struct CGPDFStream *CGPDFStreamRef;

enum CGPDFDataFormat {
    CGPDFDataFormatRaw, CGPDFDataFormatJPEGEncoded, CGPDFDataFormatJPEG2000
};
typedef enum CGPDFDataFormat CGPDFDataFormat;


# 1 "/var/include/CoreGraphics/CGPDFStream.h" 1
# 17 "/var/include/CoreGraphics/CGPDFStream.h" 2




extern CGPDFDictionaryRef CGPDFStreamGetDictionary(CGPDFStreamRef stream)
    ;



extern CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream,
    CGPDFDataFormat *format)
    ;
# 13 "/var/include/CoreGraphics/CGPDFArray.h" 2
# 1 "/var/include/CoreGraphics/CGPDFString.h" 1







typedef struct CGPDFString *CGPDFStringRef;







extern size_t CGPDFStringGetLength(CGPDFStringRef string)
    ;



extern const unsigned char *CGPDFStringGetBytePtr(CGPDFStringRef string)
    ;





extern CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
    ;




extern CFDateRef CGPDFStringCopyDate(CGPDFStringRef string)
    ;
# 14 "/var/include/CoreGraphics/CGPDFArray.h" 2



extern size_t CGPDFArrayGetCount(CGPDFArrayRef array)
    ;




extern _Bool CGPDFArrayGetObject(CGPDFArrayRef array, size_t index,
    CGPDFObjectRef *value) ;




extern _Bool CGPDFArrayGetNull(CGPDFArrayRef array, size_t index)
    ;




extern _Bool CGPDFArrayGetBoolean(CGPDFArrayRef array, size_t index,
    CGPDFBoolean *value) ;




extern _Bool CGPDFArrayGetInteger(CGPDFArrayRef array, size_t index,
    CGPDFInteger *value) ;





extern _Bool CGPDFArrayGetNumber(CGPDFArrayRef array, size_t index,
    CGPDFReal *value) ;




extern _Bool CGPDFArrayGetName(CGPDFArrayRef array, size_t index,
    const char **value) ;




extern _Bool CGPDFArrayGetString(CGPDFArrayRef array, size_t index,
    CGPDFStringRef *value) ;




extern _Bool CGPDFArrayGetArray(CGPDFArrayRef array, size_t index,
    CGPDFArrayRef *value) ;




extern _Bool CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index,
    CGPDFDictionaryRef *value)
    ;




extern _Bool CGPDFArrayGetStream(CGPDFArrayRef array, size_t index,
    CGPDFStreamRef *value) ;
# 11 "/var/include/CoreGraphics/CGPDFDictionary.h" 2






extern size_t CGPDFDictionaryGetCount(CGPDFDictionaryRef dict)
    ;




extern _Bool CGPDFDictionaryGetObject(CGPDFDictionaryRef dict,
    const char *key, CGPDFObjectRef *value)
    ;





extern _Bool CGPDFDictionaryGetBoolean(CGPDFDictionaryRef dict,
    const char *key, CGPDFBoolean *value)
    ;





extern _Bool CGPDFDictionaryGetInteger(CGPDFDictionaryRef dict,
    const char *key, CGPDFInteger *value)
    ;





extern _Bool CGPDFDictionaryGetNumber(CGPDFDictionaryRef dict,
    const char *key, CGPDFReal *value)
    ;




extern _Bool CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key,
    const char **value) ;




extern _Bool CGPDFDictionaryGetString(CGPDFDictionaryRef dict,
    const char *key, CGPDFStringRef *value)
    ;




extern _Bool CGPDFDictionaryGetArray(CGPDFDictionaryRef dict,
    const char *key, CGPDFArrayRef *value)
    ;





extern _Bool CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict,
    const char *key, CGPDFDictionaryRef *value)
    ;




extern _Bool CGPDFDictionaryGetStream(CGPDFDictionaryRef dict,
    const char *key, CGPDFStreamRef *value)
    ;





typedef void (*CGPDFDictionaryApplierFunction)(const char *key,
    CGPDFObjectRef value, void *info);





extern void CGPDFDictionaryApplyFunction(CGPDFDictionaryRef dict,
    CGPDFDictionaryApplierFunction function, void *info)
    ;
# 12 "/var/include/CoreGraphics/CGPDFPage.h" 2
# 1 "/var/include/CoreGraphics/CGPDFDocument.h" 1
# 13 "/var/include/CoreGraphics/CGPDFPage.h" 2

enum CGPDFBox {
    kCGPDFMediaBox = 0,
    kCGPDFCropBox = 1,
    kCGPDFBleedBox = 2,
    kCGPDFTrimBox = 3,
    kCGPDFArtBox = 4
};
typedef enum CGPDFBox CGPDFBox;




extern CGPDFPageRef CGPDFPageRetain(CGPDFPageRef page)
    ;




extern void CGPDFPageRelease(CGPDFPageRef page)
    ;



extern CGPDFDocumentRef CGPDFPageGetDocument(CGPDFPageRef page)
    ;



extern size_t CGPDFPageGetPageNumber(CGPDFPageRef page)
    ;





extern CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
    ;




extern int CGPDFPageGetRotationAngle(CGPDFPageRef page)
    ;
# 71 "/var/include/CoreGraphics/CGPDFPage.h"
extern CGAffineTransform CGPDFPageGetDrawingTransform(CGPDFPageRef page,
    CGPDFBox box, CGRect rect, int rotate, _Bool preserveAspectRatio)
    ;



extern CGPDFDictionaryRef CGPDFPageGetDictionary(CGPDFPageRef page)
    ;



extern CFTypeID CGPDFPageGetTypeID(void)
    ;
# 13 "/var/include/CoreGraphics/CGPDFDocument.h" 2




extern CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef
    provider) ;



extern CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
    ;




extern CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
    ;




extern void CGPDFDocumentRelease(CGPDFDocumentRef document)
    ;



extern void CGPDFDocumentGetVersion(CGPDFDocumentRef document,
    int *majorVersion, int *minorVersion)
    ;






extern _Bool CGPDFDocumentIsEncrypted(CGPDFDocumentRef document)
    ;





extern _Bool CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document,
    const char *password) ;





extern _Bool CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
    ;






extern _Bool CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
    ;






extern _Bool CGPDFDocumentAllowsCopying(CGPDFDocumentRef document)
    ;



extern size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
    ;




extern CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document,
    size_t pageNumber) ;



extern CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
    ;



extern CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDocumentRef document)
    ;



extern CGPDFArrayRef CGPDFDocumentGetID(CGPDFDocumentRef document)
    ;



extern CFTypeID CGPDFDocumentGetTypeID(void)
    ;





extern CGRect CGPDFDocumentGetMediaBox(CGPDFDocumentRef document, int page)
    __attribute__((unavailable));




extern CGRect CGPDFDocumentGetCropBox(CGPDFDocumentRef document, int page)
    __attribute__((unavailable));




extern CGRect CGPDFDocumentGetBleedBox(CGPDFDocumentRef document, int page)
    __attribute__((unavailable));




extern CGRect CGPDFDocumentGetTrimBox(CGPDFDocumentRef document, int page)
    __attribute__((unavailable));




extern CGRect CGPDFDocumentGetArtBox(CGPDFDocumentRef document, int page)
    __attribute__((unavailable));





extern int CGPDFDocumentGetRotationAngle(CGPDFDocumentRef document,
    int page) __attribute__((unavailable));
# 20 "/var/include/CoreGraphics/CGContext.h" 2
# 1 "/var/include/CoreGraphics/CGShading.h" 1
# 10 "/var/include/CoreGraphics/CGShading.h"
# 1 "/var/include/CoreGraphics/CGFunction.h" 1
# 12 "/var/include/CoreGraphics/CGFunction.h"
typedef struct CGFunction *CGFunctionRef;
# 21 "/var/include/CoreGraphics/CGFunction.h"
typedef void (*CGFunctionEvaluateCallback)(void *info, const CGFloat *in,
    CGFloat *out);




typedef void (*CGFunctionReleaseInfoCallback)(void *info);
# 38 "/var/include/CoreGraphics/CGFunction.h"
struct CGFunctionCallbacks {
    unsigned int version;
    CGFunctionEvaluateCallback evaluate;
    CGFunctionReleaseInfoCallback releaseInfo;
};
typedef struct CGFunctionCallbacks CGFunctionCallbacks;



extern CFTypeID CGFunctionGetTypeID(void)
    ;
# 76 "/var/include/CoreGraphics/CGFunction.h"
extern CGFunctionRef CGFunctionCreate(void *info, size_t domainDimension,
    const CGFloat *domain, size_t rangeDimension, const CGFloat *range,
    const CGFunctionCallbacks *callbacks)
    ;




extern CGFunctionRef CGFunctionRetain(CGFunctionRef function)
    ;




extern void CGFunctionRelease(CGFunctionRef function)
    ;
# 11 "/var/include/CoreGraphics/CGShading.h" 2



typedef struct CGShading *CGShadingRef;



extern CFTypeID CGShadingGetTypeID(void)
    ;
# 36 "/var/include/CoreGraphics/CGShading.h"
extern CGShadingRef CGShadingCreateAxial(CGColorSpaceRef space,
    CGPoint start, CGPoint end, CGFunctionRef function, _Bool extendStart,
    _Bool extendEnd) ;
# 55 "/var/include/CoreGraphics/CGShading.h"
extern CGShadingRef CGShadingCreateRadial(CGColorSpaceRef space,
    CGPoint start, CGFloat startRadius, CGPoint end, CGFloat endRadius,
    CGFunctionRef function, _Bool extendStart, _Bool extendEnd)
    ;




extern CGShadingRef CGShadingRetain(CGShadingRef shading)
    ;




extern void CGShadingRelease(CGShadingRef shading)
    ;
# 21 "/var/include/CoreGraphics/CGContext.h" 2



enum CGLineJoin {
    kCGLineJoinMiter,
    kCGLineJoinRound,
    kCGLineJoinBevel
};
typedef enum CGLineJoin CGLineJoin;



enum CGLineCap {
    kCGLineCapButt,
    kCGLineCapRound,
    kCGLineCapSquare
};
typedef enum CGLineCap CGLineCap;



enum CGPathDrawingMode {
    kCGPathFill,
    kCGPathEOFill,
    kCGPathStroke,
    kCGPathFillStroke,
    kCGPathEOFillStroke
};
typedef enum CGPathDrawingMode CGPathDrawingMode;



enum CGTextDrawingMode {
    kCGTextFill,
    kCGTextStroke,
    kCGTextFillStroke,
    kCGTextInvisible,
    kCGTextFillClip,
    kCGTextStrokeClip,
    kCGTextFillStrokeClip,
    kCGTextClip
};
typedef enum CGTextDrawingMode CGTextDrawingMode;



enum CGTextEncoding {
    kCGEncodingFontSpecific,
    kCGEncodingMacRoman
};
typedef enum CGTextEncoding CGTextEncoding;



enum CGInterpolationQuality {
    kCGInterpolationDefault,
    kCGInterpolationNone,
    kCGInterpolationLow,
    kCGInterpolationHigh
};
typedef enum CGInterpolationQuality CGInterpolationQuality;
# 96 "/var/include/CoreGraphics/CGContext.h"
enum CGBlendMode {

    kCGBlendModeNormal,
    kCGBlendModeMultiply,
    kCGBlendModeScreen,
    kCGBlendModeOverlay,
    kCGBlendModeDarken,
    kCGBlendModeLighten,
    kCGBlendModeColorDodge,
    kCGBlendModeColorBurn,
    kCGBlendModeSoftLight,
    kCGBlendModeHardLight,
    kCGBlendModeDifference,
    kCGBlendModeExclusion,
    kCGBlendModeHue,
    kCGBlendModeSaturation,
    kCGBlendModeColor,
    kCGBlendModeLuminosity,
# 126 "/var/include/CoreGraphics/CGContext.h"
    kCGBlendModeClear,
    kCGBlendModeCopy,
    kCGBlendModeSourceIn,
    kCGBlendModeSourceOut,
    kCGBlendModeSourceAtop,
    kCGBlendModeDestinationOver,
    kCGBlendModeDestinationIn,
    kCGBlendModeDestinationOut,
    kCGBlendModeDestinationAtop,
    kCGBlendModeXOR,
    kCGBlendModePlusDarker,
    kCGBlendModePlusLighter
};
typedef enum CGBlendMode CGBlendMode;



extern CFTypeID CGContextGetTypeID(void)
    ;







extern void CGContextSaveGState(CGContextRef c)
    ;




extern void CGContextRestoreGState(CGContextRef c)
    ;






extern void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
    ;




extern void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
    ;




extern void CGContextRotateCTM(CGContextRef c, CGFloat angle)
    ;




extern void CGContextConcatCTM(CGContextRef c, CGAffineTransform transform)
    ;



extern CGAffineTransform CGContextGetCTM(CGContextRef c)
    ;





extern void CGContextSetLineWidth(CGContextRef c, CGFloat width)
    ;



extern void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
    ;



extern void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
    ;



extern void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
    ;



extern void CGContextSetLineDash(CGContextRef c, CGFloat phase,
    const CGFloat lengths[], size_t count)
    ;




extern void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
    ;



extern void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
    ;



extern void CGContextSetBlendMode(CGContextRef context, CGBlendMode mode)
    ;
# 243 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextBeginPath(CGContextRef c)
    ;



extern void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
    ;



extern void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
    ;




extern void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x,
    CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
    ;




extern void CGContextAddQuadCurveToPoint(CGContextRef c, CGFloat cpx,
    CGFloat cpy, CGFloat x, CGFloat y)
    ;



extern void CGContextClosePath(CGContextRef c)
    ;





extern void CGContextAddRect(CGContextRef c, CGRect rect)
    ;



extern void CGContextAddRects(CGContextRef c, const CGRect rects[],
    size_t count) ;



extern void CGContextAddLines(CGContextRef c, const CGPoint points[],
    size_t count) ;





extern void CGContextAddEllipseInRect(CGContextRef context, CGRect rect)
    ;
# 306 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y,
    CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
    ;






extern void CGContextAddArcToPoint(CGContextRef c, CGFloat x1, CGFloat y1,
    CGFloat x2, CGFloat y2, CGFloat radius)
    ;




extern void CGContextAddPath(CGContextRef context, CGPathRef path)
    ;
# 335 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextReplacePathWithStrokedPath(CGContextRef c)
    ;






extern _Bool CGContextIsPathEmpty(CGContextRef c)
    ;



extern CGPoint CGContextGetPathCurrentPoint(CGContextRef c)
    ;





extern CGRect CGContextGetPathBoundingBox(CGContextRef c)
    ;






extern _Bool CGContextPathContainsPoint(CGContextRef context, CGPoint point,
    CGPathDrawingMode mode) ;





extern void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
    ;






extern void CGContextFillPath(CGContextRef c)
    ;




extern void CGContextEOFillPath(CGContextRef c)
    ;



extern void CGContextStrokePath(CGContextRef c)
    ;



extern void CGContextFillRect(CGContextRef c, CGRect rect)
    ;




extern void CGContextFillRects(CGContextRef c, const CGRect rects[],
    size_t count) ;



extern void CGContextStrokeRect(CGContextRef c, CGRect rect)
    ;




extern void CGContextStrokeRectWithWidth(CGContextRef c, CGRect rect,
    CGFloat width) ;



extern void CGContextClearRect(CGContextRef c, CGRect rect)
    ;



extern void CGContextFillEllipseInRect(CGContextRef context, CGRect rect)
    ;



extern void CGContextStrokeEllipseInRect(CGContextRef context, CGRect rect)
    ;
# 440 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextStrokeLineSegments(CGContextRef c,
    const CGPoint points[], size_t count)
    ;







extern void CGContextClip(CGContextRef c)
    ;





extern void CGContextEOClip(CGContextRef c)
    ;
# 487 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextClipToMask(CGContextRef c, CGRect rect,
    CGImageRef mask) ;





extern CGRect CGContextGetClipBoundingBox(CGContextRef c)
    ;






extern void CGContextClipToRect(CGContextRef c, CGRect rect)
    ;





extern void CGContextClipToRects(CGContextRef c, const CGRect rects[],
    size_t count) ;





extern void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
    ;



extern void CGContextSetStrokeColorWithColor(CGContextRef c,
    CGColorRef color) ;







extern void CGContextSetFillColorSpace(CGContextRef context,
    CGColorSpaceRef space) ;





extern void CGContextSetStrokeColorSpace(CGContextRef context,
    CGColorSpaceRef space) ;
# 548 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextSetFillColor(CGContextRef context,
    const CGFloat components[])
    ;







extern void CGContextSetStrokeColor(CGContextRef context,
    const CGFloat components[])
    ;
# 571 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextSetFillPattern(CGContextRef context,
    CGPatternRef pattern, const CGFloat components[])
    ;
# 582 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextSetStrokePattern(CGContextRef context,
    CGPatternRef pattern, const CGFloat components[])
    ;




extern void CGContextSetPatternPhase(CGContextRef context, CGSize phase)
    ;






extern void CGContextSetGrayFillColor(CGContextRef context, CGFloat gray,
    CGFloat alpha) ;




extern void CGContextSetGrayStrokeColor(CGContextRef context, CGFloat gray,
    CGFloat alpha) ;




extern void CGContextSetRGBFillColor(CGContextRef context, CGFloat red,
    CGFloat green, CGFloat blue, CGFloat alpha)
    ;





extern void CGContextSetRGBStrokeColor(CGContextRef context, CGFloat red,
    CGFloat green, CGFloat blue, CGFloat alpha)
    ;





extern void CGContextSetCMYKFillColor(CGContextRef context, CGFloat cyan,
    CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha)
    ;





extern void CGContextSetCMYKStrokeColor(CGContextRef context, CGFloat cyan,
    CGFloat magenta, CGFloat yellow, CGFloat black, CGFloat alpha)
    ;






extern void CGContextSetRenderingIntent(CGContextRef context,
    CGColorRenderingIntent intent)
    ;






extern void CGContextDrawImage(CGContextRef c, CGRect rect,
    CGImageRef image) ;
# 661 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextDrawTiledImage(CGContextRef c, CGRect rect,
    CGImageRef image) ;







extern CGInterpolationQuality CGContextGetInterpolationQuality(CGContextRef
    context) ;



extern void CGContextSetInterpolationQuality(CGContextRef context,
    CGInterpolationQuality quality)
    ;
# 690 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextSetShadowWithColor(CGContextRef context, CGSize offset,
    CGFloat blur, CGColorRef color)
    ;






extern void CGContextSetShadow(CGContextRef context, CGSize offset,
    CGFloat blur) ;
# 711 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextDrawLinearGradient(CGContextRef context,
    CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint,
    CGGradientDrawingOptions options)
    ;
# 725 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextDrawRadialGradient(CGContextRef context,
    CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius,
    CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
    ;



extern void CGContextDrawShading(CGContextRef context, CGShadingRef shading)
    ;







extern void CGContextSetCharacterSpacing(CGContextRef context,
    CGFloat spacing) ;




extern void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
    ;



extern CGPoint CGContextGetTextPosition(CGContextRef context)
    ;



extern void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform t)
    ;



extern CGAffineTransform CGContextGetTextMatrix(CGContextRef c)
    ;




extern void CGContextSetTextDrawingMode(CGContextRef c,
    CGTextDrawingMode mode) ;




extern void CGContextSetFont(CGContextRef c, CGFontRef font)
    ;




extern void CGContextSetFontSize(CGContextRef c, CGFloat size)
    ;






extern void CGContextSelectFont(CGContextRef c, const char *name,
    CGFloat size, CGTextEncoding textEncoding)
    ;





extern void CGContextShowGlyphsAtPositions(CGContextRef context,
    const CGGlyph glyphs[], const CGPoint positions[], size_t count)
    ;
# 807 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextShowText(CGContextRef c, const char *string,
    size_t length) ;






extern void CGContextShowTextAtPoint(CGContextRef c, CGFloat x, CGFloat y,
    const char *string, size_t length)
    ;




extern void CGContextShowGlyphs(CGContextRef c, const CGGlyph g[],
    size_t count) ;




extern void CGContextShowGlyphsAtPoint(CGContextRef context, CGFloat x,
    CGFloat y, const CGGlyph glyphs[], size_t count)
    ;






extern void CGContextShowGlyphsWithAdvances(CGContextRef c,
    const CGGlyph glyphs[], const CGSize advances[], size_t count)
    ;





extern void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
    ;







extern void CGContextDrawPDFDocument(CGContextRef c, CGRect rect,
    CGPDFDocumentRef document, int page)
    __attribute__((unavailable));






extern void CGContextBeginPage(CGContextRef c, const CGRect *mediaBox)
    ;



extern void CGContextEndPage(CGContextRef c)
    ;





extern CGContextRef CGContextRetain(CGContextRef c)
    ;



extern void CGContextRelease(CGContextRef c)
    ;



extern void CGContextFlush(CGContextRef c)
    ;



extern void CGContextSynchronize(CGContextRef c)
    ;






extern void CGContextSetShouldAntialias(CGContextRef c,
    _Bool shouldAntialias) ;






extern void CGContextSetAllowsAntialiasing(CGContextRef context,
    _Bool allowsAntialiasing)
    ;
# 917 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextSetShouldSmoothFonts(CGContextRef c,
    _Bool shouldSmoothFonts) ;
# 938 "/var/include/CoreGraphics/CGContext.h"
extern void CGContextBeginTransparencyLayer(CGContextRef context,
    CFDictionaryRef auxiliaryInfo)
    ;





extern void CGContextBeginTransparencyLayerWithRect(CGContextRef context,
    CGRect rect, CFDictionaryRef auxiliaryInfo)
    ;



extern void CGContextEndTransparencyLayer(CGContextRef context)
    ;






extern CGAffineTransform
    CGContextGetUserSpaceToDeviceSpaceTransform(CGContextRef context)
    ;



extern CGPoint CGContextConvertPointToDeviceSpace(CGContextRef context,
    CGPoint point) ;



extern CGPoint CGContextConvertPointToUserSpace(CGContextRef context,
    CGPoint point) ;



extern CGSize CGContextConvertSizeToDeviceSpace(CGContextRef context,
    CGSize size) ;



extern CGSize CGContextConvertSizeToUserSpace(CGContextRef context,
    CGSize size) ;






extern CGRect CGContextConvertRectToDeviceSpace(CGContextRef context,
    CGRect rect) ;






extern CGRect CGContextConvertRectToUserSpace(CGContextRef context,
    CGRect rect) ;
# 10 "/var/include/CoreGraphics/CGBitmapContext.h" 2
# 25 "/var/include/CoreGraphics/CGBitmapContext.h"
extern CGContextRef CGBitmapContextCreate(void *data, size_t width,
    size_t height, size_t bitsPerComponent, size_t bytesPerRow,
    CGColorSpaceRef colorspace, CGBitmapInfo bitmapInfo)
    ;




extern void *CGBitmapContextGetData(CGContextRef c)
    ;




extern size_t CGBitmapContextGetWidth(CGContextRef c)
    ;




extern size_t CGBitmapContextGetHeight(CGContextRef c)
    ;




extern size_t CGBitmapContextGetBitsPerComponent(CGContextRef c)
    ;




extern size_t CGBitmapContextGetBitsPerPixel(CGContextRef c)
    ;




extern size_t CGBitmapContextGetBytesPerRow(CGContextRef c)
    ;




extern CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef c)
    ;




extern CGImageAlphaInfo CGBitmapContextGetAlphaInfo(CGContextRef c)
    ;




extern CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef c)
    ;
# 97 "/var/include/CoreGraphics/CGBitmapContext.h"
extern CGImageRef CGBitmapContextCreateImage(CGContextRef c)
    ;
# 12 "/var/include/CoreGraphics/CoreGraphics.h" 2



# 1 "/var/include/CoreGraphics/CGDataConsumer.h" 1







typedef struct CGDataConsumer *CGDataConsumerRef;



# 1 "/var/include/stddef.h" 1
# 13 "/var/include/CoreGraphics/CGDataConsumer.h" 2




typedef size_t (*CGDataConsumerPutBytesCallback)(void *info,
    const void *buffer, size_t count);




typedef void (*CGDataConsumerReleaseInfoCallback)(void *info);







struct CGDataConsumerCallbacks {
    CGDataConsumerPutBytesCallback putBytes;
    CGDataConsumerReleaseInfoCallback releaseConsumer;
};
typedef struct CGDataConsumerCallbacks CGDataConsumerCallbacks;



extern CFTypeID CGDataConsumerGetTypeID(void)
    ;




extern CGDataConsumerRef CGDataConsumerCreate(void *info,
    const CGDataConsumerCallbacks *callbacks)
    ;



extern CGDataConsumerRef CGDataConsumerCreateWithURL(CFURLRef url)
    ;



extern CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef
    data) ;



extern CGDataConsumerRef CGDataConsumerRetain(CGDataConsumerRef consumer)
    ;



extern void CGDataConsumerRelease(CGDataConsumerRef consumer)
    ;
# 16 "/var/include/CoreGraphics/CoreGraphics.h" 2

# 1 "/var/include/CoreGraphics/CGError.h" 1
# 12 "/var/include/CoreGraphics/CGError.h"
enum _CGError {
    kCGErrorSuccess = 0,
    kCGErrorFirst = 1000,
    kCGErrorFailure = kCGErrorFirst,
    kCGErrorIllegalArgument = 1001,
    kCGErrorInvalidConnection = 1002,
    kCGErrorInvalidContext = 1003,
    kCGErrorCannotComplete = 1004,
    kCGErrorNameTooLong = 1005,
    kCGErrorNotImplemented = 1006,
    kCGErrorRangeCheck = 1007,
    kCGErrorTypeCheck = 1008,
    kCGErrorNoCurrentPoint = 1009,
    kCGErrorInvalidOperation = 1010,
    kCGErrorNoneAvailable = 1011,


 kCGErrorApplicationRequiresNewerSystem = 1015,



 kCGErrorApplicationNotPermittedToExecute = 1016,


 kCGErrorApplicationIncorrectExecutableFormatFound = 1023,



 kCGErrorApplicationIsLaunching = 1024,




 kCGErrorApplicationAlreadyRunning = 1025,



 kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime = 1026,



 kCGErrorClassicApplicationsMustBeLaunchedByClassic = 1027,




 kCGErrorForkFailed = 1028,


 kCGErrorRetryRegistration = 1029,



    kCGErrorLast = kCGErrorRetryRegistration
};
typedef int32_t CGError;
# 18 "/var/include/CoreGraphics/CoreGraphics.h" 2





# 1 "/var/include/CoreGraphics/CGLayer.h" 1







typedef struct CGLayer *CGLayerRef;
# 18 "/var/include/CoreGraphics/CGLayer.h"
extern CGLayerRef CGLayerCreateWithContext(CGContextRef context,
    CGSize size, CFDictionaryRef auxiliaryInfo)
    ;




extern CGLayerRef CGLayerRetain(CGLayerRef layer)
    ;




extern void CGLayerRelease(CGLayerRef layer)
    ;



extern CGSize CGLayerGetSize(CGLayerRef layer)
    ;



extern CGContextRef CGLayerGetContext(CGLayerRef layer)
    ;





extern void CGContextDrawLayerInRect(CGContextRef context, CGRect rect,
    CGLayerRef layer) ;





extern void CGContextDrawLayerAtPoint(CGContextRef context, CGPoint point,
    CGLayerRef layer) ;



extern CFTypeID CGLayerGetTypeID(void)
    ;
# 24 "/var/include/CoreGraphics/CoreGraphics.h" 2

# 1 "/var/include/CoreGraphics/CGPDFContentStream.h" 1







typedef struct CGPDFContentStream *CGPDFContentStreamRef;





extern CGPDFContentStreamRef CGPDFContentStreamCreateWithPage(CGPDFPageRef
    page) ;



extern CGPDFContentStreamRef CGPDFContentStreamCreateWithStream
    (CGPDFStreamRef stream, CGPDFDictionaryRef streamResources,
 CGPDFContentStreamRef parent)
    ;



extern CGPDFContentStreamRef CGPDFContentStreamRetain(CGPDFContentStreamRef
    cs) ;



extern void CGPDFContentStreamRelease(CGPDFContentStreamRef cs)
    ;




extern CFArrayRef CGPDFContentStreamGetStreams(CGPDFContentStreamRef cs)
    ;




extern CGPDFObjectRef CGPDFContentStreamGetResource(CGPDFContentStreamRef
    cs, const char *category, const char *name)
    ;
# 26 "/var/include/CoreGraphics/CoreGraphics.h" 2
# 1 "/var/include/CoreGraphics/CGPDFContext.h" 1
# 21 "/var/include/CoreGraphics/CGPDFContext.h"
extern CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer,
    const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
    ;





extern CGContextRef CGPDFContextCreateWithURL(CFURLRef url,
    const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
    ;






extern void CGPDFContextClose(CGContextRef context)
    ;



extern void CGPDFContextBeginPage(CGContextRef context,
    CFDictionaryRef pageInfo)
    ;



extern void CGPDFContextEndPage(CGContextRef context)
    ;




extern void CGPDFContextSetURLForRect(CGContextRef context, CFURLRef url,
    CGRect rect) ;




extern void CGPDFContextAddDestinationAtPoint(CGContextRef context,
    CFStringRef name, CGPoint point)
    ;




extern void CGPDFContextSetDestinationForRect(CGContextRef context,
    CFStringRef name, CGRect rect)
    ;







extern const CFStringRef kCGPDFContextMediaBox
    ;





extern const CFStringRef kCGPDFContextCropBox
    ;





extern const CFStringRef kCGPDFContextBleedBox
    ;





extern const CFStringRef kCGPDFContextTrimBox
    ;





extern const CFStringRef kCGPDFContextArtBox
    ;






extern const CFStringRef kCGPDFContextTitle
    ;




extern const CFStringRef kCGPDFContextAuthor
    ;




extern const CFStringRef kCGPDFContextSubject
    ;
# 139 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextKeywords
    ;





extern const CFStringRef kCGPDFContextCreator
    ;
# 159 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextOwnerPassword
    ;
# 171 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextUserPassword
    ;
# 181 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextEncryptionKeyLength
    ;





extern const CFStringRef kCGPDFContextAllowsPrinting
    ;





extern const CFStringRef kCGPDFContextAllowsCopying
    ;
# 205 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextOutputIntent
    __attribute__((unavailable));







extern const CFStringRef kCGPDFXOutputIntentSubtype
    __attribute__((unavailable));







extern const CFStringRef kCGPDFXOutputConditionIdentifier
    __attribute__((unavailable));






extern const CFStringRef kCGPDFXOutputCondition
    __attribute__((unavailable));







extern const CFStringRef kCGPDFXRegistryName
    __attribute__((unavailable));
# 250 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFXInfo
    __attribute__((unavailable));
# 260 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFXDestinationOutputProfile
    __attribute__((unavailable));
# 273 "/var/include/CoreGraphics/CGPDFContext.h"
extern const CFStringRef kCGPDFContextOutputIntents
    __attribute__((unavailable));
# 27 "/var/include/CoreGraphics/CoreGraphics.h" 2



# 1 "/var/include/CoreGraphics/CGPDFOperatorTable.h" 1







typedef struct CGPDFOperatorTable *CGPDFOperatorTableRef;

# 1 "/var/include/CoreGraphics/CGPDFScanner.h" 1







typedef struct CGPDFScanner *CGPDFScannerRef;


# 1 "/var/include/CoreGraphics/CGPDFOperatorTable.h" 1
# 12 "/var/include/CoreGraphics/CGPDFScanner.h" 2



extern CGPDFScannerRef CGPDFScannerCreate(CGPDFContentStreamRef cs,
    CGPDFOperatorTableRef table, void *info)
    ;



extern CGPDFScannerRef CGPDFScannerRetain(CGPDFScannerRef scanner)
    ;



extern void CGPDFScannerRelease(CGPDFScannerRef scanner)
    ;





extern _Bool CGPDFScannerScan(CGPDFScannerRef scanner)
    ;



extern CGPDFContentStreamRef CGPDFScannerGetContentStream(CGPDFScannerRef
    scanner) ;



extern _Bool CGPDFScannerPopObject(CGPDFScannerRef scanner,
    CGPDFObjectRef *value) ;




extern _Bool CGPDFScannerPopBoolean(CGPDFScannerRef scanner,
    CGPDFBoolean *value) ;




extern _Bool CGPDFScannerPopInteger(CGPDFScannerRef scanner,
    CGPDFInteger *value) ;




extern _Bool CGPDFScannerPopNumber(CGPDFScannerRef scanner, CGPDFReal *value)
    ;




extern _Bool CGPDFScannerPopName(CGPDFScannerRef scanner, const char **value)
    ;




extern _Bool CGPDFScannerPopString(CGPDFScannerRef scanner,
    CGPDFStringRef *value) ;




extern _Bool CGPDFScannerPopArray(CGPDFScannerRef scanner,
    CGPDFArrayRef *value) ;





extern _Bool CGPDFScannerPopDictionary(CGPDFScannerRef scanner,
    CGPDFDictionaryRef *value)
    ;




extern _Bool CGPDFScannerPopStream(CGPDFScannerRef scanner,
    CGPDFStreamRef *value) ;
# 11 "/var/include/CoreGraphics/CGPDFOperatorTable.h" 2

typedef void (*CGPDFOperatorCallback)(CGPDFScannerRef scanner, void *info);



extern CGPDFOperatorTableRef CGPDFOperatorTableCreate(void)
    ;



extern CGPDFOperatorTableRef CGPDFOperatorTableRetain(CGPDFOperatorTableRef
    table) ;



extern void CGPDFOperatorTableRelease(CGPDFOperatorTableRef table)
    ;



extern void CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef table,
    const char *name, CGPDFOperatorCallback callback)
    ;
# 31 "/var/include/CoreGraphics/CoreGraphics.h" 2
# 11 "/var/include/UIKit/UIAccessibility.h" 2


# 1 "/var/include/UIKit/UIAccessibilityConstants.h" 1
# 27 "/var/include/UIKit/UIAccessibilityConstants.h"
typedef uint64_t UIAccessibilityTraits;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitNone;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitButton;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitLink;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitSearchField;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitImage;





extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitSelected;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitPlaysSound;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitKeyboardKey;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitStaticText;







extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitSummaryElement;


extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitNotEnabled;





extern __attribute__((visibility ("default"))) UIAccessibilityTraits UIAccessibilityTraitUpdatesFrequently;
# 84 "/var/include/UIKit/UIAccessibilityConstants.h"
typedef uint32_t UIAccessibilityNotifications;





extern __attribute__((visibility ("default"))) UIAccessibilityNotifications UIAccessibilityScreenChangedNotification;






extern __attribute__((visibility ("default"))) UIAccessibilityNotifications UIAccessibilityLayoutChangedNotification;
# 14 "/var/include/UIKit/UIAccessibility.h" 2
# 1 "/var/include/UIKit/UIAccessibilityElement.h" 1
# 21 "/var/include/UIKit/UIAccessibilityElement.h"
__attribute__((visibility("default"))) @interface UIAccessibilityElement : NSObject
{
@private
    id _storage;
}


- (id)initWithAccessibilityContainer:(id)container;

@property (nonatomic, assign) id accessibilityContainer;
@property (nonatomic, assign) BOOL isAccessibilityElement;
@property (nonatomic, retain) NSString *accessibilityLabel;
@property (nonatomic, retain) NSString *accessibilityHint;
@property (nonatomic, retain) NSString *accessibilityValue;
@property (nonatomic, assign) CGRect accessibilityFrame;
@property (nonatomic, assign) UIAccessibilityTraits accessibilityTraits;

@end
# 15 "/var/include/UIKit/UIAccessibility.h" 2
# 31 "/var/include/UIKit/UIAccessibility.h"
@interface NSObject (UIAccessibility)







- (BOOL)isAccessibilityElement;
- (void)setIsAccessibilityElement:(BOOL)isElement;
# 52 "/var/include/UIKit/UIAccessibility.h"
- (NSString *)accessibilityLabel;
- (void)setAccessibilityLabel:(NSString *)label;
# 62 "/var/include/UIKit/UIAccessibility.h"
- (NSString *)accessibilityHint;
- (void)setAccessibilityHint:(NSString *)hint;
# 73 "/var/include/UIKit/UIAccessibility.h"
- (NSString *)accessibilityValue;
- (void)setAccessibilityValue:(NSString *)value;
# 86 "/var/include/UIKit/UIAccessibility.h"
- (UIAccessibilityTraits)accessibilityTraits;
- (void)setAccessibilityTraits:(UIAccessibilityTraits)traits;







- (CGRect)accessibilityFrame;
- (void)setAccessibilityFrame:(CGRect)frame;

@end
# 117 "/var/include/UIKit/UIAccessibility.h"
@interface NSObject (UIAccessibilityContainer)





- (NSInteger)accessibilityElementCount;





- (id)accessibilityElementAtIndex:(NSInteger)index;





- (NSInteger)indexOfAccessibilityElement:(id)element;

@end
# 148 "/var/include/UIKit/UIAccessibility.h"
extern __attribute__((visibility ("default"))) void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument);
# 11 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIActivityIndicatorView.h" 1







# 1 "/var/include/UIKit/UIView.h" 1
# 9 "/var/include/UIKit/UIView.h"
# 1 "/var/include/UIKit/UIResponder.h" 1
# 10 "/var/include/UIKit/UIResponder.h"
# 1 "/var/include/UIKit/UIEvent.h" 1
# 12 "/var/include/UIKit/UIEvent.h"
@class UIWindow, UIView;

typedef enum {
    UIEventTypeTouches,
    UIEventTypeMotion,
} UIEventType;

typedef enum {
    UIEventSubtypeNone = 0,
    UIEventSubtypeMotionShake = 1,
} UIEventSubtype;

__attribute__((visibility("default"))) @interface UIEvent : NSObject
{
  @private
    NSTimeInterval _timestamp;
}

@property(nonatomic,readonly) UIEventType type __attribute__((weak_import));
@property(nonatomic,readonly) UIEventSubtype subtype __attribute__((weak_import));

@property(nonatomic,readonly) NSTimeInterval timestamp;

- (NSSet *)allTouches;
- (NSSet *)touchesForWindow:(UIWindow *)window;
- (NSSet *)touchesForView:(UIView *)view;

@end
# 11 "/var/include/UIKit/UIResponder.h" 2

@class UIEvent;

__attribute__((visibility("default"))) @interface UIResponder : NSObject {
}

- (UIResponder*)nextResponder;

- (BOOL)canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;

- (BOOL)canResignFirstResponder;
- (BOOL)resignFirstResponder;

- (BOOL)isFirstResponder;






- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;

- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event __attribute__((weak_import));
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event __attribute__((weak_import));
- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event __attribute__((weak_import));

- (BOOL)canPerformAction:(SEL)action withSender:(id)sender __attribute__((weak_import));
@property(nonatomic,readonly) NSUndoManager *undoManager __attribute__((weak_import));

@end

@interface NSObject(UIResponderStandardEditActions)

- (void)cut:(id)sender __attribute__((weak_import));
- (void)copy:(id)sender __attribute__((weak_import));
- (void)paste:(id)sender __attribute__((weak_import));
- (void)select:(id)sender __attribute__((weak_import));
- (void)selectAll:(id)sender __attribute__((weak_import));

@end
# 10 "/var/include/UIKit/UIView.h" 2
# 1 "/var/include/UIKit/UIInterface.h" 1
# 10 "/var/include/UIKit/UIInterface.h"
# 1 "/var/include/UIKit/UIColor.h" 1
# 12 "/var/include/UIKit/UIColor.h"
@class UIImage;

__attribute__((visibility("default"))) @interface UIColor : NSObject <NSCoding>


+ (UIColor *)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
+ (UIColor *)colorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
+ (UIColor *)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
+ (UIColor *)colorWithCGColor:(CGColorRef)cgColor;
+ (UIColor *)colorWithPatternImage:(UIImage *)image;


- (UIColor *)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha;
- (UIColor *)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
- (UIColor *)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
- (UIColor *)initWithCGColor:(CGColorRef)cgColor;
- (UIColor *)initWithPatternImage:(UIImage*)image;



+ (UIColor *)blackColor;
+ (UIColor *)darkGrayColor;
+ (UIColor *)lightGrayColor;
+ (UIColor *)whiteColor;
+ (UIColor *)grayColor;
+ (UIColor *)redColor;
+ (UIColor *)greenColor;
+ (UIColor *)blueColor;
+ (UIColor *)cyanColor;
+ (UIColor *)yellowColor;
+ (UIColor *)magentaColor;
+ (UIColor *)orangeColor;
+ (UIColor *)purpleColor;
+ (UIColor *)brownColor;
+ (UIColor *)clearColor;


- (void)set;


- (void)setFill;
- (void)setStroke;


- (UIColor *)colorWithAlphaComponent:(CGFloat)alpha;


@property(nonatomic,readonly) CGColorRef CGColor;

@end
# 11 "/var/include/UIKit/UIInterface.h" 2
# 1 "/var/include/UIKit/UIFont.h" 1
# 12 "/var/include/UIKit/UIFont.h"
__attribute__((visibility("default"))) @interface UIFont : NSObject {
}

+ (UIFont *)fontWithName:(NSString *)fontName size:(CGFloat)fontSize;


+ (NSArray *)familyNames;

+ (NSArray *)fontNamesForFamilyName:(NSString *)familyName;


+ (UIFont *)systemFontOfSize:(CGFloat)fontSize;
+ (UIFont *)boldSystemFontOfSize:(CGFloat)fontSize;
+ (UIFont *)italicSystemFontOfSize:(CGFloat)fontSize;


@property(nonatomic,readonly,retain) NSString *familyName;
@property(nonatomic,readonly,retain) NSString *fontName;
@property(nonatomic,readonly) CGFloat pointSize;
@property(nonatomic,readonly) CGFloat ascender;
@property(nonatomic,readonly) CGFloat descender;
@property(nonatomic,readonly) CGFloat leading;
@property(nonatomic,readonly) CGFloat capHeight;
@property(nonatomic,readonly) CGFloat xHeight;


- (UIFont *)fontWithSize:(CGFloat)fontSize;

@end
# 12 "/var/include/UIKit/UIInterface.h" 2



typedef enum {
    UIBarStyleDefault = 0,
    UIBarStyleBlack = 1,

    UIBarStyleBlackOpaque = 1,
    UIBarStyleBlackTranslucent = 2,
} UIBarStyle;



@interface UIColor (UIColorSystemColors)
+ (UIColor *)lightTextColor;
+ (UIColor *)darkTextColor;
+ (UIColor *)groupTableViewBackgroundColor;
+ (UIColor *)viewFlipsideBackgroundColor;
@end



@interface UIFont (UIFontSystemFonts)
+ (CGFloat)labelFontSize;
+ (CGFloat)buttonFontSize;
+ (CGFloat)smallSystemFontSize;
+ (CGFloat)systemFontSize;
@end
# 11 "/var/include/UIKit/UIView.h" 2


typedef enum {
    UIViewAnimationCurveEaseInOut,
    UIViewAnimationCurveEaseIn,
    UIViewAnimationCurveEaseOut,
    UIViewAnimationCurveLinear
} UIViewAnimationCurve;

typedef enum {
    UIViewContentModeScaleToFill,
    UIViewContentModeScaleAspectFit,
    UIViewContentModeScaleAspectFill,
    UIViewContentModeRedraw,
    UIViewContentModeCenter,
    UIViewContentModeTop,
    UIViewContentModeBottom,
    UIViewContentModeLeft,
    UIViewContentModeRight,
    UIViewContentModeTopLeft,
    UIViewContentModeTopRight,
    UIViewContentModeBottomLeft,
    UIViewContentModeBottomRight,
} UIViewContentMode;

typedef enum {
    UIViewAnimationTransitionNone,
    UIViewAnimationTransitionFlipFromLeft,
    UIViewAnimationTransitionFlipFromRight,
    UIViewAnimationTransitionCurlUp,
    UIViewAnimationTransitionCurlDown,
} UIViewAnimationTransition;

enum {
    UIViewAutoresizingNone = 0,
    UIViewAutoresizingFlexibleLeftMargin = 1 << 0,
    UIViewAutoresizingFlexibleWidth = 1 << 1,
    UIViewAutoresizingFlexibleRightMargin = 1 << 2,
    UIViewAutoresizingFlexibleTopMargin = 1 << 3,
    UIViewAutoresizingFlexibleHeight = 1 << 4,
    UIViewAutoresizingFlexibleBottomMargin = 1 << 5
};
typedef NSUInteger UIViewAutoresizing;

@class UIEvent, UIWindow, UIColor, CALayer;

__attribute__((visibility("default"))) @interface UIView : UIResponder<NSCoding> {
  @package
    CALayer *_layer;
    id _tapInfo;
    id _gestureInfo;
    NSMutableArray *_gestureRecognizers;
    float _charge;
    NSInteger _tag;
    struct {
        unsigned int userInteractionDisabled:1;
        unsigned int implementsDrawRect:1;
        unsigned int implementsDidScroll:1;
        unsigned int implementsMouseTracking:1;
        unsigned int hasBackgroundColor:1;
        unsigned int isOpaque:1;
        unsigned int becomeFirstResponderWhenCapable:1;
        unsigned int interceptMouseEvent:1;
        unsigned int deallocating:1;
        unsigned int debugFlash:1;
        unsigned int debugSkippedSetNeedsDisplay:1;
        unsigned int debugScheduledDisplayIsRequired:1;
        unsigned int isInAWindow:1;
        unsigned int isAncestorOfFirstResponder:1;
        unsigned int dontAutoresizeSubviews:1;
        unsigned int autoresizeMask:6;
        unsigned int patternBackground:1;
        unsigned int fixedBackgroundPattern:1;
        unsigned int dontAnimate:1;
        unsigned int superLayerIsView:1;
        unsigned int layerKitPatternDrawing:1;
        unsigned int multipleTouchEnabled:1;
        unsigned int exclusiveTouch:1;
        unsigned int hasViewController:1;
        unsigned int needsDidAppearOrDisappear:1;
        unsigned int gesturesEnabled:1;
        unsigned int capturesDescendantTouches:1;
        unsigned int deliversTouchesForGesturesToSuperview:1;
        unsigned int chargeEnabled:1;
        unsigned int skipsSubviewEnumeration:1;
    } _viewFlags;
}

+ (Class)layerClass;

- (id)initWithFrame:(CGRect)frame;

@property(nonatomic,getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property(nonatomic) NSInteger tag;
@property(nonatomic,readonly,retain) CALayer *layer;

@end

@interface UIView(UIViewGeometry)


@property(nonatomic) CGRect frame;


@property(nonatomic) CGRect bounds;
@property(nonatomic) CGPoint center;
@property(nonatomic) CGAffineTransform transform;

@property(nonatomic,getter=isMultipleTouchEnabled) BOOL multipleTouchEnabled;
@property(nonatomic,getter=isExclusiveTouch) BOOL exclusiveTouch;

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;

- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view;
- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view;
- (CGRect)convertRect:(CGRect)rect toView:(UIView *)view;
- (CGRect)convertRect:(CGRect)rect fromView:(UIView *)view;

@property(nonatomic) BOOL autoresizesSubviews;
@property(nonatomic) UIViewAutoresizing autoresizingMask;

- (CGSize)sizeThatFits:(CGSize)size;
- (void)sizeToFit;

@end

@interface UIView(UIViewHierarchy)

@property(nonatomic,readonly) UIView *superview;
@property(nonatomic,readonly,copy) NSArray *subviews;
@property(nonatomic,readonly) UIWindow *window;

- (void)removeFromSuperview;
- (void)insertSubview:(UIView *)view atIndex:(NSInteger)index;
- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;

- (void)addSubview:(UIView *)view;
- (void)insertSubview:(UIView *)view belowSubview:(UIView *)siblingSubview;
- (void)insertSubview:(UIView *)view aboveSubview:(UIView *)siblingSubview;

- (void)bringSubviewToFront:(UIView *)view;
- (void)sendSubviewToBack:(UIView *)view;

- (void)didAddSubview:(UIView *)subview;
- (void)willRemoveSubview:(UIView *)subview;

- (void)willMoveToSuperview:(UIView *)newSuperview;
- (void)didMoveToSuperview;
- (void)willMoveToWindow:(UIWindow *)newWindow;
- (void)didMoveToWindow;

- (BOOL)isDescendantOfView:(UIView *)view;
- (UIView *)viewWithTag:(NSInteger)tag;


- (void)setNeedsLayout;
- (void)layoutIfNeeded;

- (void)layoutSubviews;

@end

@interface UIView(UIViewRendering)

- (void)drawRect:(CGRect)rect;

- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(CGRect)rect;

@property(nonatomic) BOOL clipsToBounds;
@property(nonatomic,retain) UIColor *backgroundColor;
@property(nonatomic) CGFloat alpha;
@property(nonatomic,getter=isOpaque) BOOL opaque;
@property(nonatomic) BOOL clearsContextBeforeDrawing;
@property(nonatomic,getter=isHidden) BOOL hidden;
@property(nonatomic) UIViewContentMode contentMode;
@property(nonatomic) CGRect contentStretch __attribute__((weak_import));

@end

@interface UIView(UIViewAnimation)

+ (void)beginAnimations:(NSString *)animationID context:(void *)context;
+ (void)commitAnimations;


+ (void)setAnimationDelegate:(id)delegate;
+ (void)setAnimationWillStartSelector:(SEL)selector;
+ (void)setAnimationDidStopSelector:(SEL)selector;
+ (void)setAnimationDuration:(NSTimeInterval)duration;
+ (void)setAnimationDelay:(NSTimeInterval)delay;
+ (void)setAnimationStartDate:(NSDate *)startDate;
+ (void)setAnimationCurve:(UIViewAnimationCurve)curve;
+ (void)setAnimationRepeatCount:(float)repeatCount;
+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses;
+ (void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState;

+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache;

+ (void)setAnimationsEnabled:(BOOL)enabled;
+ (BOOL)areAnimationsEnabled;

@end
# 9 "/var/include/UIKit/UIActivityIndicatorView.h" 2


typedef enum {
    UIActivityIndicatorViewStyleWhiteLarge,
    UIActivityIndicatorViewStyleWhite,
    UIActivityIndicatorViewStyleGray,
} UIActivityIndicatorViewStyle;

__attribute__((visibility("default"))) @interface UIActivityIndicatorView : UIView <NSCoding>
{
  @package
    CFTimeInterval _duration;
    BOOL _animating;
    UIActivityIndicatorViewStyle _activityIndicatorViewStyle;
    BOOL _hidesWhenStopped;
}

- (id)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style;

@property(nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
@property(nonatomic) BOOL hidesWhenStopped;

- (void)startAnimating;
- (void)stopAnimating;
- (BOOL)isAnimating;

@end
# 12 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIAlert.h" 1
# 10 "/var/include/UIKit/UIAlert.h"
# 1 "/var/include/UIKit/UITextField.h" 1
# 11 "/var/include/UIKit/UITextField.h"
# 1 "/var/include/UIKit/UIControl.h" 1
# 12 "/var/include/UIKit/UIControl.h"
enum {
    UIControlEventTouchDown = 1 << 0,
    UIControlEventTouchDownRepeat = 1 << 1,
    UIControlEventTouchDragInside = 1 << 2,
    UIControlEventTouchDragOutside = 1 << 3,
    UIControlEventTouchDragEnter = 1 << 4,
    UIControlEventTouchDragExit = 1 << 5,
    UIControlEventTouchUpInside = 1 << 6,
    UIControlEventTouchUpOutside = 1 << 7,
    UIControlEventTouchCancel = 1 << 8,

    UIControlEventValueChanged = 1 << 12,

    UIControlEventEditingDidBegin = 1 << 16,
    UIControlEventEditingChanged = 1 << 17,
    UIControlEventEditingDidEnd = 1 << 18,
    UIControlEventEditingDidEndOnExit = 1 << 19,

    UIControlEventAllTouchEvents = 0x00000FFF,
    UIControlEventAllEditingEvents = 0x000F0000,
    UIControlEventApplicationReserved = 0x0F000000,
    UIControlEventSystemReserved = 0xF0000000,
    UIControlEventAllEvents = 0xFFFFFFFF
};
typedef NSUInteger UIControlEvents;

typedef enum {
    UIControlContentVerticalAlignmentCenter = 0,
    UIControlContentVerticalAlignmentTop = 1,
    UIControlContentVerticalAlignmentBottom = 2,
    UIControlContentVerticalAlignmentFill = 3,
} UIControlContentVerticalAlignment;

typedef enum {
    UIControlContentHorizontalAlignmentCenter = 0,
    UIControlContentHorizontalAlignmentLeft = 1,
    UIControlContentHorizontalAlignmentRight = 2,
    UIControlContentHorizontalAlignmentFill = 3,
} UIControlContentHorizontalAlignment;

enum {
    UIControlStateNormal = 0,
    UIControlStateHighlighted = 1 << 0,
    UIControlStateDisabled = 1 << 1,
    UIControlStateSelected = 1 << 2,
    UIControlStateApplication = 0x00FF0000,
    UIControlStateReserved = 0xFF000000
};
typedef NSUInteger UIControlState;

@class UITouch;
@class UIEvent;



__attribute__((visibility("default"))) @interface UIControl : UIView {
  @package
    NSMutableArray* _targetActions;
    CGPoint _previousPoint;
    CFAbsoluteTime _downTime;
    struct {
        unsigned int disabled:1;
        unsigned int tracking:1;
        unsigned int touchInside:1;
        unsigned int touchDragged:1;
        unsigned int requiresDisplayOnTracking:1;
        unsigned int highlighted:1;
        unsigned int dontHighlightOnTouchDown:1;
        unsigned int delayActions:1;
        unsigned int allowActionsToQueue:1;
        unsigned int pendingUnhighlight:1;
        unsigned int selected:1;
 unsigned int verticalAlignment:2;
 unsigned int horizontalAlignment:2;
    } _controlFlags;
}

@property(nonatomic,getter=isEnabled) BOOL enabled;
@property(nonatomic,getter=isSelected) BOOL selected;
@property(nonatomic,getter=isHighlighted) BOOL highlighted;
@property(nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment;
@property(nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment;

@property(nonatomic,readonly) UIControlState state;
@property(nonatomic,readonly,getter=isTracking) BOOL tracking;
@property(nonatomic,readonly,getter=isTouchInside) BOOL touchInside;

- (BOOL)beginTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event;
- (BOOL)continueTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event;
- (void)endTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event;
- (void)cancelTrackingWithEvent:(UIEvent *)event;




- (void)addTarget:(id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents;


- (void)removeTarget:(id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents;


- (NSSet *)allTargets;
- (UIControlEvents)allControlEvents;
- (NSArray *)actionsForTarget:(id)target forControlEvent:(UIControlEvents)controlEvent;


- (void)sendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event;
- (void)sendActionsForControlEvents:(UIControlEvents)controlEvents;

@end
# 12 "/var/include/UIKit/UITextField.h" 2

# 1 "/var/include/UIKit/UIStringDrawing.h" 1
# 11 "/var/include/UIKit/UIStringDrawing.h"
typedef enum {
    UILineBreakModeWordWrap = 0,
    UILineBreakModeCharacterWrap,
    UILineBreakModeClip,
    UILineBreakModeHeadTruncation,
    UILineBreakModeTailTruncation,
    UILineBreakModeMiddleTruncation,
} UILineBreakMode;

typedef enum {
    UITextAlignmentLeft = 0,
    UITextAlignmentCenter,
    UITextAlignmentRight,
} UITextAlignment;

typedef enum {
    UIBaselineAdjustmentAlignBaselines = 0,
    UIBaselineAdjustmentAlignCenters,
    UIBaselineAdjustmentNone,
} UIBaselineAdjustment;

@class UIFont;



@interface NSString(UIStringDrawing)


- (CGSize)sizeWithFont:(UIFont *)font;
- (CGSize)sizeWithFont:(UIFont *)font forWidth:(CGFloat)width lineBreakMode:(UILineBreakMode)lineBreakMode;


- (CGSize)drawAtPoint:(CGPoint)point withFont:(UIFont *)font;
- (CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font lineBreakMode:(UILineBreakMode)lineBreakMode;




- (CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size;
- (CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size lineBreakMode:(UILineBreakMode)lineBreakMode;


- (CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font;
- (CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(UILineBreakMode)lineBreakMode;
- (CGSize)drawInRect:(CGRect)rect withFont:(UIFont *)font lineBreakMode:(UILineBreakMode)lineBreakMode alignment:(UITextAlignment)alignment;






- (CGSize)sizeWithFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize forWidth:(CGFloat)width lineBreakMode:(UILineBreakMode)lineBreakMode;

- (CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font fontSize:(CGFloat)fontSize lineBreakMode:(UILineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment;

- (CGSize)drawAtPoint:(CGPoint)point forWidth:(CGFloat)width withFont:(UIFont *)font minFontSize:(CGFloat)minFontSize actualFontSize:(CGFloat *)actualFontSize lineBreakMode:(UILineBreakMode)lineBreakMode baselineAdjustment:(UIBaselineAdjustment)baselineAdjustment;

@end
# 14 "/var/include/UIKit/UITextField.h" 2
# 1 "/var/include/UIKit/UITextInputTraits.h" 1
# 17 "/var/include/UIKit/UITextInputTraits.h"
typedef enum {
    UITextAutocapitalizationTypeNone,
    UITextAutocapitalizationTypeWords,
    UITextAutocapitalizationTypeSentences,
    UITextAutocapitalizationTypeAllCharacters,
} UITextAutocapitalizationType;
# 32 "/var/include/UIKit/UITextInputTraits.h"
typedef enum {
    UITextAutocorrectionTypeDefault,
    UITextAutocorrectionTypeNo,
    UITextAutocorrectionTypeYes,
} UITextAutocorrectionType;
# 48 "/var/include/UIKit/UITextInputTraits.h"
typedef enum {
    UIKeyboardTypeDefault,
    UIKeyboardTypeASCIICapable,
    UIKeyboardTypeNumbersAndPunctuation,
    UIKeyboardTypeURL,
    UIKeyboardTypeNumberPad,
    UIKeyboardTypePhonePad,
    UIKeyboardTypeNamePhonePad,
    UIKeyboardTypeEmailAddress,

    UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable,

} UIKeyboardType;
# 71 "/var/include/UIKit/UITextInputTraits.h"
typedef enum {
    UIKeyboardAppearanceDefault,
    UIKeyboardAppearanceAlert,
} UIKeyboardAppearance;
# 84 "/var/include/UIKit/UITextInputTraits.h"
typedef enum {
    UIReturnKeyDefault,
    UIReturnKeyGo,
    UIReturnKeyGoogle,
    UIReturnKeyJoin,
    UIReturnKeyNext,
    UIReturnKeyRoute,
    UIReturnKeySearch,
    UIReturnKeySend,
    UIReturnKeyYahoo,
    UIReturnKeyDone,
    UIReturnKeyEmergencyCall,
} UIReturnKeyType;







@protocol UITextInputTraits <NSObject>

@optional

@property(nonatomic) UITextAutocapitalizationType autocapitalizationType;
@property(nonatomic) UITextAutocorrectionType autocorrectionType;
@property(nonatomic) UIKeyboardType keyboardType;
@property(nonatomic) UIKeyboardAppearance keyboardAppearance;
@property(nonatomic) UIReturnKeyType returnKeyType;
@property(nonatomic) BOOL enablesReturnKeyAutomatically;
@property(nonatomic,getter=isSecureTextEntry) BOOL secureTextEntry;

@end
# 15 "/var/include/UIKit/UITextField.h" 2

@class UIImage, UIImageView, UILabel, UIColor;
@class UITextFieldAtomBackgroundView;
@class UITextFieldBackgroundView;
@class UITextFieldBorderView;
@class UITextFieldLabel;
@class UITextInputTraits;
@class UITextSelectionView;
@class UITextInteractionAssistant;
@protocol UITextFieldDelegate;
@protocol UITextSelecting;

typedef enum {
    UITextBorderStyleNone,
    UITextBorderStyleLine,
    UITextBorderStyleBezel,
    UITextBorderStyleRoundedRect
} UITextBorderStyle;

typedef enum {
    UITextFieldViewModeNever,
    UITextFieldViewModeWhileEditing,
    UITextFieldViewModeUnlessEditing,
    UITextFieldViewModeAlways
} UITextFieldViewMode;

__attribute__((visibility("default"))) @interface UITextField : UIControl <UITextInputTraits, NSCoding> {
  @private
    NSString *_text;
    UIColor *_textColor;
    UITextBorderStyle _borderStyle;
    CGFloat _minimumFontSize;
    id _delegate;
    UIImage *_background;
    UIImage *_disabledBackground;
    UITextFieldViewMode _clearButtonMode;
    UIView *_leftView;
    UITextFieldViewMode _leftViewMode;
    UIView *_rightView;
    UITextFieldViewMode _rightViewMode;

    UITextInputTraits *_traits;
    UITextInputTraits *_nonAtomTraits;
    CGFloat _fullFontSize;
    CGFloat _paddingLeft;
    CGFloat _paddingTop;
    CGFloat _paddingRight;
    CGFloat _paddingBottom;
    NSString *_textFont;
    UIColor *_caretColor;
    NSRange _selectionRange;
    int _scrollXOffset;
    int _scrollYOffset;
    float _progress;
    NSString *_style;
    CFTimeInterval _mouseDownTime;

    UIView *_clearButton;
    CGSize _clearButtonOffset;

    CGSize _leftViewOffset;
    CGSize _rightViewOffset;

    UITextFieldBorderView *_backgroundView;
    UITextFieldBorderView *_disabledBackgroundView;
    UITextFieldBackgroundView *_systemBackgroundView;

    UITextFieldLabel *_textLabel;
    UITextFieldLabel *_placeholderLabel;
    UIImageView *_iconView;
    UILabel *_label;
    CGFloat _labelOffset;

    UITextInteractionAssistant *_interactionAssistant;
    UITextSelectionView *_selectionView;

    UITextFieldAtomBackgroundView *_atomBackgroundView;

    struct {
        unsigned int secureTextChanged:1;
        unsigned int guard:1;
        unsigned int delegateRespondsToHandleKeyDown:1;
        unsigned int verticallyCenterText:1;
        unsigned int isAnimating:4;
        unsigned int inactiveHasDimAppearance:1;
        unsigned int becomesFirstResponderOnClearButtonTap:1;
 unsigned int clearsOnBeginEditing:1;
 unsigned int adjustsFontSizeToFitWidth:1;
 unsigned int fieldEditorAttached:1;
 unsigned int inBecomeFirstResponder:1;
        unsigned int becomingFirstResponder:1;
        unsigned int undoDisabled:1;
        unsigned int contentsRTL:1;
        unsigned int explicitAlignment:1;
    } _textFieldFlags;
}





@property(nonatomic,copy) NSString *text;
@property(nonatomic,retain) UIColor *textColor;
@property(nonatomic,retain) UIFont *font;
@property(nonatomic) UITextAlignment textAlignment;
@property(nonatomic) UITextBorderStyle borderStyle;
@property(nonatomic,copy) NSString *placeholder;
@property(nonatomic) BOOL clearsOnBeginEditing;
@property(nonatomic) BOOL adjustsFontSizeToFitWidth;
@property(nonatomic) CGFloat minimumFontSize;
@property(nonatomic,assign) id<UITextFieldDelegate> delegate;
@property(nonatomic,retain) UIImage *background;
@property(nonatomic,retain) UIImage *disabledBackground;

@property(nonatomic,readonly,getter=isEditing) BOOL editing;
# 141 "/var/include/UIKit/UITextField.h"
@property(nonatomic) UITextFieldViewMode clearButtonMode;

@property(nonatomic,retain) UIView *leftView;
@property(nonatomic) UITextFieldViewMode leftViewMode;

@property(nonatomic,retain) UIView *rightView;
@property(nonatomic) UITextFieldViewMode rightViewMode;



- (CGRect)borderRectForBounds:(CGRect)bounds;
- (CGRect)textRectForBounds:(CGRect)bounds;
- (CGRect)placeholderRectForBounds:(CGRect)bounds;
- (CGRect)editingRectForBounds:(CGRect)bounds;
- (CGRect)clearButtonRectForBounds:(CGRect)bounds;
- (CGRect)leftViewRectForBounds:(CGRect)bounds;
- (CGRect)rightViewRectForBounds:(CGRect)bounds;

- (void)drawTextInRect:(CGRect)rect;
- (void)drawPlaceholderInRect:(CGRect)rect;

@end

@interface UIView (UITextField)
- (BOOL)endEditing:(BOOL)force;
@end

@protocol UITextFieldDelegate <NSObject>

@optional

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField;
- (void)textFieldDidBeginEditing:(UITextField *)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField *)textField;
- (void)textFieldDidEndEditing:(UITextField *)textField;

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;

- (BOOL)textFieldShouldClear:(UITextField *)textField;
- (BOOL)textFieldShouldReturn:(UITextField *)textField;

@end

extern __attribute__((visibility ("default"))) NSString *const UITextFieldTextDidBeginEditingNotification;
extern __attribute__((visibility ("default"))) NSString *const UITextFieldTextDidEndEditingNotification;
extern __attribute__((visibility ("default"))) NSString *const UITextFieldTextDidChangeNotification;
# 11 "/var/include/UIKit/UIAlert.h" 2


@protocol UIActionSheetDelegate, UIAlertViewDelegate;
@class UILabel, UIToolbar, UITabBar, UIWindow;

typedef enum {
    UIActionSheetStyleAutomatic = -1,
    UIActionSheetStyleDefault = UIBarStyleDefault,
    UIActionSheetStyleBlackTranslucent = UIBarStyleBlackTranslucent,
    UIActionSheetStyleBlackOpaque = UIBarStyleBlackOpaque,
} UIActionSheetStyle;

__attribute__((visibility("default"))) @interface UIActionSheet : UIView {
  @private
    id <UIActionSheetDelegate> _delegate;
    UILabel *_titleLabel;
    UILabel *_subtitleLabel;
    UILabel *_bodyTextLabel;
    UILabel *_taglineTextLabel;
    CGFloat _startY;
    id _context;
    NSInteger _cancelButton;
    NSInteger _defaultButton;
    NSInteger _firstOtherButton;
    UIToolbar *_toolbar;
    UIWindow *_originalWindow;
    UIWindow *_dimWindow;
    NSInteger _suspendTag;
    NSInteger _dismissButtonIndex;
    CGFloat _bodyTextHeight;
    NSMutableArray *_buttons;
    NSMutableArray *_textFields;
    UIView *_keyboard;
    UIView *_table;
    UIView *_buttonTableView;
    UIView *_dimView;
    struct {
        unsigned int numberOfRows:7;
        unsigned int delegateAlertSheetButtonClicked:1;
        unsigned int delegateDidPresentAlertSheet:1;
        unsigned int delegateDidDismissAlertSheet:1;
        unsigned int hideButtonBar:1;
        unsigned int alertStyle:3;
        unsigned int dontDimBackground:1;
        unsigned int dismissSuspended:1;
        unsigned int dontBlockInteraction:1;
        unsigned int sheetWasPoppedUp:1;
        unsigned int sheetWasShown:1;
        unsigned int animating:1;
        unsigned int hideWhenDoneAnimating:1;
        unsigned int layoutWhenDoneAnimating:1;
        unsigned int titleMaxLineCount:2;
        unsigned int bodyTextMaxLineCount:3;
        unsigned int runsModal:1;
        unsigned int runningModal:1;
        unsigned int addedTextView:1;
        unsigned int addedTableShadows:1;
        unsigned int showOverSBAlerts:1;
        unsigned int showMinTableContent:1;
        unsigned int bodyTextTruncated:1;
        unsigned int orientation:3;
        unsigned int delegateBodyTextAlignment:1;
        unsigned int delegateClickedButtonAtIndex:1;
        unsigned int delegateClickedButtonAtIndex2:1;
        unsigned int delegateCancel:1;
        unsigned int delegateCancel2:1;
        unsigned int delegateWillPresent:1;
        unsigned int delegateWillPresent2:1;
        unsigned int delegateDidPresent:1;
        unsigned int delegateDidPresent2:1;
        unsigned int delegateWillDismiss:1;
        unsigned int delegateWillDismiss2:1;
        unsigned int delegateDidDismiss:1;
        unsigned int delegateDidDismiss2:1;
    } _modalViewFlags;
    UIActionSheetStyle _actionSheetStyle;
}

- (id)initWithTitle:(NSString *)title delegate:(id<UIActionSheetDelegate>)delegate cancelButtonTitle:(NSString *)cancelButtonTitle destructiveButtonTitle:(NSString *)destructiveButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ...;

@property(nonatomic,assign) id<UIActionSheetDelegate> delegate;
@property(nonatomic,copy) NSString *title;
@property(nonatomic) UIActionSheetStyle actionSheetStyle;



- (NSInteger)addButtonWithTitle:(NSString *)title;
- (NSString *)buttonTitleAtIndex:(NSInteger)buttonIndex;
@property(nonatomic,readonly) NSInteger numberOfButtons;
@property(nonatomic) NSInteger cancelButtonIndex;
@property(nonatomic) NSInteger destructiveButtonIndex;

@property(nonatomic,readonly) NSInteger firstOtherButtonIndex;
@property(nonatomic,readonly,getter=isVisible) BOOL visible;



- (void)showFromToolbar:(UIToolbar *)view;
- (void)showFromTabBar:(UITabBar *)view;
- (void)showInView:(UIView *)view;



- (void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;

@end


@protocol UIActionSheetDelegate <NSObject>
@optional


- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex;



- (void)actionSheetCancel:(UIActionSheet *)actionSheet;

- (void)willPresentActionSheet:(UIActionSheet *)actionSheet;
- (void)didPresentActionSheet:(UIActionSheet *)actionSheet;

- (void)actionSheet:(UIActionSheet *)actionSheet willDismissWithButtonIndex:(NSInteger)buttonIndex;
- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex;

@end




__attribute__((visibility("default"))) @interface UIAlertView : UIView {
  @private
    id <UIAlertViewDelegate> _delegate;
    UILabel *_titleLabel;
    UILabel *_subtitleLabel;
    UILabel *_bodyTextLabel;
    UILabel *_taglineTextLabel;
    CGFloat _startY;
    CGPoint _center;
    id _context;
    NSInteger _cancelButton;
    NSInteger _defaultButton;
    NSInteger _firstOtherButton;
    UIToolbar *_toolbar;
    UIWindow *_originalWindow;
    UIWindow *_dimWindow;
    NSInteger _suspendTag;
    NSInteger _dismissButtonIndex;
    CGFloat _bodyTextHeight;
    NSMutableArray *_buttons;
    NSMutableArray *_textFields;
    UIView *_keyboard;
    UIView *_table;
    UIView *_dimView;
    struct {
        unsigned int numberOfRows:7;
        unsigned int delegateAlertSheetButtonClicked:1;
        unsigned int delegateDidPresentAlertSheet:1;
        unsigned int delegateDidDismissAlertSheet:1;
        unsigned int hideButtonBar:1;
        unsigned int alertStyle:3;
        unsigned int dontDimBackground:1;
        unsigned int dismissSuspended:1;
        unsigned int dontBlockInteraction:1;
        unsigned int sheetWasPoppedUp:1;
        unsigned int animating:1;
        unsigned int hideWhenDoneAnimating:1;
        unsigned int layoutWhenDoneAnimating:1;
        unsigned int titleMaxLineCount:2;
        unsigned int bodyTextMaxLineCount:3;
        unsigned int runsModal:1;
        unsigned int runningModal:1;
        unsigned int addedTextView:1;
        unsigned int addedTableShadows:1;
        unsigned int showOverSBAlerts:1;
        unsigned int showMinTableContent:1;
        unsigned int bodyTextTruncated:1;
        unsigned int orientation:3;
        unsigned int groupsTextFields:1;
        unsigned int includesCancel:1;
        unsigned int useUndoStyle:1;
        unsigned int delegateBodyTextAlignment:1;
        unsigned int delegateClickedButtonAtIndex:1;
        unsigned int delegateClickedButtonAtIndex2:1;
        unsigned int delegateCancel:1;
        unsigned int delegateCancel2:1;
        unsigned int delegateWillPresent:1;
        unsigned int delegateWillPresent2:1;
        unsigned int delegateDidPresent:1;
        unsigned int delegateDidPresent2:1;
        unsigned int delegateWillDismiss:1;
        unsigned int delegateWillDismiss2:1;
        unsigned int delegateDidDismiss:1;
        unsigned int delegateDidDismiss2:1;
    } _modalViewFlags;
}

- (id)initWithTitle:(NSString *)title message:(NSString *)message delegate:(id )delegate cancelButtonTitle:(NSString *)cancelButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ...;

@property(nonatomic,assign) id delegate;
@property(nonatomic,copy) NSString *title;
@property(nonatomic,copy) NSString *message;




- (NSInteger)addButtonWithTitle:(NSString *)title;
- (NSString *)buttonTitleAtIndex:(NSInteger)buttonIndex;
@property(nonatomic,readonly) NSInteger numberOfButtons;
@property(nonatomic) NSInteger cancelButtonIndex;

@property(nonatomic,readonly) NSInteger firstOtherButtonIndex;
@property(nonatomic,readonly,getter=isVisible) BOOL visible;


- (void)show;



- (void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;

@end

@protocol UIAlertViewDelegate <NSObject>
@optional


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex;



- (void)alertViewCancel:(UIAlertView *)alertView;

- (void)willPresentAlertView:(UIAlertView *)alertView;
- (void)didPresentAlertView:(UIAlertView *)alertView;

- (void)alertView:(UIAlertView *)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex;
- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex;

@end
# 13 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIApplication.h" 1
# 13 "/var/include/UIKit/UIApplication.h"
# 1 "/var/include/UIKit/UIDevice.h" 1
# 11 "/var/include/UIKit/UIDevice.h"
typedef enum {
    UIDeviceOrientationUnknown,
    UIDeviceOrientationPortrait,
    UIDeviceOrientationPortraitUpsideDown,
    UIDeviceOrientationLandscapeLeft,
    UIDeviceOrientationLandscapeRight,
    UIDeviceOrientationFaceUp,
    UIDeviceOrientationFaceDown
} UIDeviceOrientation;

typedef enum {
    UIDeviceBatteryStateUnknown,
    UIDeviceBatteryStateUnplugged,
    UIDeviceBatteryStateCharging,
    UIDeviceBatteryStateFull,
} UIDeviceBatteryState;




__attribute__((visibility("default"))) @interface UIDevice : NSObject {
 @private
    NSInteger _numDeviceOrientationObservers;
    float _batteryLevel;
    struct {
 unsigned int batteryMonitoringEnabled:1;
 unsigned int proximityMonitoringEnabled:1;
        unsigned int orientation:3;
        unsigned int batteryState:2;
        unsigned int proximityState:1;
    } _deviceFlags;
}

+ (UIDevice *)currentDevice;

@property(nonatomic,readonly,retain) NSString *name;
@property(nonatomic,readonly,retain) NSString *model;
@property(nonatomic,readonly,retain) NSString *localizedModel;
@property(nonatomic,readonly,retain) NSString *systemName;
@property(nonatomic,readonly,retain) NSString *systemVersion;
@property(nonatomic,readonly) UIDeviceOrientation orientation;
@property(nonatomic,readonly,retain) NSString *uniqueIdentifier;

@property(nonatomic,readonly,getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications;
- (void)beginGeneratingDeviceOrientationNotifications;
- (void)endGeneratingDeviceOrientationNotifications;

@property(nonatomic,getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled __attribute__((weak_import));
@property(nonatomic,readonly) UIDeviceBatteryState batteryState __attribute__((weak_import));
@property(nonatomic,readonly) float batteryLevel __attribute__((weak_import));

@property(nonatomic,getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled __attribute__((weak_import));
@property(nonatomic,readonly) BOOL proximityState __attribute__((weak_import));

@end

extern __attribute__((visibility ("default"))) NSString *const UIDeviceOrientationDidChangeNotification;
extern __attribute__((visibility ("default"))) NSString *const UIDeviceBatteryStateDidChangeNotification __attribute__((weak_import));
extern __attribute__((visibility ("default"))) NSString *const UIDeviceBatteryLevelDidChangeNotification __attribute__((weak_import));
extern __attribute__((visibility ("default"))) NSString *const UIDeviceProximityStateDidChangeNotification __attribute__((weak_import));
# 14 "/var/include/UIKit/UIApplication.h" 2


typedef enum {
    UIStatusBarStyleDefault,
    UIStatusBarStyleBlackTranslucent,
    UIStatusBarStyleBlackOpaque
} UIStatusBarStyle;



typedef enum {
    UIInterfaceOrientationPortrait = UIDeviceOrientationPortrait,
    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,
    UIInterfaceOrientationLandscapeLeft = UIDeviceOrientationLandscapeRight,
    UIInterfaceOrientationLandscapeRight = UIDeviceOrientationLandscapeLeft
} UIInterfaceOrientation;





typedef enum {
    UIRemoteNotificationTypeNone = 0,
    UIRemoteNotificationTypeBadge = 1 << 0,
    UIRemoteNotificationTypeSound = 1 << 1,
    UIRemoteNotificationTypeAlert = 1 << 2
} UIRemoteNotificationType;

@class UIView, UIWindow;
@protocol UIApplicationDelegate;

__attribute__((visibility("default"))) @interface UIApplication : UIResponder <UIActionSheetDelegate>
{
  @package
    id <UIApplicationDelegate> _delegate;
    CFMutableDictionaryRef _touchMap;
    NSMutableSet *_exclusiveTouchWindows;
    UIEvent *_touchesEvent;
    UIEvent *_motionEvent;
    NSArray *_topLevelNibObjects;
    NSInteger _orientation;
    NSInteger _networkResourcesCurrentlyLoadingCount;
    NSTimer *_hideNetworkActivityIndicatorTimer;
    struct {
        unsigned int isActive:1;
        unsigned int isSuspended:1;
        unsigned int isSuspendedEventsOnly:1;
        unsigned int isLaunchedSuspended:1;
        unsigned int isHandlingURL:1;
        unsigned int isHandlingRemoteNotification:1;
        unsigned int statusBarMode:8;
        unsigned int statusBarShowsProgress:1;
        unsigned int blockInteractionEvents:4;
        unsigned int forceExit:1;
        unsigned int receivesMemoryWarnings:1;
        unsigned int showingProgress:1;
        unsigned int receivesPowerMessages:1;
        unsigned int launchEventReceived:1;
        unsigned int isAnimatingSuspensionOrResumption:1;
        unsigned int isSuspendedUnderLock:1;
        unsigned int shouldExitAfterSendSuspend:1;
        unsigned int terminating:1;
        unsigned int isHandlingShortCutURL:1;
        unsigned int idleTimerDisabled:1;
        unsigned int statusBarStyle:4;
        unsigned int statusBarHidden:1;
        unsigned int statusBarOrientation:3;
        unsigned int deviceOrientation:3;
        unsigned int delegateShouldBeReleasedUponSet:1;
        unsigned int delegateHandleOpenURL:1;
        unsigned int delegateDidReceiveMemoryWarning:1;
        unsigned int delegateWillTerminate:1;
        unsigned int delegateSignificantTimeChange:1;
        unsigned int delegateWillChangeInterfaceOrientation:1;
        unsigned int delegateDidChangeInterfaceOrientation:1;
        unsigned int delegateWillChangeStatusBarFrame:1;
        unsigned int delegateDidChangeStatusBarFrame:1;
        unsigned int delegateDeviceAccelerated:1;
        unsigned int delegateDeviceChangedOrientation:1;
        unsigned int delegateDidBecomeActive:1;
        unsigned int delegateWillResignActive:1;
        unsigned int idleTimerDisableActive:1;
        unsigned int userDefaultsSyncDisabled:1;
        unsigned int doubleHeightMode:4;
        unsigned int headsetButtonClickCount:4;
        unsigned int disableViewGroupOpacity:1;
        unsigned int disableViewEdgeAntialiasing:1;
        unsigned int shakeToEdit:1;
        unsigned int editWindowIsVisible:1;
    } _applicationFlags;
}

+ (UIApplication *)sharedApplication;

@property(nonatomic,assign) id<UIApplicationDelegate> delegate;

- (void)beginIgnoringInteractionEvents;
- (void)endIgnoringInteractionEvents;
- (BOOL)isIgnoringInteractionEvents;

@property(nonatomic,getter=isIdleTimerDisabled) BOOL idleTimerDisabled;

- (BOOL)openURL:(NSURL*)url;
- (BOOL)canOpenURL:(NSURL *)url __attribute__((weak_import));

- (void)sendEvent:(UIEvent *)event;

@property(nonatomic,readonly) UIWindow *keyWindow;
@property(nonatomic,readonly) NSArray *windows;

- (BOOL)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event;

@property(nonatomic,getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;
@property(nonatomic) UIStatusBarStyle statusBarStyle;
- (void)setStatusBarStyle:(UIStatusBarStyle)statusBarStyle animated:(BOOL)animated;
@property(nonatomic,getter=isStatusBarHidden) BOOL statusBarHidden;
- (void)setStatusBarHidden:(BOOL)hidden animated:(BOOL)animated;



@property(nonatomic) UIInterfaceOrientation statusBarOrientation;
- (void)setStatusBarOrientation:(UIInterfaceOrientation)interfaceOrientation animated:(BOOL)animated;

@property(nonatomic,readonly) NSTimeInterval statusBarOrientationAnimationDuration;
@property(nonatomic,readonly) CGRect statusBarFrame;

@property(nonatomic) NSInteger applicationIconBadgeNumber;

@property(nonatomic) BOOL applicationSupportsShakeToEdit __attribute__((weak_import));

@end

@interface UIApplication (UIRemoteNotifications)

- (void)registerForRemoteNotificationTypes:(UIRemoteNotificationType)types __attribute__((weak_import));
- (void)unregisterForRemoteNotifications __attribute__((weak_import));


- (UIRemoteNotificationType)enabledRemoteNotificationTypes __attribute__((weak_import));

@end

@protocol UIApplicationDelegate<NSObject>

@optional

- (void)applicationDidFinishLaunching:(UIApplication *)application;
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions __attribute__((weak_import));

- (void)applicationDidBecomeActive:(UIApplication *)application;
- (void)applicationWillResignActive:(UIApplication *)application;
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url;

- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application;
- (void)applicationWillTerminate:(UIApplication *)application;
- (void)applicationSignificantTimeChange:(UIApplication *)application;

- (void)application:(UIApplication *)application willChangeStatusBarOrientation:(UIInterfaceOrientation)newStatusBarOrientation duration:(NSTimeInterval)duration;
- (void)application:(UIApplication *)application didChangeStatusBarOrientation:(UIInterfaceOrientation)oldStatusBarOrientation;

- (void)application:(UIApplication *)application willChangeStatusBarFrame:(CGRect)newStatusBarFrame;
- (void)application:(UIApplication *)application didChangeStatusBarFrame:(CGRect)oldStatusBarFrame;


- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken __attribute__((weak_import));
- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error __attribute__((weak_import));

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo __attribute__((weak_import));

@end

@interface UIApplication(UIApplicationDeprecated)

@property(nonatomic,getter=isProximitySensingEnabled) BOOL proximitySensingEnabled ;

@end



extern __attribute__((visibility ("default"))) int UIApplicationMain(int argc, char *argv[], NSString *principalClassName, NSString *delegateClassName);

extern __attribute__((visibility ("default"))) NSString *const UITrackingRunLoopMode;


extern __attribute__((visibility ("default"))) NSString *const UIApplicationDidFinishLaunchingNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationDidBecomeActiveNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationWillResignActiveNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationDidReceiveMemoryWarningNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationWillTerminateNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationSignificantTimeChangeNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationWillChangeStatusBarOrientationNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationDidChangeStatusBarOrientationNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationStatusBarOrientationUserInfoKey;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationWillChangeStatusBarFrameNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationDidChangeStatusBarFrameNotification;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationStatusBarFrameUserInfoKey;
extern __attribute__((visibility ("default"))) NSString *const UIApplicationLaunchOptionsURLKey __attribute__((weak_import));
extern __attribute__((visibility ("default"))) NSString *const UIApplicationLaunchOptionsSourceApplicationKey __attribute__((weak_import));
extern __attribute__((visibility ("default"))) NSString *const UIApplicationLaunchOptionsRemoteNotificationKey __attribute__((weak_import));
# 14 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIBarButtonItem.h" 1
# 10 "/var/include/UIKit/UIBarButtonItem.h"
# 1 "/var/include/UIKit/UIBarItem.h" 1
# 9 "/var/include/UIKit/UIBarItem.h"
# 1 "/var/include/UIKit/UIGeometry.h" 1
# 12 "/var/include/UIKit/UIGeometry.h"
typedef struct UIEdgeInsets {
    CGFloat top, left, bottom, right;
} UIEdgeInsets;

static inline UIEdgeInsets UIEdgeInsetsMake(CGFloat top, CGFloat left, CGFloat bottom, CGFloat right) {
    UIEdgeInsets insets = {top, left, bottom, right};
    return insets;
}

static inline CGRect UIEdgeInsetsInsetRect(CGRect rect, UIEdgeInsets insets) {
    rect.origin.x += insets.left;
    rect.origin.y += insets.top;
    rect.size.width -= (insets.left + insets.right);
    rect.size.height -= (insets.top + insets.bottom);
    return rect;
}

static inline BOOL UIEdgeInsetsEqualToEdgeInsets(UIEdgeInsets insets1, UIEdgeInsets insets2) {
    return insets1.left == insets2.left && insets1.top == insets2.top && insets1.right == insets2.right && insets1.bottom == insets2.bottom;
}

extern __attribute__((visibility ("default"))) const UIEdgeInsets UIEdgeInsetsZero;

extern __attribute__((visibility ("default"))) NSString *NSStringFromCGPoint(CGPoint point);
extern __attribute__((visibility ("default"))) NSString *NSStringFromCGSize(CGSize size);
extern __attribute__((visibility ("default"))) NSString *NSStringFromCGRect(CGRect rect);
extern __attribute__((visibility ("default"))) NSString *NSStringFromCGAffineTransform(CGAffineTransform transform);
extern __attribute__((visibility ("default"))) NSString *NSStringFromUIEdgeInsets(UIEdgeInsets insets);

extern __attribute__((visibility ("default"))) CGPoint CGPointFromString(NSString *string);
extern __attribute__((visibility ("default"))) CGSize CGSizeFromString(NSString *string);
extern __attribute__((visibility ("default"))) CGRect CGRectFromString(NSString *string);
extern __attribute__((visibility ("default"))) CGAffineTransform CGAffineTransformFromString(NSString *string);
extern __attribute__((visibility ("default"))) UIEdgeInsets UIEdgeInsetsFromString(NSString *string);

@interface NSValue (NSValueUIGeometryExtensions)

+ (NSValue *)valueWithCGPoint:(CGPoint)point;
+ (NSValue *)valueWithCGSize:(CGSize)size;
+ (NSValue *)valueWithCGRect:(CGRect)rect;
+ (NSValue *)valueWithCGAffineTransform:(CGAffineTransform)transform;
+ (NSValue *)valueWithUIEdgeInsets:(UIEdgeInsets)insets;

- (CGPoint)CGPointValue;
- (CGSize)CGSizeValue;
- (CGRect)CGRectValue;
- (CGAffineTransform)CGAffineTransformValue;
- (UIEdgeInsets)UIEdgeInsetsValue;

@end

@interface NSCoder (UIGeometryKeyedCoding)

- (void)encodeCGPoint:(CGPoint)point forKey:(NSString *)key;
- (void)encodeCGSize:(CGSize)size forKey:(NSString *)key;
- (void)encodeCGRect:(CGRect)rect forKey:(NSString *)key;
- (void)encodeCGAffineTransform:(CGAffineTransform)transform forKey:(NSString *)key;
- (void)encodeUIEdgeInsets:(UIEdgeInsets)insets forKey:(NSString *)key;

- (CGPoint)decodeCGPointForKey:(NSString *)key;
- (CGSize)decodeCGSizeForKey:(NSString *)key;
- (CGRect)decodeCGRectForKey:(NSString *)key;
- (CGAffineTransform)decodeCGAffineTransformForKey:(NSString *)key;
- (UIEdgeInsets)decodeUIEdgeInsetsForKey:(NSString *)key;

@end
# 10 "/var/include/UIKit/UIBarItem.h" 2


@class UIImage;

__attribute__((visibility("default"))) @interface UIBarItem : NSObject {
}

@property(nonatomic,getter=isEnabled) BOOL enabled;
@property(nonatomic,copy) NSString *title;
@property(nonatomic,retain) UIImage *image;
@property(nonatomic) UIEdgeInsets imageInsets;
@property(nonatomic) NSInteger tag;
@end
# 11 "/var/include/UIKit/UIBarButtonItem.h" 2


typedef enum {
    UIBarButtonItemStylePlain,
    UIBarButtonItemStyleBordered,
    UIBarButtonItemStyleDone,
} UIBarButtonItemStyle;

typedef enum {
    UIBarButtonSystemItemDone,
    UIBarButtonSystemItemCancel,
    UIBarButtonSystemItemEdit,
    UIBarButtonSystemItemSave,
    UIBarButtonSystemItemAdd,
    UIBarButtonSystemItemFlexibleSpace,
    UIBarButtonSystemItemFixedSpace,
    UIBarButtonSystemItemCompose,
    UIBarButtonSystemItemReply,
    UIBarButtonSystemItemAction,
    UIBarButtonSystemItemOrganize,
    UIBarButtonSystemItemBookmarks,
    UIBarButtonSystemItemSearch,
    UIBarButtonSystemItemRefresh,
    UIBarButtonSystemItemStop,
    UIBarButtonSystemItemCamera,
    UIBarButtonSystemItemTrash,
    UIBarButtonSystemItemPlay,
    UIBarButtonSystemItemPause,
    UIBarButtonSystemItemRewind,
    UIBarButtonSystemItemFastForward,
    UIBarButtonSystemItemUndo,
    UIBarButtonSystemItemRedo,
} UIBarButtonSystemItem;

@class UIImage, UIView;

__attribute__((visibility("default"))) @interface UIBarButtonItem : UIBarItem {
  @private
    NSString *_title;
    NSSet *_possibleTitles;
    SEL _action;
    id _target;
    UIImage *_image;
    UIEdgeInsets _imageInsets;
    CGFloat _width;
    UIView *_view;
    NSInteger _tag;
    struct {
        unsigned int enabled:1;
        unsigned int style:3;
        unsigned int isSystemItem:1;
        unsigned int systemItem:7;
        unsigned int viewIsCustom:1;
        unsigned int isMinibarView:1;
    } _barButtonItemFlags;
}

- (id)initWithImage:(UIImage *)image style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action;
- (id)initWithTitle:(NSString *)title style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action;
- (id)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem target:(id)target action:(SEL)action;
- (id)initWithCustomView:(UIView *)customView;

@property(nonatomic) UIBarButtonItemStyle style;
@property(nonatomic) CGFloat width;
@property(nonatomic,copy) NSSet *possibleTitles;
@property(nonatomic,retain) UIView *customView;
@property(nonatomic) SEL action;
@property(nonatomic,assign) id target;

@end
# 15 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UIButton.h" 1
# 14 "/var/include/UIKit/UIButton.h"
@class UIImage, UIFont, UIColor, UIImageView, UILabel;

typedef enum {
    UIButtonTypeCustom = 0,
    UIButtonTypeRoundedRect,

    UIButtonTypeDetailDisclosure,
    UIButtonTypeInfoLight,
    UIButtonTypeInfoDark,
    UIButtonTypeContactAdd,
} UIButtonType;

__attribute__((visibility("default"))) @interface UIButton : UIControl <NSCoding> {
  @private
    CFMutableDictionaryRef _contentLookup;
    UIEdgeInsets _contentEdgeInsets;
    UIEdgeInsets _titleEdgeInsets;
    UIEdgeInsets _imageEdgeInsets;
    UIImageView *_backgroundView;
    UIImageView *_imageView;
    UILabel *_titleView;
    struct {
        unsigned int reversesTitleShadowWhenHighlighted:1;
        unsigned int adjustsImageWhenHighlighted:1;
        unsigned int adjustsImageWhenDisabled:1;
        unsigned int autosizeToFit:1;
        unsigned int disabledDimsImage:1;
        unsigned int showsTouchWhenHighlighted:1;
        unsigned int buttonType:8;
        unsigned int shouldHandleScrollerMouseEvent:1;
    } _buttonFlags;
}

+ (id)buttonWithType:(UIButtonType)buttonType;

@property(nonatomic) UIEdgeInsets contentEdgeInsets;
@property(nonatomic) UIEdgeInsets titleEdgeInsets;
@property(nonatomic) BOOL reversesTitleShadowWhenHighlighted;
@property(nonatomic) UIEdgeInsets imageEdgeInsets;
@property(nonatomic) BOOL adjustsImageWhenHighlighted;
@property(nonatomic) BOOL adjustsImageWhenDisabled;
@property(nonatomic) BOOL showsTouchWhenHighlighted;

@property(nonatomic,readonly) UIButtonType buttonType;





- (void)setTitle:(NSString *)title forState:(UIControlState)state;
- (void)setTitleColor:(UIColor *)color forState:(UIControlState)state;
- (void)setTitleShadowColor:(UIColor *)color forState:(UIControlState)state;
- (void)setImage:(UIImage *)image forState:(UIControlState)state;
- (void)setBackgroundImage:(UIImage *)image forState:(UIControlState)state;

- (NSString *)titleForState:(UIControlState)state;
- (UIColor *)titleColorForState:(UIControlState)state;
- (UIColor *)titleShadowColorForState:(UIControlState)state;
- (UIImage *)imageForState:(UIControlState)state;
- (UIImage *)backgroundImageForState:(UIControlState)state;





@property(nonatomic,readonly,retain) NSString *currentTitle;
@property(nonatomic,readonly,retain) UIColor *currentTitleColor;
@property(nonatomic,readonly,retain) UIColor *currentTitleShadowColor;
@property(nonatomic,readonly,retain) UIImage *currentImage;
@property(nonatomic,readonly,retain) UIImage *currentBackgroundImage;


@property(nonatomic,readonly,retain) UILabel *titleLabel __attribute__((weak_import));
@property(nonatomic,readonly,retain) UIImageView *imageView __attribute__((weak_import));





- (CGRect)backgroundRectForBounds:(CGRect)bounds;
- (CGRect)contentRectForBounds:(CGRect)bounds;
- (CGRect)titleRectForContentRect:(CGRect)contentRect;
- (CGRect)imageRectForContentRect:(CGRect)contentRect;
@end

@interface UIButton(UIButtonDeprecated)

@property(nonatomic,retain) UIFont *font ;
@property(nonatomic) UILineBreakMode lineBreakMode ;
@property(nonatomic) CGSize titleShadowOffset ;

@end
# 17 "/var/include/UIKit/UIKit.h" 2


# 1 "/var/include/UIKit/UIDataDetectors.h" 1
# 10 "/var/include/UIKit/UIDataDetectors.h"
enum {
    UIDataDetectorTypePhoneNumber = 1 << 0,
    UIDataDetectorTypeLink = 1 << 1,

    UIDataDetectorTypeNone = 0,
    UIDataDetectorTypeAll = 0xffffffffUL
};

typedef NSUInteger UIDataDetectorTypes;
# 20 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIDatePicker.h" 1
# 12 "/var/include/UIKit/UIDatePicker.h"
typedef enum {
    UIDatePickerModeTime,
    UIDatePickerModeDate,
    UIDatePickerModeDateAndTime,
    UIDatePickerModeCountDownTimer
} UIDatePickerMode;

@class UIPickerView;

__attribute__((visibility("default"))) @interface UIDatePicker : UIControl <NSCoding>
{
  @private
    UIPickerView *_pickerView;
}

@property(nonatomic) UIDatePickerMode datePickerMode;

@property(nonatomic,retain) NSLocale *locale;
@property(nonatomic,retain) NSTimeZone *timeZone;
@property(nonatomic,copy) NSCalendar *calendar;

@property(nonatomic,retain) NSDate *date;

@property(nonatomic,retain) NSDate *minimumDate;
@property(nonatomic,retain) NSDate *maximumDate;
@property(nonatomic) NSTimeInterval countDownDuration;
@property(nonatomic) NSInteger minuteInterval;

- (void)setDate:(NSDate *)date animated:(BOOL)animated;

@end
# 21 "/var/include/UIKit/UIKit.h" 2




# 1 "/var/include/UIKit/UIGraphics.h" 1
# 12 "/var/include/UIKit/UIGraphics.h"
@class UIImage;

extern __attribute__((visibility ("default"))) CGContextRef UIGraphicsGetCurrentContext(void);
extern __attribute__((visibility ("default"))) void UIGraphicsPushContext(CGContextRef context);
extern __attribute__((visibility ("default"))) void UIGraphicsPopContext(void);

extern __attribute__((visibility ("default"))) void UIRectFillUsingBlendMode(CGRect rect, CGBlendMode blendMode);
extern __attribute__((visibility ("default"))) void UIRectFill(CGRect rect);

extern __attribute__((visibility ("default"))) void UIRectFrameUsingBlendMode(CGRect rect, CGBlendMode blendMode);
extern __attribute__((visibility ("default"))) void UIRectFrame(CGRect rect);

extern __attribute__((visibility ("default"))) void UIRectClip(CGRect rect);

extern __attribute__((visibility ("default"))) void UIGraphicsBeginImageContext(CGSize size);
extern __attribute__((visibility ("default"))) UIImage* UIGraphicsGetImageFromCurrentImageContext(void);
extern __attribute__((visibility ("default"))) void UIGraphicsEndImageContext(void);
# 26 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIImage.h" 1
# 13 "/var/include/UIKit/UIImage.h"
typedef enum {
    UIImageOrientationUp,
    UIImageOrientationDown,
    UIImageOrientationLeft,
    UIImageOrientationRight,
    UIImageOrientationUpMirrored,
    UIImageOrientationDownMirrored,
    UIImageOrientationLeftMirrored,
    UIImageOrientationRightMirrored,
} UIImageOrientation;

__attribute__((visibility("default"))) @interface UIImage : NSObject {
  @package
    CFTypeRef _imageRef;
    struct {
 unsigned int named:1;
 unsigned int imageOrientation:3;
 unsigned int cached:1;
 unsigned int stretchable:1;
    } _imageFlags;
}

+ (UIImage *)imageNamed:(NSString *)name;

+ (UIImage *)imageWithContentsOfFile:(NSString *)path;
+ (UIImage *)imageWithData:(NSData *)data;
+ (UIImage *)imageWithCGImage:(CGImageRef)imageRef;

- (id)initWithContentsOfFile:(NSString *)path;
- (id)initWithData:(NSData *)data;
- (id)initWithCGImage:(CGImageRef)imageRef;

@property(nonatomic,readonly) CGSize size;
@property(nonatomic,readonly) CGImageRef CGImage;
@property(nonatomic,readonly) UIImageOrientation imageOrientation;



- (void)drawAtPoint:(CGPoint)point;
- (void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;
- (void)drawInRect:(CGRect)rect;
- (void)drawInRect:(CGRect)rect blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha;

- (void)drawAsPatternInRect:(CGRect)rect;



- (UIImage *)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth topCapHeight:(NSInteger)topCapHeight;
@property(nonatomic,readonly) NSInteger leftCapWidth;
@property(nonatomic,readonly) NSInteger topCapHeight;

@end

extern __attribute__((visibility ("default"))) NSData *UIImagePNGRepresentation(UIImage *image);
extern __attribute__((visibility ("default"))) NSData *UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality);
# 27 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIImagePickerController.h" 1
# 9 "/var/include/UIKit/UIImagePickerController.h"
# 1 "/var/include/UIKit/UINavigationController.h" 1
# 10 "/var/include/UIKit/UINavigationController.h"
# 1 "/var/include/UIKit/UIViewController.h" 1
# 20 "/var/include/UIKit/UIViewController.h"
@class UIView, UIImage;
@class UINavigationItem, UIBarButtonItem, UITabBarItem;
@class UITabBarController, UINavigationController, UISearchDisplayController;
@class NSHashTable;

typedef enum {
 UIModalTransitionStyleCoverVertical = 0,
 UIModalTransitionStyleFlipHorizontal,
    UIModalTransitionStyleCrossDissolve
} UIModalTransitionStyle;

__attribute__((visibility("default"))) @interface UIViewController : UIResponder <NSCoding> {
  @package
    UIView *_view;
    UITabBarItem *_tabBarItem;
    UINavigationItem *_navigationItem;
    NSArray *_toolbarItems;
    NSString *_title;

    NSString *_nibName;
    NSBundle *_nibBundle;

    UIViewController *_parentViewController;
    NSHashTable *_childViewControllers;

    UIViewController *_childModalViewController;
    UIView *_modalTransitionView;
    UIResponder *_modalPreservedFirstResponder;
    UIView *_dimmingView;
    UIView *_presentationSuperview;
    id _currentAction;

    UIView *_savedHeaderSuperview;
    UIView *_savedFooterSuperview;

    UIBarButtonItem *_editButtonItem;

    UISearchDisplayController *_searchDisplayController;

    UIModalTransitionStyle _modalTransitionStyle;

    UIInterfaceOrientation _lastKnownInterfaceOrientation;

    struct {
        unsigned int appearState:2;
        unsigned int isEditing:1;
        unsigned int isPerformingModalTransition:1;
        unsigned int hidesBottomBarWhenPushed:1;
        unsigned int autoresizesArchivedViewToFullSize:1;
        unsigned int viewLoadedFromControllerNib:1;
        unsigned int isRootViewController:1;
        unsigned int isSuspended:1;
        unsigned int wasApplicationFrameAtSuspend:1;
        unsigned int wantsFullScreenLayout:1;
        unsigned int shouldUseFullScreenLayout:1;
        unsigned int allowsAutorotation:1;
        unsigned int searchControllerRetained:1;
    } _viewControllerFlags;
}




- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil;

@property(nonatomic,retain) UIView *view;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidUnload __attribute__((weak_import));
- (BOOL)isViewLoaded __attribute__((weak_import));

@property(nonatomic, readonly, copy) NSString *nibName;
@property(nonatomic, readonly, retain) NSBundle *nibBundle;

- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;

@property(nonatomic,copy) NSString *title;

- (void)didReceiveMemoryWarning;

- (void)presentModalViewController:(UIViewController *)modalViewController animated:(BOOL)animated;
- (void)dismissModalViewControllerAnimated:(BOOL)animated;
@property(nonatomic,readonly) UIViewController *modalViewController;



@property(nonatomic,assign) UIModalTransitionStyle modalTransitionStyle __attribute__((weak_import));

@property(nonatomic,assign) BOOL wantsFullScreenLayout __attribute__((weak_import));

@property(nonatomic,readonly) UIViewController *parentViewController;

@end



@interface UIViewController (UIViewControllerRotation)

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation;


- (UIView *)rotatingHeaderView;
- (UIView *)rotatingFooterView;

@property(nonatomic,readonly) UIInterfaceOrientation interfaceOrientation;


- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;



- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration __attribute__((weak_import));



- (void)willAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;
- (void)didAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation;
- (void)willAnimateSecondHalfOfRotationFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation duration:(NSTimeInterval)duration;

@end



@interface UIViewController (UIViewControllerEditing)

@property(nonatomic,getter=isEditing) BOOL editing;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;

- (UIBarButtonItem *)editButtonItem;

@end

@interface UIViewController (UISearchDisplayControllerSupport)

@property(nonatomic, readonly, retain) UISearchDisplayController *searchDisplayController;

@end
# 11 "/var/include/UIKit/UINavigationController.h" 2
# 28 "/var/include/UIKit/UINavigationController.h"
extern __attribute__((visibility ("default"))) const CGFloat UINavigationControllerHideShowBarDuration;

@class UIView, UINavigationBar, UINavigationItem, UIToolbar;
@protocol UINavigationControllerDelegate;

__attribute__((visibility("default"))) @interface UINavigationController : UIViewController {
  @package
    UIView *_containerView;
    UINavigationBar *_navigationBar;
    Class _navigationBarClass;
    UIToolbar *_toolbar;
    UIView *_navigationTransitionView;

    UIEdgeInsets _currentScrollContentInsetDelta;
    UIEdgeInsets _previousScrollContentInsetDelta;
    CGFloat _previousScrollContentOffsetDelta;
    CGFloat _bottomInsetDelta;

    NSMutableArray *_viewControllers;
    UIViewController *_disappearingViewController;

    id <UINavigationControllerDelegate> _delegate;

    struct {
        unsigned int isAppearingAnimated:1;
        unsigned int isAlreadyPoppingNavigationItem:1;
        unsigned int isNavigationBarHidden:1;
        unsigned int isToolbarShown:1;
        unsigned int needsDeferredTransition:1;
        unsigned int isTransitioning:1;
        unsigned int lastOperation:4;
        unsigned int lastOperationAnimated:1;
        unsigned int deferredTransition:8;
        unsigned int didPreloadKeyboardAnimation:1;
        unsigned int didHideBottomBar:1;
        unsigned int isChangingOrientationForPop:1;
    } _navigationControllerFlags;
}

- (id)initWithRootViewController:(UIViewController *)rootViewController;

- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated;

- (UIViewController *)popViewControllerAnimated:(BOOL)animated;
- (NSArray *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated;
- (NSArray *)popToRootViewControllerAnimated:(BOOL)animated;

@property(nonatomic,readonly,retain) UIViewController *topViewController;
@property(nonatomic,readonly,retain) UIViewController *visibleViewController;

@property(nonatomic,copy) NSArray *viewControllers;
- (void)setViewControllers:(NSArray *)viewControllers animated:(BOOL)animated __attribute__((weak_import));

@property(nonatomic,getter=isNavigationBarHidden) BOOL navigationBarHidden;
- (void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
@property(nonatomic,readonly) UINavigationBar *navigationBar;

@property(nonatomic,getter=isToolbarHidden) BOOL toolbarHidden __attribute__((weak_import));
- (void)setToolbarHidden:(BOOL)hidden animated:(BOOL)animated __attribute__((weak_import));
@property(nonatomic,readonly) UIToolbar *toolbar __attribute__((weak_import));

@property(nonatomic, assign) id<UINavigationControllerDelegate> delegate;

@end

@protocol UINavigationControllerDelegate <NSObject>

@optional


- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated;
- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated;

@end

@interface UIViewController (UINavigationControllerItem)

@property(nonatomic,readonly,retain) UINavigationItem *navigationItem;
@property(nonatomic) BOOL hidesBottomBarWhenPushed;
@property(nonatomic,readonly,retain) UINavigationController *navigationController;

@end

@interface UIViewController (UINavigationControllerContextualToolbarItems)

@property (nonatomic, retain) NSArray *toolbarItems __attribute__((weak_import));
- (void)setToolbarItems:(NSArray *)toolbarItems animated:(BOOL)animated __attribute__((weak_import));

@end
# 10 "/var/include/UIKit/UIImagePickerController.h" 2


@class UIImage;
@protocol UIImagePickerControllerDelegate;

enum {
    UIImagePickerControllerSourceTypePhotoLibrary,
    UIImagePickerControllerSourceTypeCamera,
    UIImagePickerControllerSourceTypeSavedPhotosAlbum
};
typedef NSUInteger UIImagePickerControllerSourceType;


extern __attribute__((visibility ("default"))) NSString *const UIImagePickerControllerMediaType;
extern __attribute__((visibility ("default"))) NSString *const UIImagePickerControllerOriginalImage;
extern __attribute__((visibility ("default"))) NSString *const UIImagePickerControllerEditedImage;
extern __attribute__((visibility ("default"))) NSString *const UIImagePickerControllerCropRect;
extern __attribute__((visibility ("default"))) NSString *const UIImagePickerControllerMediaURL;

__attribute__((visibility("default"))) @interface UIImagePickerController : UINavigationController <NSCoding> {
  @private
    UIImagePickerControllerSourceType _sourceType;
    id _image;
    CGRect _cropRect;
    NSArray *_mediaTypes;
    NSDictionary *_options;
    int _previousStatusBarMode;

    struct {
        unsigned int allowsImageEditing:1;
        unsigned int visible:1;
        unsigned int isCleaningUp:1;
        unsigned int savingOptions:3;
        unsigned int didRevertStatusBar:1;
        unsigned int flags:1;
    } _imagePickerFlags;
}

+ (BOOL)isSourceTypeAvailable:(UIImagePickerControllerSourceType)sourceType;
+ (NSArray *)availableMediaTypesForSourceType:(UIImagePickerControllerSourceType)sourceType;

@property(nonatomic,assign) id <UINavigationControllerDelegate, UIImagePickerControllerDelegate> delegate;

@property(nonatomic) UIImagePickerControllerSourceType sourceType;
@property(nonatomic,copy) NSArray *mediaTypes;
@property(nonatomic) BOOL allowsImageEditing;

@end


@protocol UIImagePickerControllerDelegate<NSObject>
@optional



- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingImage:(UIImage *)image editingInfo:(NSDictionary *)editingInfo ;
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info;
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker;

@end




extern __attribute__((visibility ("default"))) void UIImageWriteToSavedPhotosAlbum(UIImage *image, id completionTarget, SEL completionSelector, void *contextInfo);
# 28 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIImageView.h" 1
# 12 "/var/include/UIKit/UIImageView.h"
@class UIImage;

__attribute__((visibility("default"))) @interface UIImageView : UIView {
  @private
    id _storage;
}

- (id)initWithImage:(UIImage *)image;
- (id)initWithImage:(UIImage *)image highlightedImage:(UIImage *)highlightedImage __attribute__((weak_import));

@property(nonatomic,retain) UIImage *image;
@property(nonatomic,retain) UIImage *highlightedImage __attribute__((weak_import));
@property(nonatomic,getter=isUserInteractionEnabled) BOOL userInteractionEnabled;

@property(nonatomic,getter=isHighlighted) BOOL highlighted __attribute__((weak_import));



@property(nonatomic,copy) NSArray *animationImages;
@property(nonatomic,copy) NSArray *highlightedAnimationImages __attribute__((weak_import));

@property(nonatomic) NSTimeInterval animationDuration;
@property(nonatomic) NSInteger animationRepeatCount;

- (void)startAnimating;
- (void)stopAnimating;
- (BOOL)isAnimating;

@end
# 29 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UILabel.h" 1
# 14 "/var/include/UIKit/UILabel.h"
@class UIColor, UIFont;

__attribute__((visibility("default"))) @interface UILabel : UIView <NSCoding>
{
  @private
    CGSize _size;
    NSString *_text;
    UIColor *_color;
    UIColor *_highlightedColor;
    UIColor *_shadowColor;
    UIFont *_font;
    CGSize _shadowOffset;
    CGFloat _minFontSize;
    CGFloat _actualFontSize;
    NSInteger _numberOfLines;
    CGFloat _lastLineBaseline;
    NSInteger _lineSpacing;
    struct {
        unsigned int lineBreakMode:3;
        unsigned int highlighted:1;
        unsigned int autosizeTextToFit:1;
        unsigned int baselineAdjustment:2;
        unsigned int alignment:2;
        unsigned int enabled:1;
        unsigned int wordRoundingEnabled:1;
        unsigned int explicitAlignment:1;
    } _textLabelFlags;
}

@property(nonatomic,copy) NSString *text;
@property(nonatomic,retain) UIFont *font;
@property(nonatomic,retain) UIColor *textColor;
@property(nonatomic,retain) UIColor *shadowColor;
@property(nonatomic) CGSize shadowOffset;
@property(nonatomic) UITextAlignment textAlignment;
@property(nonatomic) UILineBreakMode lineBreakMode;



@property(nonatomic,retain) UIColor *highlightedTextColor;
@property(nonatomic,getter=isHighlighted) BOOL highlighted;

@property(nonatomic,getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
@property(nonatomic,getter=isEnabled) BOOL enabled;





@property(nonatomic) NSInteger numberOfLines;




@property(nonatomic) BOOL adjustsFontSizeToFitWidth;
@property(nonatomic) CGFloat minimumFontSize;
@property(nonatomic) UIBaselineAdjustment baselineAdjustment;




- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines;
- (void)drawTextInRect:(CGRect)rect;

@end
# 31 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UILocalizedIndexedCollation.h" 1
# 13 "/var/include/UIKit/UILocalizedIndexedCollation.h"
extern __attribute__((visibility ("default"))) @interface UILocalizedIndexedCollation : NSObject
{
  @package
    NSLocale *_locale;
    NSArray *_sectionTitles;
    NSArray *_sectionStartStrings;
    NSArray *_sectionIndexTitles;
    NSArray *_sectionIndexMapping;
}

+ (id)currentCollation;


@property(nonatomic, readonly) NSArray *sectionTitles;


@property(nonatomic, readonly) NSArray *sectionIndexTitles;




- (NSInteger)sectionForSectionIndexTitleAtIndex:(NSInteger)indexTitleIndex;



- (NSInteger)sectionForObject:(id)object collationStringSelector:(SEL)selector;





- (NSArray *)sortedArrayFromArray:(NSArray *)array collationStringSelector:(SEL)selector;

@end
# 32 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIMenuController.h" 1
# 14 "/var/include/UIKit/UIMenuController.h"
@class UIView;

__attribute__((visibility("default"))) @interface UIMenuController : NSObject {
  @private
    CGRect _targetRect;
}

+ (UIMenuController *)sharedMenuController;

@property(nonatomic,getter=isMenuVisible) BOOL menuVisible;
- (void)setMenuVisible:(BOOL)menuVisible animated:(BOOL)animated;

- (void)setTargetRect:(CGRect)targetRect inView:(UIView *)targetView;

- (void)update;

@property(nonatomic,readonly) CGRect menuFrame;

@end

extern __attribute__((visibility ("default"))) NSString *const UIMenuControllerWillShowMenuNotification;
extern __attribute__((visibility ("default"))) NSString *const UIMenuControllerDidShowMenuNotification;
extern __attribute__((visibility ("default"))) NSString *const UIMenuControllerWillHideMenuNotification;
extern __attribute__((visibility ("default"))) NSString *const UIMenuControllerDidHideMenuNotification;
extern __attribute__((visibility ("default"))) NSString *const UIMenuControllerMenuFrameDidChangeNotification;
# 33 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UINavigationBar.h" 1
# 16 "/var/include/UIKit/UINavigationBar.h"
@class UINavigationItem, UIBarButtonItem, UIImage, UIColor;
@protocol UINavigationBarDelegate;

__attribute__((visibility("default"))) @interface UINavigationBar : UIView <NSCoding> {
  @private
    NSMutableArray *_itemStack;
    CGFloat _rightMargin;
    unsigned _state;
    id _delegate;
    UIView *_titleView;
    UIView *_leftView;
    UIView *_rightView;
    UIView *_prompt;
    UIView *_accessoryView;
    UIColor *_tintColor;
    struct {
        unsigned int animate:1;
        unsigned int animationDisabledCount:10;
        unsigned int transitioningBarStyle:1;
        unsigned int newBarStyle:3;
        unsigned int barStyle:3;
        unsigned int isTranslucent:1;
        unsigned int disableLayout:1;
        unsigned int backPressed:1;
        unsigned int animatePromptChange:1;
        unsigned int pendingHideBackButton:1;
        unsigned int titleAutosizesToFit:1;
        unsigned int usingNewAPI:1;
        unsigned int minibar:1;
        unsigned int forceFullHeightInLandscape:1;
        unsigned int isLocked:1;
        unsigned int shouldUpdatePromptAfterTransition:1;
        unsigned int roundedCorners:1;
    } _navbarFlags;
}

@property(nonatomic,assign) UIBarStyle barStyle;
@property(nonatomic,assign) id delegate;
@property(nonatomic,retain) UIColor *tintColor;
@property(nonatomic,assign,getter=isTranslucent) BOOL translucent __attribute__((weak_import));



- (void)pushNavigationItem:(UINavigationItem *)item animated:(BOOL)animated;
- (UINavigationItem *)popNavigationItemAnimated:(BOOL)animated;

@property(nonatomic,readonly,retain) UINavigationItem *topItem;
@property(nonatomic,readonly,retain) UINavigationItem *backItem;

@property(nonatomic,copy) NSArray *items;
- (void)setItems:(NSArray *)items animated:(BOOL)animated;

@end

@protocol UINavigationBarDelegate <NSObject>

@optional

- (BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPushItem:(UINavigationItem *)item;
- (void)navigationBar:(UINavigationBar *)navigationBar didPushItem:(UINavigationItem *)item;
- (BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPopItem:(UINavigationItem *)item;
- (void)navigationBar:(UINavigationBar *)navigationBar didPopItem:(UINavigationItem *)item;

@end

__attribute__((visibility("default"))) @interface UINavigationItem : NSObject <NSCoding> {
 @private
    NSString *_title;
    NSString *_backButtonTitle;
    UIBarButtonItem *_backBarButtonItem;
    NSString *_prompt;
    NSInteger _tag;
    id _context;
    UINavigationBar *_navigationBar;
    UIView *_defaultTitleView;
    UIView *_titleView;
    UIView *_backButtonView;
    UIBarButtonItem *_leftBarButtonItem;
    UIBarButtonItem *_rightBarButtonItem;
    UIView *_customLeftView;
    UIView *_customRightView;
    BOOL _hidesBackButton;
}

- (id)initWithTitle:(NSString *)title;

@property(nonatomic,copy) NSString *title;
@property(nonatomic,retain) UIBarButtonItem *backBarButtonItem;
@property(nonatomic,retain) UIView *titleView;

@property(nonatomic,copy) NSString *prompt;

@property(nonatomic,assign) BOOL hidesBackButton;
- (void)setHidesBackButton:(BOOL)hidesBackButton animated:(BOOL)animated;



@property(nonatomic,retain) UIBarButtonItem *leftBarButtonItem;
@property(nonatomic,retain) UIBarButtonItem *rightBarButtonItem;
- (void)setLeftBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated;
- (void)setRightBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated;

@end
# 34 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UINibDeclarations.h" 1
# 36 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UINibLoading.h" 1
# 11 "/var/include/UIKit/UINibLoading.h"
extern __attribute__((visibility ("default"))) NSString * const UINibExternalObjects __attribute__((weak_import));

@interface NSBundle(UINibLoadingAdditions)
- (NSArray *)loadNibNamed:(NSString *)name owner:(id)owner options:(NSDictionary *)options;
@end

@interface NSObject(UINibLoadingAdditions)
- (void)awakeFromNib;
@end

extern __attribute__((visibility ("default"))) NSString * const UINibProxiedObjectsKey ;
# 37 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIPageControl.h" 1
# 12 "/var/include/UIKit/UIPageControl.h"
__attribute__((visibility("default"))) @interface UIPageControl : UIControl {
  @private
    NSMutableArray* _indicators;
    NSInteger _currentPage;
    NSInteger _displayedPage;
    struct {
        unsigned int hideForSinglePage:1;
        unsigned int defersCurrentPageDisplay:1;
    } _pageControlFlags;
}

@property(nonatomic) NSInteger numberOfPages;
@property(nonatomic) NSInteger currentPage;

@property(nonatomic) BOOL hidesForSinglePage;

@property(nonatomic) BOOL defersCurrentPageDisplay;
- (void)updateCurrentPageDisplay;

- (CGSize)sizeForNumberOfPages:(NSInteger)pageCount;

@end
# 38 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIPasteboard.h" 1
# 13 "/var/include/UIKit/UIPasteboard.h"
extern __attribute__((visibility ("default"))) NSString *const UIPasteboardNameGeneral;
extern __attribute__((visibility ("default"))) NSString *const UIPasteboardNameFind;

@class UIColor, UIImage;

__attribute__((visibility("default"))) @interface UIPasteboard : NSObject {
  @private
    NSString *_name;
}

+ (UIPasteboard *)generalPasteboard;
+ (UIPasteboard *)pasteboardWithName:(NSString *)pasteboardName create:(BOOL)create;
+ (UIPasteboard *)pasteboardWithUniqueName;

@property(readonly,nonatomic) NSString *name;

+ (void)removePasteboardWithName:(NSString *)pasteboardName;

@property(getter=isPersistent,nonatomic) BOOL persistent;
@property(readonly,nonatomic) NSInteger changeCount;



- (NSArray *)pasteboardTypes;
- (BOOL)containsPasteboardTypes:(NSArray *)pasteboardTypes;
- (NSData *)dataForPasteboardType:(NSString *)pasteboardType;

- (id)valueForPasteboardType:(NSString *)pasteboardType;

- (void)setValue:(id)value forPasteboardType:(NSString *)pasteboardType;
- (void)setData:(NSData *)data forPasteboardType:(NSString *)pasteboardType;



@property(readonly,nonatomic) NSInteger numberOfItems;
- (NSArray *)pasteboardTypesForItemSet:(NSIndexSet*)itemSet;
- (BOOL)containsPasteboardTypes:(NSArray *)pasteboardTypes inItemSet:(NSIndexSet *)itemSet;
- (NSIndexSet *)itemSetWithPasteboardTypes:(NSArray *)pasteboardTypes;
- (NSArray *)valuesForPasteboardType:(NSString *)pasteboardType inItemSet:(NSIndexSet *)itemSet;
- (NSArray *)dataForPasteboardType:(NSString *)pasteboardType inItemSet:(NSIndexSet *)itemSet;



@property(nonatomic,copy) NSArray *items;
- (void)addItems:(NSArray *)items;

@end



extern __attribute__((visibility ("default"))) NSString *const UIPasteboardChangedNotification;
extern __attribute__((visibility ("default"))) NSString *const UIPasteboardChangedTypesAddedKey;
extern __attribute__((visibility ("default"))) NSString *const UIPasteboardChangedTypesRemovedKey;

extern __attribute__((visibility ("default"))) NSString *const UIPasteboardRemovedNotification;



extern __attribute__((visibility ("default"))) NSArray *UIPasteboardTypeListString;
extern __attribute__((visibility ("default"))) NSArray *UIPasteboardTypeListURL;
extern __attribute__((visibility ("default"))) NSArray *UIPasteboardTypeListImage;
extern __attribute__((visibility ("default"))) NSArray *UIPasteboardTypeListColor;

@interface UIPasteboard(UIPasteboardDataExtensions)

@property(nonatomic,copy) NSString *string;
@property(nonatomic,copy) NSArray *strings;

@property(nonatomic,copy) NSURL *URL;
@property(nonatomic,copy) NSArray *URLs;

@property(nonatomic,copy) UIImage *image;
@property(nonatomic,copy) NSArray *images;

@property(nonatomic,copy) UIColor *color;
@property(nonatomic,copy) NSArray *colors;

@end
# 39 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIPickerView.h" 1
# 13 "/var/include/UIKit/UIPickerView.h"
@protocol UIPickerViewDataSource, UIPickerViewDelegate;

__attribute__((visibility("default"))) @interface UIPickerView : UIView <NSCoding>
{
  @private
    NSMutableArray *_tables;
    UIView *_topFrame;
    NSMutableArray *_dividers;
    id<UIPickerViewDataSource> _dataSource;
    id<UIPickerViewDelegate> _delegate;
    UIView *_backgroundView;
    NSInteger _numberOfComponents;
  @package
    struct {
        unsigned int needsLayout:1;
        unsigned int delegateRespondsToNumberOfComponentsInPickerView:1;
        unsigned int delegateRespondsToNumberOfRowsInComponent:1;
        unsigned int delegateRespondsToDidSelectRow:1;
        unsigned int delegateRespondsToViewForRow:1;
        unsigned int delegateRespondsToTitleForRow:1;
        unsigned int delegateRespondsToWidthForComponent:1;
        unsigned int delegateRespondsToRowHeightForComponent:1;
        unsigned int showsSelectionBar:1;
        unsigned int allowsMultipleSelection:1;
        unsigned int allowSelectingCells:1;
        unsigned int soundsDisabled:1;
    } _pickerViewFlags;
}

@property(nonatomic,assign) id<UIPickerViewDataSource> dataSource;
@property(nonatomic,assign) id<UIPickerViewDelegate> delegate;
@property(nonatomic) BOOL showsSelectionIndicator;


@property(nonatomic,readonly) NSInteger numberOfComponents;
- (NSInteger)numberOfRowsInComponent:(NSInteger)component;
- (CGSize)rowSizeForComponent:(NSInteger)component;




- (UIView *)viewForRow:(NSInteger)row forComponent:(NSInteger)component;


- (void)reloadAllComponents;
- (void)reloadComponent:(NSInteger)component;


- (void)selectRow:(NSInteger)row inComponent:(NSInteger)component animated:(BOOL)animated;

- (NSInteger)selectedRowInComponent:(NSInteger)component;

@end


@protocol UIPickerViewDataSource<NSObject>
@required


- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView;


- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component;
@end


@protocol UIPickerViewDelegate<NSObject>
@optional


- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component;
- (CGFloat)pickerView:(UIPickerView *)pickerView rowHeightForComponent:(NSInteger)component;




- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component;
- (UIView *)pickerView:(UIPickerView *)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView *)view;

- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;

@end
# 40 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIProgressView.h" 1
# 12 "/var/include/UIKit/UIProgressView.h"
typedef enum {
    UIProgressViewStyleDefault,
    UIProgressViewStyleBar,
} UIProgressViewStyle;

__attribute__((visibility("default"))) @interface UIProgressView : UIView <NSCoding>
{
  @private
    UIProgressViewStyle _progressViewStyle;
    float _progress;
}

- (id)initWithProgressViewStyle:(UIProgressViewStyle)style;

@property(nonatomic) UIProgressViewStyle progressViewStyle;
@property(nonatomic) float progress;

@end
# 41 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UIScreen.h" 1
# 12 "/var/include/UIKit/UIScreen.h"
__attribute__((visibility("default"))) @interface UIScreen : NSObject {
  @private
    CGRect _bounds;
}

+ (UIScreen *)mainScreen;

@property(nonatomic,readonly) CGRect bounds;
@property(nonatomic,readonly) CGRect applicationFrame;

@end
# 43 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIScrollView.h" 1
# 14 "/var/include/UIKit/UIScrollView.h"
typedef enum {
    UIScrollViewIndicatorStyleDefault,
    UIScrollViewIndicatorStyleBlack,
    UIScrollViewIndicatorStyleWhite
} UIScrollViewIndicatorStyle;

extern __attribute__((visibility ("default"))) const float UIScrollViewDecelerationRateNormal __attribute__((weak_import));
extern __attribute__((visibility ("default"))) const float UIScrollViewDecelerationRateFast __attribute__((weak_import));

@class UIEvent, UIImageView;
@protocol UIScrollViewDelegate;

__attribute__((visibility("default"))) @interface UIScrollView : UIView <NSCoding> {
  @package
    CGSize _contentSize;
    UIEdgeInsets _contentInset;
    id _delegate;
    UIImageView* _verticalScrollIndicator;
    UIImageView* _horizontalScrollIndicator;
    UIEdgeInsets _scrollIndicatorInset;
    struct {
        unsigned int tracking:1;
        unsigned int dragging:1;
        unsigned int bounceEnabled:1;
        unsigned int bouncesZoom:1;
        unsigned int zoomBouncing:1;
        unsigned int alwaysBounceHorizontal:1;
        unsigned int alwaysBounceVertical:1;
        unsigned int canCancelContentTouches:1;
        unsigned int delaysContentTouches:1;
        unsigned int programmaticScrollDisabled:1;
        unsigned int scrollDisabled:1;
        unsigned int scrollTriggered:1;
        unsigned int scrollDisabledOnTouchBegan:1;
        unsigned int ignoreNextTouchesMoved:1;
        unsigned int cancelNextContentTouchEnded:1;
        unsigned int inContentViewCall:1;
        unsigned int dontSelect:1;
        unsigned int contentTouched:1;
        unsigned int cantCancel:1;
        unsigned int directionalLockEnabled:1;
        unsigned int directionalLockAutoEnabled:1;
        unsigned int lockVertical:1;
        unsigned int lockHorizontal:1;
        unsigned int keepLocked:1;
        unsigned int showsHorizontalScrollIndicator:1;
        unsigned int showsVerticalScrollIndicator:1;
        unsigned int indicatorStyle:2;
        unsigned int inZoom:1;
        unsigned int hideIndicatorsInZoom:1;
        unsigned int pushedTrackingMode:1;
        unsigned int multipleDrag:1;
        unsigned int displayingScrollIndicators:1;
        unsigned int verticalIndicatorShrunk:1;
        unsigned int horizontalIndicatorShrunk:1;
        unsigned int contentFitDisableScrolling:1;
        unsigned int pagingEnabled:1;
        unsigned int dontScrollToTop:1;
        unsigned int scrollingToTop:1;
        unsigned int useGestures:1;
        unsigned int autoscrolling:1;
        unsigned int automaticContentOffsetAdjustmentDisabled:1;
        unsigned int delegateScrollViewDidScroll:1;
    } _scrollViewFlags;
    CGFloat _scrollHysteresis;
    CGFloat _farthestDistance;
    CGPoint _initialTouchPosition;
    CGPoint _startTouchPosition;
    CFTimeInterval _startTouchTime;
    CGPoint _startOffset;
    CGPoint _lastTouchPosition;
    CFTimeInterval _lastTouchTime;
    CFTimeInterval _lastUpdateTime;
    CGPoint _lastUpdateOffset;
    UIView *_contentView;
    float _minimumZoomScale;
    float _maximumZoomScale;
    float _unadjustedZoomScale;
    UIView *_zoomView;
    double _horizontalVelocity;
    double _verticalVelocity;
    double _previousHorizontalVelocity;
    double _previousVerticalVelocity;
    CGPoint _stopOffset;
    CFTypeRef _scrollHeartbeat;
    CGSize _decelerationFactor;
    double _decelerationLnFactorH;
    double _decelerationLnFactorV;
    NSArray* _deferredBeginTouchesInfo;
    UIImageView **_shadows;
    id _scrollNotificationViews;
    CGSize _gridBounceLnFactor;
    CFTimeInterval _contentOffsetAnimationDuration;
    NSInteger _fastScrollCount;
    CGFloat _fastScrollMultiplier;
    CGFloat _fastScrollStartMultiplier;
    CFTimeInterval _fastScrollEndTime;
}

@property(nonatomic) CGPoint contentOffset;
@property(nonatomic) CGSize contentSize;
@property(nonatomic) UIEdgeInsets contentInset;
@property(nonatomic,assign) id<UIScrollViewDelegate> delegate;
@property(nonatomic,getter=isDirectionalLockEnabled) BOOL directionalLockEnabled;
@property(nonatomic) BOOL bounces;
@property(nonatomic) BOOL alwaysBounceVertical;
@property(nonatomic) BOOL alwaysBounceHorizontal;
@property(nonatomic,getter=isPagingEnabled) BOOL pagingEnabled;
@property(nonatomic,getter=isScrollEnabled) BOOL scrollEnabled;
@property(nonatomic) BOOL showsHorizontalScrollIndicator;
@property(nonatomic) BOOL showsVerticalScrollIndicator;
@property(nonatomic) UIEdgeInsets scrollIndicatorInsets;
@property(nonatomic) UIScrollViewIndicatorStyle indicatorStyle;
@property(nonatomic) float decelerationRate __attribute__((weak_import));

- (void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;
- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated;

- (void)flashScrollIndicators;
# 142 "/var/include/UIKit/UIScrollView.h"
@property(nonatomic,readonly,getter=isTracking) BOOL tracking;
@property(nonatomic,readonly,getter=isDragging) BOOL dragging;
@property(nonatomic,readonly,getter=isDecelerating) BOOL decelerating;

@property(nonatomic) BOOL delaysContentTouches;
@property(nonatomic) BOOL canCancelContentTouches;



- (BOOL)touchesShouldBegin:(NSSet *)touches withEvent:(UIEvent *)event inContentView:(UIView *)view;
- (BOOL)touchesShouldCancelInContentView:(UIView *)view;
# 161 "/var/include/UIKit/UIScrollView.h"
@property(nonatomic) float minimumZoomScale;
@property(nonatomic) float maximumZoomScale;

@property(nonatomic) float zoomScale __attribute__((weak_import));
- (void)setZoomScale:(float)scale animated:(BOOL)animated __attribute__((weak_import));
- (void)zoomToRect:(CGRect)rect animated:(BOOL)animated __attribute__((weak_import));

@property(nonatomic) BOOL bouncesZoom;

@property(nonatomic,readonly,getter=isZooming) BOOL zooming;
@property(nonatomic,readonly,getter=isZoomBouncing) BOOL zoomBouncing;





@property(nonatomic) BOOL scrollsToTop;

@end

@protocol UIScrollViewDelegate<NSObject>

@optional

- (void)scrollViewDidScroll:(UIScrollView *)scrollView;

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate;

- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView;

- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView;

- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(float)scale;

- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView;
- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView;

@end
# 44 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UISearchBar.h" 1
# 15 "/var/include/UIKit/UISearchBar.h"
@protocol UISearchBarDelegate;
@class UITextField, UILabel, UIButton, UIColor;

__attribute__((visibility("default"))) @interface UISearchBar : UIView {
  @private
    UITextField *_searchField;
    UILabel *_promptLabel;
    UIButton *_cancelButton;
    id<UISearchBarDelegate> _delegate;
    id _controller;
    UIColor *_tintColor;
    UIImageView *_separator;
    NSString *_cancelButtonText;
    NSArray *_scopes;
    NSInteger _selectedScope;
    UIView *_background;
    UIView *_scopeBar;
    UIEdgeInsets _contentInset;
    struct {
        unsigned int barStyle:3;
        unsigned int showsBookmarkButton:1;
        unsigned int showsCancelButton:1;
        unsigned int isTranslucent:1;
        unsigned int autoDisableCancelButton:1;
        unsigned int showsScopeBar:1;
        unsigned int hideBackground:1;
        unsigned int combinesLandscapeBars:1;
        unsigned int usesEmbeddedAppearance:1;
    } _searchBarFlags;
}

@property(nonatomic) UIBarStyle barStyle;
@property(nonatomic,assign) id<UISearchBarDelegate> delegate;
@property(nonatomic,copy) NSString *text;
@property(nonatomic,copy) NSString *prompt;
@property(nonatomic,copy) NSString *placeholder;
@property(nonatomic) BOOL showsBookmarkButton;
@property(nonatomic) BOOL showsCancelButton;
- (void)setShowsCancelButton:(BOOL)showsCancelButton animated:(BOOL)animated __attribute__((weak_import));

@property(nonatomic,retain) UIColor *tintColor;
@property(nonatomic,assign,getter=isTranslucent) BOOL translucent __attribute__((weak_import));


@property(nonatomic) UITextAutocapitalizationType autocapitalizationType;
@property(nonatomic) UITextAutocorrectionType autocorrectionType;
@property(nonatomic) UIKeyboardType keyboardType;

@property(nonatomic,copy) NSArray *scopeButtonTitles __attribute__((weak_import));
@property(nonatomic) NSInteger selectedScopeButtonIndex __attribute__((weak_import));
@property(nonatomic) BOOL showsScopeBar __attribute__((weak_import));

@end

@protocol UISearchBarDelegate <NSObject>

@optional

- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar;
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar;
- (BOOL)searchBarShouldEndEditing:(UISearchBar *)searchBar;
- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar;
- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText;
- (BOOL)searchBar:(UISearchBar *)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text __attribute__((weak_import));

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar;
- (void)searchBarBookmarkButtonClicked:(UISearchBar *)searchBar;
- (void)searchBarCancelButtonClicked:(UISearchBar *) searchBar;

- (void)searchBar:(UISearchBar *)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope __attribute__((weak_import));

@end
# 45 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UISearchDisplayController.h" 1
# 15 "/var/include/UIKit/UISearchDisplayController.h"
@class UISearchBar, UITableView, UIViewController;
@protocol UITableViewDataSource, UITableViewDelegate, UISearchDisplayDelegate;

__attribute__((visibility("default"))) @interface UISearchDisplayController : NSObject {
  @private
    UIViewController *_viewController;
    UITableView *_tableView;
    UIView *_dimmingView;
    UISearchBar *_searchBar;
    UILabel *_noResultsLabel;
    NSString *_noResultsMessage;
    id<UISearchDisplayDelegate> _delegate;
    id<UITableViewDataSource> _tableViewDataSource;
    id<UITableViewDelegate> _tableViewDelegate;
    CFMutableArrayRef _containingScrollViews;
    CGFloat _lastKeyboardAdjustment;
    struct {
        unsigned int visible:1;
        unsigned int animating:1;
        unsigned int hidIndexBar:1;
        unsigned int hidNavigationBar:1;
        unsigned int noResultsMessageVisible:1;
        unsigned int noResultsMessageAutoDisplay:1;
    } _searchDisplayControllerFlags;
}

- (id)initWithSearchBar:(UISearchBar *)searchBar contentsController:(UIViewController *)viewController;

@property(nonatomic,assign) id<UISearchDisplayDelegate> delegate;

@property(nonatomic,getter=isActive) BOOL active;
- (void)setActive:(BOOL)visible animated:(BOOL)animated;

@property(nonatomic,readonly) UISearchBar *searchBar;
@property(nonatomic,readonly) UIViewController *searchContentsController;
@property(nonatomic,readonly) UITableView *searchResultsTableView;
@property(nonatomic,assign) id<UITableViewDataSource> searchResultsDataSource;
@property(nonatomic,assign) id<UITableViewDelegate> searchResultsDelegate;

@end

@protocol UISearchDisplayDelegate <NSObject>

@optional


- (void) searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller;
- (void) searchDisplayControllerDidBeginSearch:(UISearchDisplayController *)controller;
- (void) searchDisplayControllerWillEndSearch:(UISearchDisplayController *)controller;
- (void) searchDisplayControllerDidEndSearch:(UISearchDisplayController *)controller;


- (void)searchDisplayController:(UISearchDisplayController *)controller didLoadSearchResultsTableView:(UITableView *)tableView;
- (void)searchDisplayController:(UISearchDisplayController *)controller willUnloadSearchResultsTableView:(UITableView *)tableView;


- (void)searchDisplayController:(UISearchDisplayController *)controller willShowSearchResultsTableView:(UITableView *)tableView;
- (void)searchDisplayController:(UISearchDisplayController *)controller didShowSearchResultsTableView:(UITableView *)tableView;
- (void)searchDisplayController:(UISearchDisplayController *)controller willHideSearchResultsTableView:(UITableView *)tableView;
- (void)searchDisplayController:(UISearchDisplayController *)controller didHideSearchResultsTableView:(UITableView *)tableView;


- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchString:(NSString *)searchString;
- (BOOL)searchDisplayController:(UISearchDisplayController *)controller shouldReloadTableForSearchScope:(NSInteger)searchOption;

@end
# 46 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UISegmentedControl.h" 1
# 13 "/var/include/UIKit/UISegmentedControl.h"
typedef enum {
    UISegmentedControlStylePlain,
    UISegmentedControlStyleBordered,
    UISegmentedControlStyleBar,
} UISegmentedControlStyle;

enum {
    UISegmentedControlNoSegment = -1
};

@class UIImage, UIColor;

__attribute__((visibility("default"))) @interface UISegmentedControl : UIControl <NSCoding>
{

    NSMutableArray *_segments;
    NSInteger _selectedSegment;
    NSInteger _highlightedSegment;
    id _delegate;
    UIColor *_tintColor;
    UIBarStyle _barStyle;
    struct {
        unsigned int style:3;
        unsigned int size:2;
        unsigned int showsDisclosure:1;
        unsigned int delegateSelectedSegmentChanged:1;
        unsigned int delegateDisclosureButtonClicked:1;
        unsigned int delegateAlwaysNotifiesDelegateOfSegmentClicks:1;
        unsigned int momentaryClick:1;
        unsigned int dontAlwaysToggleForTwoSegments:1;
        unsigned int tracking:1;
        unsigned int mouseInside:1;
        unsigned int autosizeToFitSegments:1;
        unsigned int isSizingToFit:1;
        unsigned int autosizeText:1;
        unsigned int transparentBackground:1;
    } _segmentedControlFlags;
}

- (id)initWithItems:(NSArray *)items;

@property(nonatomic) UISegmentedControlStyle segmentedControlStyle;
@property(nonatomic,getter=isMomentary) BOOL momentary;
@property(nonatomic,retain) UIColor *tintColor;

@property(nonatomic,readonly) NSUInteger numberOfSegments;

- (void)insertSegmentWithTitle:(NSString *)title atIndex:(NSUInteger)segment animated:(BOOL)animated;
- (void)insertSegmentWithImage:(UIImage *)image atIndex:(NSUInteger)segment animated:(BOOL)animated;
- (void)removeSegmentAtIndex:(NSUInteger)segment animated:(BOOL)animated;
- (void)removeAllSegments;

- (void)setTitle:(NSString *)title forSegmentAtIndex:(NSUInteger)segment;
- (NSString *)titleForSegmentAtIndex:(NSUInteger)segment;

- (void)setImage:(UIImage *)image forSegmentAtIndex:(NSUInteger)segment;
- (UIImage *)imageForSegmentAtIndex:(NSUInteger)segment;

- (void)setWidth:(CGFloat)width forSegmentAtIndex:(NSUInteger)segment;
- (CGFloat)widthForSegmentAtIndex:(NSUInteger)segment;

- (void)setContentOffset:(CGSize)offset forSegmentAtIndex:(NSUInteger)segment;
- (CGSize)contentOffsetForSegmentAtIndex:(NSUInteger)segment;

- (void)setEnabled:(BOOL)enabled forSegmentAtIndex:(NSUInteger)segment;
- (BOOL)isEnabledForSegmentAtIndex:(NSUInteger)segment;



@property(nonatomic) NSInteger selectedSegmentIndex;

@end
# 47 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UISlider.h" 1
# 13 "/var/include/UIKit/UISlider.h"
@class UIImageView, UIImage;

__attribute__((visibility("default"))) @interface UISlider : UIControl <NSCoding> {
  @package
    float _value;
    float _minValue;
    float _maxValue;

    CFMutableDictionaryRef _contentLookup;

    UIImageView *_minValueImageView;
    UIImageView *_maxValueImageView;
    UIImageView *_thumbView;
    UIImageView *_minTrackView;
    UIImageView *_maxTrackView;

    struct {
 unsigned int continuous:1;
 unsigned int animating:1;
 unsigned int showValue:1;
 unsigned int trackEnabled:1;
 unsigned int creatingSnapshot:1;
 unsigned int thumbDisabled:1;
    } _sliderFlags;

    CGFloat _hitOffset;
}

@property(nonatomic) float value;
@property(nonatomic) float minimumValue;
@property(nonatomic) float maximumValue;

@property(nonatomic,retain) UIImage *minimumValueImage;
@property(nonatomic,retain) UIImage *maximumValueImage;

@property(nonatomic,getter=isContinuous) BOOL continuous;

- (void)setValue:(float)value animated:(BOOL)animated;




- (void)setThumbImage:(UIImage *)image forState:(UIControlState)state;
- (void)setMinimumTrackImage:(UIImage *)image forState:(UIControlState)state;
- (void)setMaximumTrackImage:(UIImage *)image forState:(UIControlState)state;

- (UIImage *)thumbImageForState:(UIControlState)state;
- (UIImage *)minimumTrackImageForState:(UIControlState)state;
- (UIImage *)maximumTrackImageForState:(UIControlState)state;

@property(nonatomic,readonly) UIImage* currentThumbImage;
@property(nonatomic,readonly) UIImage* currentMinimumTrackImage;
@property(nonatomic,readonly) UIImage* currentMaximumTrackImage;


- (CGRect)minimumValueImageRectForBounds:(CGRect)bounds;
- (CGRect)maximumValueImageRectForBounds:(CGRect)bounds;
- (CGRect)trackRectForBounds:(CGRect)bounds;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;

@end
# 48 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UISwitch.h" 1
# 13 "/var/include/UIKit/UISwitch.h"
__attribute__((visibility("default"))) @interface UISwitch : UIControl <NSCoding> {
  @private
    id _control;
}

- (id)initWithFrame:(CGRect)frame;

@property(nonatomic,getter=isOn) BOOL on;
- (void)setOn:(BOOL)on animated:(BOOL)animated;

@end
# 50 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UITabBar.h" 1
# 12 "/var/include/UIKit/UITabBar.h"
@class UITabBarItem;
@protocol UITabBarDelegate;

__attribute__((visibility("default"))) @interface UITabBar : UIView {
  @private
    UIView* _customizeView;
    id<UITabBarDelegate> _delegate;
    NSArray *_items;
    UITabBarItem *_selectedItem;
    NSArray *_customizationItems;
    struct {
        unsigned int alertShown:1;
        unsigned int wasEnabled:1;
        unsigned int customized:1;
        unsigned int downButtonSentAction:1;
        unsigned int isLocked:1;
    } _tabBarFlags;
    NSArray *_buttonItems;
    CFMutableArrayRef _hiddenItems;
}

@property(nonatomic,assign) id<UITabBarDelegate> delegate;
@property(nonatomic,copy) NSArray *items;
@property(nonatomic,assign) UITabBarItem *selectedItem;

- (void)setItems:(NSArray *)items animated:(BOOL)animated;



- (void)beginCustomizingItems:(NSArray *)items;
- (BOOL)endCustomizingAnimated:(BOOL)animated;
- (BOOL)isCustomizing;

@end



@protocol UITabBarDelegate<NSObject>
@optional

- (void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item;






- (void)tabBar:(UITabBar *)tabBar willBeginCustomizingItems:(NSArray *)items;
- (void)tabBar:(UITabBar *)tabBar didBeginCustomizingItems:(NSArray *)items;
- (void)tabBar:(UITabBar *)tabBar willEndCustomizingItems:(NSArray *)items changed:(BOOL)changed;
- (void)tabBar:(UITabBar *)tabBar didEndCustomizingItems:(NSArray *)items changed:(BOOL)changed;

@end
# 51 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UITabBarController.h" 1
# 25 "/var/include/UIKit/UITabBarController.h"
@class UIView, UIImage, UINavigationController, UITabBarItem;
@protocol UITabBarControllerDelegate;

__attribute__((visibility("default"))) @interface UITabBarController : UIViewController <UITabBarDelegate, NSCoding> {
  @package
    UITabBar *_tabBar;

    UIView *_containerView;
    UIView *_viewControllerTransitionView;

    NSMutableArray *_viewControllers;
    id _tabBarItemsToViewControllers;
    UIViewController *_selectedViewController;

    UINavigationController *_moreNavigationController;
    NSArray *_customizableViewControllers;

    id<UITabBarControllerDelegate> _delegate;

    UIViewController *_selectedViewControllerDuringWillAppear;

    UIViewController *_transientViewController;

    struct {
 unsigned int isShowingMoreItem:1;
 unsigned int needsToRebuildItems:1;
 unsigned int isBarHidden:1;
    unsigned int editButtonOnLeft:1;
    } _tabBarControllerFlags;
}

@property(nonatomic,copy) NSArray *viewControllers;


- (void)setViewControllers:(NSArray *)viewControllers animated:(BOOL)animated;

@property(nonatomic,assign) UIViewController *selectedViewController;
@property(nonatomic) NSUInteger selectedIndex;

@property(nonatomic,readonly) UINavigationController *moreNavigationController;
@property(nonatomic,copy) NSArray *customizableViewControllers;

@property(nonatomic,readonly) UITabBar *tabBar __attribute__((weak_import));

@property(nonatomic,assign) id<UITabBarControllerDelegate> delegate;

@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController __attribute__((weak_import));
- (void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController;

- (void)tabBarController:(UITabBarController *)tabBarController willBeginCustomizingViewControllers:(NSArray *)viewControllers __attribute__((weak_import));
- (void)tabBarController:(UITabBarController *)tabBarController willEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed __attribute__((weak_import));
- (void)tabBarController:(UITabBarController *)tabBarController didEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed;
@end

@interface UIViewController (UITabBarControllerItem)

@property(nonatomic,retain) UITabBarItem *tabBarItem;

@property(nonatomic,readonly,retain) UITabBarController *tabBarController;

@end
# 52 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UITabBarItem.h" 1
# 13 "/var/include/UIKit/UITabBarItem.h"
typedef enum {
    UITabBarSystemItemMore,
    UITabBarSystemItemFavorites,
    UITabBarSystemItemFeatured,
    UITabBarSystemItemTopRated,
    UITabBarSystemItemRecents,
    UITabBarSystemItemContacts,
    UITabBarSystemItemHistory,
    UITabBarSystemItemBookmarks,
    UITabBarSystemItemSearch,
    UITabBarSystemItemDownloads,
    UITabBarSystemItemMostRecent,
    UITabBarSystemItemMostViewed,
} UITabBarSystemItem;

@class UIView, UIImage;

__attribute__((visibility("default"))) @interface UITabBarItem : UIBarItem {
@private
    NSString *_title;
    NSSet *_possibleTitles;
    SEL _action;
    id _target;
    UIImage *_image;
    UIImage *_selectedImage;
    UIImage *_unselectedImage;
    UIEdgeInsets _imageInsets;
    NSString *_badgeValue;
    UIView *_view;
    NSInteger _tag;
    struct {
 unsigned int enabled:1;
 unsigned int style:3;
 unsigned int isSystemItem:1;
 unsigned int systemItem:7;
 unsigned int viewIsCustom:1;
 unsigned int animatedBadge:1;
 unsigned int customSelectedImage:1;
 unsigned int customUnselectedImage:1;
    } _tabBarItemFlags;
}

- (id)initWithTitle:(NSString *)title image:(UIImage *)image tag:(NSInteger)tag;
- (id)initWithTabBarSystemItem:(UITabBarSystemItem)systemItem tag:(NSInteger)tag;

@property(nonatomic,copy) NSString *badgeValue;

@end
# 53 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UITableView.h" 1
# 11 "/var/include/UIKit/UITableView.h"
# 1 "/var/include/UIKit/UITableViewCell.h" 1
# 14 "/var/include/UIKit/UITableViewCell.h"
@class UIImage, UIColor, UILabel, UIImageView, UIButton, UITextField;

typedef enum {
    UITableViewCellStyleDefault,
    UITableViewCellStyleValue1,
    UITableViewCellStyleValue2,
    UITableViewCellStyleSubtitle
} UITableViewCellStyle;

typedef enum {
    UITableViewCellSeparatorStyleNone,
    UITableViewCellSeparatorStyleSingleLine
} UITableViewCellSeparatorStyle;

typedef enum {
    UITableViewCellSelectionStyleNone,
    UITableViewCellSelectionStyleBlue,
    UITableViewCellSelectionStyleGray
} UITableViewCellSelectionStyle;

typedef enum {
    UITableViewCellEditingStyleNone,
    UITableViewCellEditingStyleDelete,
    UITableViewCellEditingStyleInsert
} UITableViewCellEditingStyle;

typedef enum {
    UITableViewCellAccessoryNone,
    UITableViewCellAccessoryDisclosureIndicator,
    UITableViewCellAccessoryDetailDisclosureButton,
    UITableViewCellAccessoryCheckmark
} UITableViewCellAccessoryType;

enum {
    UITableViewCellStateDefaultMask = 0,
    UITableViewCellStateShowingEditControlMask = 1 << 0,
    UITableViewCellStateShowingDeleteConfirmationMask = 1 << 1
};
typedef NSUInteger UITableViewCellStateMask;



__attribute__((visibility("default"))) @interface UITableViewCell : UIView <NSCoding> {
  @private
    id _layoutManager;
    id _target;
    SEL _editAction;
    SEL _accessoryAction;
    id _oldEditingData;
    id _editingData;
    CGFloat _rightMargin;
    NSInteger _indentationLevel;
    CGFloat _indentationWidth;
    NSString *_reuseIdentifier;
    UIView *_contentView;
    UIImageView *_imageView;
    UILabel *_textLabel;
    UILabel *_detailTextLabel;
    UIView *_backgroundView;
    UIView *_selectedBackgroundView;
    UIView *_selectedOverlayView;
    UIColor *_backgroundColor;
    UIColor *_separatorColor;
    UIView *_floatingSeparatorView;
    CFMutableDictionaryRef _unhighlightedStates;
    struct {
        unsigned int showingDeleteConfirmation:1;
        unsigned int separatorStyle:3;
        unsigned int selectionStyle:3;
        unsigned int selectionFadeFraction:11;
        unsigned int editing:1;
        unsigned int editingStyle:3;
        unsigned int accessoryType:3;
        unsigned int editingAccessoryType:3;
        unsigned int showsAccessoryWhenEditing:1;
        unsigned int showsReorderControl:1;
        unsigned int showDisclosure:1;
        unsigned int showTopSeparator:1;

        unsigned int disclosureClickable:1;
        unsigned int disclosureStyle:1;
        unsigned int showingRemoveControl:1;
        unsigned int sectionLocation:3;
        unsigned int tableViewStyle:1;
        unsigned int shouldIndentWhileEditing:1;
        unsigned int fontSet:1;
        unsigned int usingDefaultSelectedBackgroundView:1;
        unsigned int wasSwiped:1;
        unsigned int highlighted:1;
        unsigned int separatorDirty:1;
        unsigned int drawn:1;
        unsigned int drawingDisabled:1;
        unsigned int style:12;
    } _tableCellFlags;

    UIButton *_accessoryView;
    UIButton *_editingAccessoryView;
    UIView *_customAccessoryView;
    UIView *_customEditingAccessoryView;
    UIView *_separatorView;
    UIView *_topSeparatorView;
    UITextField *_editableTextField;
    CFAbsoluteTime _lastSelectionTime;
    NSTimer *_deselectTimer;
    CGFloat _textFieldOffset;
    SEL _returnAction;
}


- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier __attribute__((weak_import));


@property(nonatomic,readonly,retain) UIImageView *imageView __attribute__((weak_import));

@property(nonatomic,readonly,retain) UILabel *textLabel __attribute__((weak_import));
@property(nonatomic,readonly,retain) UILabel *detailTextLabel __attribute__((weak_import));


@property(nonatomic,readonly,retain) UIView *contentView;


@property(nonatomic,retain) UIView *backgroundView;


@property(nonatomic,retain) UIView *selectedBackgroundView;

@property(nonatomic,readonly,copy) NSString *reuseIdentifier;
- (void)prepareForReuse;

@property(nonatomic) UITableViewCellSelectionStyle selectionStyle;
@property(nonatomic,getter=isSelected) BOOL selected;
@property(nonatomic,getter=isHighlighted) BOOL highlighted;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;

@property(nonatomic,readonly) UITableViewCellEditingStyle editingStyle;
@property(nonatomic) BOOL showsReorderControl;
@property(nonatomic) BOOL shouldIndentWhileEditing;

@property(nonatomic) UITableViewCellAccessoryType accessoryType;
@property(nonatomic,retain) UIView *accessoryView;
@property(nonatomic) UITableViewCellAccessoryType editingAccessoryType;
@property(nonatomic,retain) UIView *editingAccessoryView;

@property(nonatomic) NSInteger indentationLevel;
@property(nonatomic) CGFloat indentationWidth;

@property(nonatomic,getter=isEditing) BOOL editing;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;

@property(nonatomic,readonly) BOOL showingDeleteConfirmation;




- (void)willTransitionToState:(UITableViewCellStateMask)state __attribute__((weak_import));
- (void)didTransitionToState:(UITableViewCellStateMask)state __attribute__((weak_import));

@end

@interface UITableViewCell (UIDeprecated)


- (id)initWithFrame:(CGRect)frame reuseIdentifier:(NSString *)reuseIdentifier ;



@property(nonatomic,copy) NSString *text ;
@property(nonatomic,retain) UIFont *font ;
@property(nonatomic) UITextAlignment textAlignment ;
@property(nonatomic) UILineBreakMode lineBreakMode ;
@property(nonatomic,retain) UIColor *textColor ;
@property(nonatomic,retain) UIColor *selectedTextColor ;

@property(nonatomic,retain) UIImage *image ;
@property(nonatomic,retain) UIImage *selectedImage ;


@property(nonatomic) BOOL hidesAccessoryWhenEditing ;


@property(nonatomic,assign) id target ;
@property(nonatomic) SEL editAction ;
@property(nonatomic) SEL accessoryAction ;

@end
# 12 "/var/include/UIKit/UITableView.h" 2


typedef enum {
    UITableViewStylePlain,
    UITableViewStyleGrouped
} UITableViewStyle;

typedef enum {
    UITableViewScrollPositionNone,
    UITableViewScrollPositionTop,
    UITableViewScrollPositionMiddle,
    UITableViewScrollPositionBottom
} UITableViewScrollPosition;

typedef enum {
    UITableViewRowAnimationFade,
    UITableViewRowAnimationRight,
    UITableViewRowAnimationLeft,
    UITableViewRowAnimationTop,
    UITableViewRowAnimationBottom,
    UITableViewRowAnimationNone,
} UITableViewRowAnimation;



extern __attribute__((visibility ("default"))) NSString *const UITableViewIndexSearch __attribute__((weak_import));

@protocol UITableViewDataSource, UITableViewDelegate;

__attribute__((visibility("default"))) @interface UITableView : UIScrollView <NSCoding> {
  @private
    UITableViewStyle _style;

    id <UITableViewDataSource> _dataSource;

    id _rowData;
    CGFloat _rowHeight;
    CGFloat _sectionHeaderHeight;
    CGFloat _sectionFooterHeight;

    NSRange _visibleRows;
    NSMutableArray *_visibleCells;
    NSIndexPath *_firstResponderIndexPath;
    UITableViewCell *_firstResponderCell;
    NSMutableDictionary *_reusableTableCells;
    UITableViewCell *_topSeparatorCell;
    id _topSeparator;
    NSMutableArray *_extraSeparators;
    CFMutableDictionaryRef _visibleHeaderViews;
    CFMutableDictionaryRef _visibleFooterViews;
    NSMutableArray *_reusableHeaderViews;
    NSMutableArray *_reusableFooterViews;
    NSMutableArray *_reusableTransparentHeaderViews;
    NSMutableArray *_reusableTransparentFooterViews;

    NSMutableArray *_highlightedIndexPaths;
    NSMutableArray *_selectedIndexPaths;
    NSInteger _swipeToDeleteSection;
    NSInteger _swipeToDeleteRow;
    NSIndexPath *_pendingSelectionIndexPath;
    UIView *_touchedContentView;
    UIView *_newContentView;

    id _deleteAnimationSupport;
    id _reorderingSupport;

    UIView *_index;
    UIView *_tableHeaderBackgroundView;
    UIView *_tableHeaderView;
    UIView *_tableFooterView;
    id _countLabel;

    NSInteger _tableReloadingSuspendedCount;
    NSInteger _tableDisplaySuspendedCount;
    NSInteger _sectionIndexMinimumDisplayRowCount;
    NSInteger _itemCountFooterMinimumDisplayRowCount;

    NSMutableArray *_insertItems;
    NSMutableArray *_deleteItems;
    NSMutableArray *_reloadItems;

    UIColor *_separatorColor;
    UIColor *_checkmarkColor;

    NSArray *_defaultSectionIndexTitles;

    NSInteger _updateCount;

    struct {
        unsigned int dataSourceNumberOfRowsInSection:1;
        unsigned int dataSourceCellForRow:1;
        unsigned int dataSourceNumberOfSectionsInTableView:1;
        unsigned int dataSourceTitleForHeaderInSection:1;
        unsigned int dataSourceTitleForFooterInSection:1;
        unsigned int dataSourceCommitEditingStyle:1;
        unsigned int dataSourceSectionIndexTitlesForTableView:1;
        unsigned int dataSourceSectionForSectionIndexTitle:1;
        unsigned int dataSourceCanEditRow:1;
        unsigned int dataSourceCanMoveRow:1;
  unsigned int dataSourceCanUpdateRow:1;
        unsigned int delegateEditingStyleForRowAtIndexPath:1;
        unsigned int delegateTitleForDeleteConfirmationButtonForRowAtIndexPath:1;
        unsigned int delegateShouldIndentWhileEditing:1;
        unsigned int dataSourceMoveRow:1;
        unsigned int delegateCellForRow:1;
        unsigned int delegateWillDisplayCell:1;
        unsigned int delegateHeightForRow:1;
        unsigned int delegateHeightForSectionHeader:1;
        unsigned int delegateHeightForSectionFooter:1;
        unsigned int delegateViewForHeaderInSection:1;
        unsigned int delegateViewForFooterInSection:1;
        unsigned int delegateDisplayedItemCountForRowCount:1;
        unsigned int delegateDisplayStringForRowCount:1;
        unsigned int delegateAccessoryTypeForRow:1;
        unsigned int delegateAccessoryButtonTappedForRow:1;
        unsigned int delegateWillSelectRow:1;
        unsigned int delegateWillDeselectRow:1;
        unsigned int delegateDidSelectRow:1;
        unsigned int delegateDidDeselectRow:1;
        unsigned int delegateWillBeginEditing:1;
        unsigned int delegateDidEndEditing:1;
        unsigned int delegateWillMoveToRow:1;
        unsigned int delegateIndentationLevelForRow:1;
        unsigned int delegateWantsHeaderForSection:1;
        unsigned int delegateHeightForRowsInSection:1;
        unsigned int style:1;
        unsigned int separatorStyle:3;
        unsigned int wasEditing:1;
        unsigned int isEditing:1;
        unsigned int scrollsToSelection:1;
        unsigned int reloadSkippedDuringSuspension:1;
        unsigned int updating:1;
        unsigned int displaySkippedDuringSuspension:1;
        unsigned int needsReload:1;
        unsigned int updatingVisibleCellsManually:1;
        unsigned int scheduledUpdateVisibleCells:1;
        unsigned int scheduledUpdateVisibleCellsFrames:1;
        unsigned int warnForForcedCellUpdateDisabled:1;
        unsigned int displayTopSeparator:1;
        unsigned int countStringInsignificantRowCount:4;
        unsigned int needToAdjustExtraSeparators:1;
        unsigned int overlapsSectionHeaderViews:1;
        unsigned int ignoreDragSwipe:1;
        unsigned int ignoreTouchSelect:1;
        unsigned int lastHighlightedRowActive:1;
        unsigned int reloading:1;
        unsigned int allowsSelection:1;
        unsigned int allowsSelectionDuringEditing:1;
        unsigned int showsSelectionImmediatelyOnTouchBegin:1;
        unsigned int indexHidden:1;
        unsigned int indexHiddenForSearch:1;
        unsigned int defaultShowsHorizontalScrollIndicator:1;
        unsigned int defaultShowsVerticalScrollIndicator:1;
        unsigned int sectionIndexTitlesLoaded:1;
        unsigned int tableHeaderViewShouldAutoHide:1;
        unsigned int tableHeaderViewIsHidden:1;
        unsigned int tableHeaderViewWasHidden:1;
        unsigned int hideScrollIndicators;
    } _tableFlags;

    unsigned int _selectedSection;
    unsigned int _selectedRow;
    unsigned int _lastSelectedSection;
    unsigned int _lastSelectedRow;
}

- (id)initWithFrame:(CGRect)frame style:(UITableViewStyle)style;

@property(nonatomic,readonly) UITableViewStyle style;
@property(nonatomic,assign) id <UITableViewDataSource> dataSource;
@property(nonatomic,assign) id <UITableViewDelegate> delegate;
@property(nonatomic) CGFloat rowHeight;
@property(nonatomic) CGFloat sectionHeaderHeight;
@property(nonatomic) CGFloat sectionFooterHeight;



- (void)reloadData;
- (void)reloadSectionIndexTitles __attribute__((weak_import));



- (NSInteger)numberOfSections;
- (NSInteger)numberOfRowsInSection:(NSInteger)section;

- (CGRect)rectForSection:(NSInteger)section;
- (CGRect)rectForHeaderInSection:(NSInteger)section;
- (CGRect)rectForFooterInSection:(NSInteger)section;
- (CGRect)rectForRowAtIndexPath:(NSIndexPath *)indexPath;

- (NSIndexPath *)indexPathForRowAtPoint:(CGPoint)point;
- (NSIndexPath *)indexPathForCell:(UITableViewCell *)cell;
- (NSArray *)indexPathsForRowsInRect:(CGRect)rect;

- (UITableViewCell *)cellForRowAtIndexPath:(NSIndexPath *)indexPath;
- (NSArray *)visibleCells;
- (NSArray *)indexPathsForVisibleRows;

- (void)scrollToRowAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
- (void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;



- (void)beginUpdates;
- (void)endUpdates;

- (void)insertSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation;
- (void)deleteSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation;
- (void)reloadSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation __attribute__((weak_import));

- (void)insertRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
- (void)deleteRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation __attribute__((weak_import));



@property(nonatomic,getter=isEditing) BOOL editing;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;

@property(nonatomic) BOOL allowsSelection __attribute__((weak_import));
@property(nonatomic) BOOL allowsSelectionDuringEditing;



- (NSIndexPath *)indexPathForSelectedRow;


- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition;
- (void)deselectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated;



@property(nonatomic) NSInteger sectionIndexMinimumDisplayRowCount;

@property(nonatomic) UITableViewCellSeparatorStyle separatorStyle;
@property(nonatomic,retain) UIColor *separatorColor;

@property(nonatomic,retain) UIView *tableHeaderView;
@property(nonatomic,retain) UIView *tableFooterView;

- (UITableViewCell *)dequeueReusableCellWithIdentifier:(NSString *)identifier;

@end




@protocol UITableViewDataSource<NSObject>

@required

- (NSInteger)tableView:(UITableView *)table numberOfRowsInSection:(NSInteger)section;




- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;

@optional

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section;
- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section;




- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath;




- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath;



- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView;
- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index;




- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath;



- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath;

@end




@protocol UITableViewDelegate<NSObject, UIScrollViewDelegate>

@optional



- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath;



- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section;
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section;



- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section;
- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section;



- (UITableViewCellAccessoryType)tableView:(UITableView *)tableView accessoryTypeForRowWithIndexPath:(NSIndexPath *)indexPath ;
- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath;




- (NSIndexPath *)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath;
- (NSIndexPath *)tableView:(UITableView *)tableView willDeselectRowAtIndexPath:(NSIndexPath *)indexPath __attribute__((weak_import));

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath;
- (void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath __attribute__((weak_import));




- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath;
- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath __attribute__((weak_import));


- (BOOL)tableView:(UITableView *)tableView shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)indexPath;


- (void)tableView:(UITableView*)tableView willBeginEditingRowAtIndexPath:(NSIndexPath *)indexPath;
- (void)tableView:(UITableView*)tableView didEndEditingRowAtIndexPath:(NSIndexPath *)indexPath;




- (NSIndexPath *)tableView:(UITableView *)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)sourceIndexPath toProposedIndexPath:(NSIndexPath *)proposedDestinationIndexPath;



- (NSInteger)tableView:(UITableView *)tableView indentationLevelForRowAtIndexPath:(NSIndexPath *)indexPath;

@end

extern __attribute__((visibility ("default"))) NSString *const UITableViewSelectionDidChangeNotification;




@interface NSIndexPath (UITableView)

+ (NSIndexPath *)indexPathForRow:(NSUInteger)row inSection:(NSUInteger)section;

@property(nonatomic,readonly) NSUInteger section;
@property(nonatomic,readonly) NSUInteger row;

@end
# 54 "/var/include/UIKit/UIKit.h" 2

# 1 "/var/include/UIKit/UITableViewController.h" 1
# 17 "/var/include/UIKit/UITableViewController.h"
__attribute__((visibility("default"))) @interface UITableViewController : UIViewController <UITableViewDelegate, UITableViewDataSource> {
  @private
    UITableViewStyle _tableViewStyle;
    id _keyboardSupport;
}

- (id)initWithStyle:(UITableViewStyle)style;

@property(nonatomic,retain) UITableView *tableView;

@end
# 56 "/var/include/UIKit/UIKit.h" 2


# 1 "/var/include/UIKit/UITextView.h" 1
# 16 "/var/include/UIKit/UITextView.h"
@class DOMHTMLElement;
@class UIDelayedAction;
@class UIEvent, UITouch, UIFont, UIColor;
@class UITextInputTraits;
@class UITextInteractionAssistant;
@class UIWebDocumentView;
@class WebCoreFrameBridge;
@class WebFrame;
@protocol UITextViewDelegate;
@class UITextInteractionAssistant;
@class UITextSelectionView;

__attribute__((visibility("default"))) @interface UITextView : UIScrollView <UITextInputTraits>
{
  @package
    WebFrame *m_frame;
    DOMHTMLElement *m_body;
    int m_marginTop;
    UIDelayedAction *m_selectionTimer;
    UIDelayedAction *m_longPressAction;
    CGPoint m_touchPoint;
    CGPoint m_touchOffset;
    UITouch *m_syntheticTouch;
    BOOL m_editable;
    BOOL m_editing;
    BOOL m_becomesEditableWithGestures;
    BOOL m_selecting;
    BOOL m_handlingMouse;
    BOOL m_sentMouseDown;
    BOOL m_passMouseDownToOther;
    BOOL m_scrollOnMouseUp;
    BOOL m_reentrancyGuard;


    UITextInteractionAssistant *m_interactionAssistant;
    UITextSelectionView *m_selectionView;


    UIWebDocumentView *m_webView;
    UIFont *m_font;
    UIColor *m_textColor;
    UITextAlignment m_textAlignment;
}

@property(nonatomic,assign) id<UITextViewDelegate> delegate;
@property(nonatomic,copy) NSString *text;
@property(nonatomic,retain) UIFont *font;
@property(nonatomic,retain) UIColor *textColor;
@property(nonatomic) UITextAlignment textAlignment;
@property(nonatomic) NSRange selectedRange;
@property(nonatomic,getter=isEditable) BOOL editable;
@property(nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((weak_import));

- (BOOL)hasText;
- (void)scrollRangeToVisible:(NSRange)range;

@end

@protocol UITextViewDelegate <NSObject>

@optional

- (BOOL)textViewShouldBeginEditing:(UITextView *)textView;
- (BOOL)textViewShouldEndEditing:(UITextView *)textView;

- (void)textViewDidBeginEditing:(UITextView *)textView;
- (void)textViewDidEndEditing:(UITextView *)textView;

- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text;
- (void)textViewDidChange:(UITextView *)textView;

- (void)textViewDidChangeSelection:(UITextView *)textView;

@end

extern __attribute__((visibility ("default"))) NSString * const UITextViewTextDidBeginEditingNotification;
extern __attribute__((visibility ("default"))) NSString * const UITextViewTextDidChangeNotification;
extern __attribute__((visibility ("default"))) NSString * const UITextViewTextDidEndEditingNotification;
# 59 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIToolbar.h" 1
# 13 "/var/include/UIKit/UIToolbar.h"
@class UIBarButtonItem, UIColor;

__attribute__((visibility("default"))) @interface UIToolbar : UIView {
  @private
    UIView* _customizeView;
    id _delegate;
    NSArray *_items;
    UIBarButtonItem *_selectedItem;
    NSArray *_customizationItems;
    UIColor *_tintColor;
    struct {
        unsigned int barStyle:2;
        unsigned int mode:2;
        unsigned int alertShown:1;
        unsigned int wasEnabled:1;
        unsigned int customized:1;
        unsigned int downButtonSentAction:1;
        unsigned int roundedCorners:1;
        unsigned int isTranslucent:1;
    } _toolbarFlags;
    CFMutableDictionaryRef _groups;
    NSArray *_buttonItems;
    NSInteger _currentButtonGroup;
    CFMutableArrayRef _hiddenItems;
    NSInteger _selectedTag;
    NSInteger _trackingTag;
}

@property(nonatomic) UIBarStyle barStyle;
@property(nonatomic,copy) NSArray *items;
@property(nonatomic,retain) UIColor *tintColor;
@property(nonatomic,assign,getter=isTranslucent) BOOL translucent __attribute__((weak_import));

- (void)setItems:(NSArray *)items animated:(BOOL)animated;

@end
# 60 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UITouch.h" 1
# 12 "/var/include/UIKit/UITouch.h"
@class UIWindow, UIView;

typedef enum {
    UITouchPhaseBegan,
    UITouchPhaseMoved,
    UITouchPhaseStationary,
    UITouchPhaseEnded,
    UITouchPhaseCancelled,
} UITouchPhase;

__attribute__((visibility("default"))) @interface UITouch : NSObject
{
    NSTimeInterval _timestamp;
    UITouchPhase _phase;
    UITouchPhase _savedPhase;
    NSUInteger _tapCount;

    UIWindow *_window;
    UIView *_view;
    UIView *_gestureView;
    NSMutableArray *_gestureRecognizers;

    CGPoint _locationInWindow;
    CGPoint _previousLocationInWindow;
    struct {
        unsigned int _firstTouchForView:1;
        unsigned int _isTap:1;
        unsigned int _isWarped:1;
        unsigned int _isDelayed:1;
        unsigned int _sentTouchesEnded:1;
    } _touchFlags;
}

@property(nonatomic,readonly) NSTimeInterval timestamp;
@property(nonatomic,readonly) UITouchPhase phase;
@property(nonatomic,readonly) NSUInteger tapCount;

@property(nonatomic,readonly,retain) UIWindow *window;
@property(nonatomic,readonly,retain) UIView *view;

- (CGPoint)locationInView:(UIView *)view;
- (CGPoint)previousLocationInView:(UIView *)view;

@end
# 61 "/var/include/UIKit/UIKit.h" 2


# 1 "/var/include/UIKit/UIWebView.h" 1
# 12 "/var/include/UIKit/UIWebView.h"
enum {
    UIWebViewNavigationTypeLinkClicked,
    UIWebViewNavigationTypeFormSubmitted,
    UIWebViewNavigationTypeBackForward,
    UIWebViewNavigationTypeReload,
    UIWebViewNavigationTypeFormResubmitted,
    UIWebViewNavigationTypeOther
};
typedef NSUInteger UIWebViewNavigationType;

@class UIWebViewInternal;
@protocol UIWebViewDelegate;

__attribute__((visibility("default"))) @interface UIWebView : UIView <NSCoding> {
 @private
    UIWebViewInternal *_internal;
}

@property(nonatomic,assign) id<UIWebViewDelegate> delegate;

- (void)loadRequest:(NSURLRequest *)request;
- (void)loadHTMLString:(NSString *)string baseURL:(NSURL *)baseURL;
- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)textEncodingName baseURL:(NSURL *)baseURL;

@property(nonatomic,readonly,retain) NSURLRequest *request;

- (void)reload;
- (void)stopLoading;

- (void)goBack;
- (void)goForward;

@property(nonatomic,readonly,getter=canGoBack) BOOL canGoBack;
@property(nonatomic,readonly,getter=canGoForward) BOOL canGoForward;
@property(nonatomic,readonly,getter=isLoading) BOOL loading;

- (NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;

@property(nonatomic) BOOL scalesPageToFit;

@property(nonatomic) BOOL detectsPhoneNumbers ;
@property(nonatomic) UIDataDetectorTypes dataDetectorTypes __attribute__((weak_import));

@end

@protocol UIWebViewDelegate <NSObject>

@optional
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;
- (void)webViewDidStartLoad:(UIWebView *)webView;
- (void)webViewDidFinishLoad:(UIWebView *)webView;
- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error;

@end
# 64 "/var/include/UIKit/UIKit.h" 2
# 1 "/var/include/UIKit/UIWindow.h" 1
# 14 "/var/include/UIKit/UIWindow.h"
typedef CGFloat UIWindowLevel;

@class UIEvent, NSUndoManager;

__attribute__((visibility("default"))) @interface UIWindow : UIView {
  @package
    id _delegate;
    CGFloat _windowLevel;
    id _layerContext;
    UIView *_lastMouseDownView;
    UIView *_lastMouseEnteredView;
    UIResponder *_firstResponder;
    id _fingerInfo;
    id _touchData;
    UIInterfaceOrientation _viewOrientation;
    UIView *_exclusiveTouchView;
    NSUndoManager *_undoManager;
    struct {
        unsigned int delegateWillRotate:1;
        unsigned int delegateDidRotate:1;
        unsigned int delegateWillAnimateFirstHalf:1;
        unsigned int delegateDidAnimationFirstHalf:1;
        unsigned int delegateWillAnimateSecondHalf:1;
        unsigned int autorotatesToPortrait:1;
        unsigned int autorotatesToPortraitUpsideDown:1;
        unsigned int autorotatesToLandscapeLeft:1;
        unsigned int autorotatesToLandscapeRight:1;
        unsigned int dontBecomeKeyOnOrderFront:1;
        unsigned int output:1;
        unsigned int inGesture:1;
        unsigned int trackingStatusBar:1;
        unsigned int cancelScroller:1;
        unsigned int bitsPerComponent:4;
        unsigned int autorotates:1;
        unsigned int isRotating:1;
        unsigned int isUsingOnePartRotationAnimation:1;
        unsigned int isHandlingContentRotation:1;
        unsigned int disableAutorotationCount:4;
        unsigned int needsAutorotationWhenReenabled:1;
        unsigned int forceTwoPartRotationAnimation:1;
        unsigned int orderKeyboardInAfterRotating:1;
    } _windowFlags;

    id _windowController;
}

@property(nonatomic) UIWindowLevel windowLevel;
@property(nonatomic,readonly,getter=isKeyWindow) BOOL keyWindow;
- (void)becomeKeyWindow;
- (void)resignKeyWindow;

- (void)makeKeyWindow;
- (void)makeKeyAndVisible;

- (void)sendEvent:(UIEvent *)event;

- (CGPoint)convertPoint:(CGPoint)point toWindow:(UIWindow *)window;
- (CGPoint)convertPoint:(CGPoint)point fromWindow:(UIWindow *)window;
- (CGRect)convertRect:(CGRect)rect toWindow:(UIWindow *)window;
- (CGRect)convertRect:(CGRect)rect fromWindow:(UIWindow *)window;

@end

extern __attribute__((visibility ("default"))) const UIWindowLevel UIWindowLevelNormal;
extern __attribute__((visibility ("default"))) const UIWindowLevel UIWindowLevelAlert;
extern __attribute__((visibility ("default"))) const UIWindowLevel UIWindowLevelStatusBar;

extern __attribute__((visibility ("default"))) NSString *const UIWindowDidBecomeVisibleNotification;
extern __attribute__((visibility ("default"))) NSString *const UIWindowDidBecomeHiddenNotification;
extern __attribute__((visibility ("default"))) NSString *const UIWindowDidBecomeKeyNotification;
extern __attribute__((visibility ("default"))) NSString *const UIWindowDidResignKeyNotification;




extern __attribute__((visibility ("default"))) NSString *const UIKeyboardWillShowNotification;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardDidShowNotification;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardWillHideNotification;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardDidHideNotification;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardCenterBeginUserInfoKey;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardCenterEndUserInfoKey;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardBoundsUserInfoKey;
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardAnimationDurationUserInfoKey __attribute__((weak_import));
extern __attribute__((visibility ("default"))) NSString *const UIKeyboardAnimationCurveUserInfoKey __attribute__((weak_import));
# 64 "/var/include/UIKit/UIKit.h" 2
# 6 "test.c" 2

# 1 "/var/include/MediaPlayer/MPMediaLibrary.h" 1
# 9 "/var/include/MediaPlayer/MPMediaLibrary.h"
# 1 "/var/include/MediaPlayer/MediaPlayerDefines.h" 1
# 10 "/var/include/MediaPlayer/MPMediaLibrary.h" 2



@class MPMediaLibraryInternal, MPMediaQuery;




__attribute__((visibility("default"))) @interface MPMediaLibrary : NSObject {
@private
    MPMediaLibraryInternal *_internal;
}

+ (MPMediaLibrary *)defaultMediaLibrary;


@property(nonatomic, readonly) NSDate *lastModifiedDate;


- (void)beginGeneratingLibraryChangeNotifications;
- (void)endGeneratingLibraryChangeNotifications;

@end


extern __attribute__((visibility ("default"))) NSString *const MPMediaLibraryDidChangeNotification;
# 8 "test.c" 2
# 1 "/var/include/MediaPlayer/MPMediaQuery.h" 1
# 13 "/var/include/MediaPlayer/MPMediaQuery.h"
@class MPMediaQueryInternal, MPMediaPredicate, MPMediaPropertyPredicateInternal;

enum {
    MPMediaGroupingTitle,
    MPMediaGroupingAlbum,
    MPMediaGroupingArtist,
    MPMediaGroupingAlbumArtist,
    MPMediaGroupingComposer,
    MPMediaGroupingGenre,
    MPMediaGroupingPlaylist,
    MPMediaGroupingPodcastTitle
};
typedef NSInteger MPMediaGrouping;



__attribute__((visibility("default"))) @interface MPMediaQuery : NSObject <NSCoding> {
@private
    MPMediaQueryInternal *_internal;
}

- (id)init;
- (id)initWithFilterPredicates:(NSSet *)filterPredicates;
@property(nonatomic, retain) NSSet *filterPredicates;

- (void)addFilterPredicate:(MPMediaPredicate *)predicate;
- (void)removeFilterPredicate:(MPMediaPredicate *)predicate;



@property(nonatomic, readonly) NSArray *items;


@property(nonatomic, readonly) NSArray *collections;


@property(nonatomic) MPMediaGrouping groupingType;



+ (MPMediaQuery *)albumsQuery;
+ (MPMediaQuery *)artistsQuery;
+ (MPMediaQuery *)songsQuery;
+ (MPMediaQuery *)playlistsQuery;
+ (MPMediaQuery *)podcastsQuery;
+ (MPMediaQuery *)audiobooksQuery;
+ (MPMediaQuery *)compilationsQuery;
+ (MPMediaQuery *)composersQuery;
+ (MPMediaQuery *)genresQuery;

@end





__attribute__((visibility("default"))) @interface MPMediaPredicate : NSObject <NSCoding> {}
@end





enum {
    MPMediaPredicateComparisonEqualTo,
    MPMediaPredicateComparisonContains
};
typedef NSInteger MPMediaPredicateComparison;

__attribute__((visibility("default"))) @interface MPMediaPropertyPredicate : MPMediaPredicate {
@private
    MPMediaPropertyPredicateInternal *_internal;
}

+ (MPMediaPropertyPredicate *)predicateWithValue:(id)value forProperty:(NSString *)property;
+ (MPMediaPropertyPredicate *)predicateWithValue:(id)value forProperty:(NSString *)property comparisonType:(MPMediaPredicateComparison)comparisonType;

@property(nonatomic, readonly, copy) NSString *property;
@property(nonatomic, readonly, copy) id value;
@property(nonatomic, readonly) MPMediaPredicateComparison comparisonType;

@end
# 9 "test.c" 2
# 1 "/var/include/MediaPlayer/MPMediaItem.h" 1
# 14 "/var/include/MediaPlayer/MPMediaItem.h"
@class MPMediaItemArtworkInternal, MPMediaItemInternal, UIImage;

enum {

    MPMediaTypeMusic = 1 << 0,
    MPMediaTypePodcast = 1 << 1,
    MPMediaTypeAudioBook = 1 << 2,
    MPMediaTypeAnyAudio = 0x00ff,

    MPMediaTypeAny = ~0
};
typedef NSInteger MPMediaType;




__attribute__((visibility("default"))) @interface MPMediaItem : NSObject <NSCoding> {
@private
    MPMediaItemInternal *_internal;
}


+ (BOOL)canFilterByProperty:(NSString *)property;


- (id)valueForProperty:(NSString *)property;

@end



__attribute__((visibility("default"))) @interface MPMediaItemArtwork : NSObject {
@private
    MPMediaItemArtworkInternal *_internal;
}

- (UIImage *)imageWithSize:(CGSize)size;

@property(nonatomic, readonly) CGRect bounds;
@property(nonatomic, readonly) CGRect imageCropRect;

@end







extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyPersistentID;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyMediaType;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyTitle;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyAlbumTitle;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyArtist;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyAlbumArtist;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyGenre;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyComposer;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyPlaybackDuration;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyAlbumTrackNumber;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyAlbumTrackCount;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyDiscNumber;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyDiscCount;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyArtwork;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyLyrics;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyIsCompilation;


extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyPodcastTitle;


extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyPlayCount;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertySkipCount;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyRating;
extern __attribute__((visibility ("default"))) NSString *const MPMediaItemPropertyLastPlayedDate;
# 10 "test.c" 2
# 1 "/var/include/MediaPlayer/MPMediaPlaylist.h" 1
# 10 "/var/include/MediaPlayer/MPMediaPlaylist.h"
# 1 "/var/include/MediaPlayer/MPMediaItemCollection.h" 1
# 14 "/var/include/MediaPlayer/MPMediaItemCollection.h"
@class MPMediaItemCollectionInternal;



__attribute__((visibility("default"))) @interface MPMediaItemCollection : NSObject <NSCoding> {
@private
    MPMediaItemCollectionInternal *_internal;
}


+ (MPMediaItemCollection *)collectionWithItems:(NSArray *)items;

- (id)initWithItems:(NSArray *)items;


@property(nonatomic, readonly) NSArray *items;



@property(nonatomic, readonly) MPMediaItem *representativeItem;



@property(nonatomic, readonly) NSUInteger count;


@property(nonatomic, readonly) MPMediaType mediaTypes;

@end
# 11 "/var/include/MediaPlayer/MPMediaPlaylist.h" 2



@class MPMediaItem, MPMediaPlaylistInternal;


enum {
    MPMediaPlaylistAttributeNone = 0,
    MPMediaPlaylistAttributeOnTheGo = (1 << 0),
    MPMediaPlaylistAttributeSmart = (1 << 1),
    MPMediaPlaylistAttributeGenius = (1 << 2)
};
typedef NSInteger MPMediaPlaylistAttribute;




__attribute__((visibility("default"))) @interface MPMediaPlaylist : MPMediaItemCollection {
@private
    MPMediaPlaylistInternal *_playlistInternal;
}


+ (BOOL)canFilterByProperty:(NSString *)property;


- (id)valueForProperty:(NSString *)property;

@end




extern __attribute__((visibility ("default"))) NSString *const MPMediaPlaylistPropertyPersistentID;
extern __attribute__((visibility ("default"))) NSString *const MPMediaPlaylistPropertyName;
extern __attribute__((visibility ("default"))) NSString *const MPMediaPlaylistPropertyPlaylistAttributes;



extern __attribute__((visibility ("default"))) NSString *const MPMediaPlaylistPropertySeedItems;
# 11 "test.c" 2

# 1 "/var/include/AudioToolbox/AudioQueue.h" 1
# 62 "/var/include/AudioToolbox/AudioQueue.h"
# 1 "/var/include/CoreAudio/CoreAudioTypes.h" 1
# 71 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioValueRange
{
    Float64 mMinimum;
    Float64 mMaximum;
};
typedef struct AudioValueRange AudioValueRange;
# 90 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioValueTranslation
{
    void* mInputData;
    UInt32 mInputDataSize;
    void* mOutputData;
    UInt32 mOutputDataSize;
};
typedef struct AudioValueTranslation AudioValueTranslation;
# 109 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioBuffer
{
    UInt32 mNumberChannels;
    UInt32 mDataByteSize;
    void* mData;
};
typedef struct AudioBuffer AudioBuffer;
# 125 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioBufferList
{
    UInt32 mNumberBuffers;
    AudioBuffer mBuffers[1];
};
typedef struct AudioBufferList AudioBufferList;
# 140 "/var/include/CoreAudio/CoreAudioTypes.h"
typedef SInt16 AudioSampleType;
typedef SInt32 AudioUnitSampleType;
# 183 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioStreamBasicDescription
{
    Float64 mSampleRate;
    UInt32 mFormatID;
    UInt32 mFormatFlags;
    UInt32 mBytesPerPacket;
    UInt32 mFramesPerPacket;
    UInt32 mBytesPerFrame;
    UInt32 mChannelsPerFrame;
    UInt32 mBitsPerChannel;
    UInt32 mReserved;
};
typedef struct AudioStreamBasicDescription AudioStreamBasicDescription;
# 204 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioStreamAnyRate = 0
};
# 291 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioFormatLinearPCM = 'lpcm',
    kAudioFormatAC3 = 'ac-3',
    kAudioFormat60958AC3 = 'cac3',
    kAudioFormatAppleIMA4 = 'ima4',
    kAudioFormatMPEG4AAC = 'aac ',
    kAudioFormatMPEG4CELP = 'celp',
    kAudioFormatMPEG4HVXC = 'hvxc',
    kAudioFormatMPEG4TwinVQ = 'twvq',
    kAudioFormatMACE3 = 'MAC3',
    kAudioFormatMACE6 = 'MAC6',
    kAudioFormatULaw = 'ulaw',
    kAudioFormatALaw = 'alaw',
    kAudioFormatQDesign = 'QDMC',
    kAudioFormatQDesign2 = 'QDM2',
    kAudioFormatQUALCOMM = 'Qclp',
    kAudioFormatMPEGLayer1 = '.mp1',
    kAudioFormatMPEGLayer2 = '.mp2',
    kAudioFormatMPEGLayer3 = '.mp3',
    kAudioFormatTimeCode = 'time',
    kAudioFormatMIDIStream = 'midi',
    kAudioFormatParameterValueStream = 'apvs',
    kAudioFormatAppleLossless = 'alac',
    kAudioFormatMPEG4AAC_HE = 'aach',
    kAudioFormatMPEG4AAC_LD = 'aacl',
    kAudioFormatMPEG4AAC_HE_V2 = 'aacp',
    kAudioFormatMPEG4AAC_Spatial = 'aacs',
    kAudioFormatAMR = 'samr',
    kAudioFormatAudible = 'AUDB',
    kAudioFormatiLBC = 'ilbc',
    kAudioFormatDVIIntelIMA = 0x6D730011,
    kAudioFormatMicrosoftGSM = 0x6D730031,
    kAudioFormatAES3 = 'aes3'
};
# 409 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioFormatFlagIsFloat = (1 << 0),
    kAudioFormatFlagIsBigEndian = (1 << 1),
    kAudioFormatFlagIsSignedInteger = (1 << 2),
    kAudioFormatFlagIsPacked = (1 << 3),
    kAudioFormatFlagIsAlignedHigh = (1 << 4),
    kAudioFormatFlagIsNonInterleaved = (1 << 5),
    kAudioFormatFlagIsNonMixable = (1 << 6),
    kAudioFormatFlagsAreAllClear = (1 << 31),

    kLinearPCMFormatFlagIsFloat = kAudioFormatFlagIsFloat,
    kLinearPCMFormatFlagIsBigEndian = kAudioFormatFlagIsBigEndian,
    kLinearPCMFormatFlagIsSignedInteger = kAudioFormatFlagIsSignedInteger,
    kLinearPCMFormatFlagIsPacked = kAudioFormatFlagIsPacked,
    kLinearPCMFormatFlagIsAlignedHigh = kAudioFormatFlagIsAlignedHigh,
    kLinearPCMFormatFlagIsNonInterleaved = kAudioFormatFlagIsNonInterleaved,
    kLinearPCMFormatFlagIsNonMixable = kAudioFormatFlagIsNonMixable,
    kLinearPCMFormatFlagsSampleFractionShift = 7,
    kLinearPCMFormatFlagsSampleFractionMask = (0x3F << kLinearPCMFormatFlagsSampleFractionShift),
    kLinearPCMFormatFlagsAreAllClear = kAudioFormatFlagsAreAllClear,

    kAppleLosslessFormatFlag_16BitSourceData = 1,
    kAppleLosslessFormatFlag_20BitSourceData = 2,
    kAppleLosslessFormatFlag_24BitSourceData = 3,
    kAppleLosslessFormatFlag_32BitSourceData = 4
};
# 451 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{



    kAudioFormatFlagsNativeEndian = 0,





    kAudioFormatFlagsCanonical = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagsNativeEndian | kAudioFormatFlagIsPacked,
    kAudioFormatFlagsAudioUnitCanonical = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagsNativeEndian | kAudioFormatFlagIsPacked | kAudioFormatFlagIsNonInterleaved | (24 << kLinearPCMFormatFlagsSampleFractionShift),

    kAudioFormatFlagsNativeFloatPacked = kAudioFormatFlagIsFloat | kAudioFormatFlagsNativeEndian | kAudioFormatFlagIsPacked
};
# 546 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioStreamPacketDescription
{
    SInt64 mStartOffset;
    UInt32 mVariableFramesInPacket;
    UInt32 mDataByteSize;
};
typedef struct AudioStreamPacketDescription AudioStreamPacketDescription;
# 580 "/var/include/CoreAudio/CoreAudioTypes.h"
struct SMPTETime
{
    SInt16 mSubframes;
    SInt16 mSubframeDivisor;
    UInt32 mCounter;
    UInt32 mType;
    UInt32 mFlags;
    SInt16 mHours;
    SInt16 mMinutes;
    SInt16 mSeconds;
    SInt16 mFrames;
};
typedef struct SMPTETime SMPTETime;
# 622 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kSMPTETimeType24 = 0,
    kSMPTETimeType25 = 1,
    kSMPTETimeType30Drop = 2,
    kSMPTETimeType30 = 3,
    kSMPTETimeType2997 = 4,
    kSMPTETimeType2997Drop = 5,
    kSMPTETimeType60 = 6,
    kSMPTETimeType5994 = 7,
    kSMPTETimeType60Drop = 8,
    kSMPTETimeType5994Drop = 9,
    kSMPTETimeType50 = 10,
    kSMPTETimeType2398 = 11
};
# 646 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kSMPTETimeValid = (1 << 0),
    kSMPTETimeRunning = (1 << 1)
};
# 673 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioTimeStamp
{
    Float64 mSampleTime;
    UInt64 mHostTime;
    Float64 mRateScalar;
    UInt64 mWordClockTime;
    SMPTETime mSMPTETime;
    UInt32 mFlags;
    UInt32 mReserved;
};
typedef struct AudioTimeStamp AudioTimeStamp;
# 699 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioTimeStampSampleTimeValid = (1 << 0),
    kAudioTimeStampHostTimeValid = (1 << 1),
    kAudioTimeStampRateScalarValid = (1 << 2),
    kAudioTimeStampWordClockTimeValid = (1 << 3),
    kAudioTimeStampSMPTETimeValid = (1 << 4)
};







enum
{
    kAudioTimeStampSampleHostTimeValid = (kAudioTimeStampSampleTimeValid | kAudioTimeStampHostTimeValid)
};
# 768 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioClassDescription {
    OSType mType;
    OSType mSubType;
    OSType mManufacturer;
};
typedef struct AudioClassDescription AudioClassDescription;






typedef UInt32 AudioChannelLabel;





typedef UInt32 AudioChannelLayoutTag;
# 798 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioChannelDescription
{
    AudioChannelLabel mChannelLabel;
    UInt32 mChannelFlags;
    Float32 mCoordinates[3];
};
typedef struct AudioChannelDescription AudioChannelDescription;
# 820 "/var/include/CoreAudio/CoreAudioTypes.h"
struct AudioChannelLayout
{
    AudioChannelLayoutTag mChannelLayoutTag;
    UInt32 mChannelBitmap;
    UInt32 mNumberChannelDescriptions;
    AudioChannelDescription mChannelDescriptions[1];
};
typedef struct AudioChannelLayout AudioChannelLayout;
# 844 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioChannelLabel_Unknown = 0xFFFFFFFF,
    kAudioChannelLabel_Unused = 0,
    kAudioChannelLabel_UseCoordinates = 100,

    kAudioChannelLabel_Left = 1,
    kAudioChannelLabel_Right = 2,
    kAudioChannelLabel_Center = 3,
    kAudioChannelLabel_LFEScreen = 4,
    kAudioChannelLabel_LeftSurround = 5,
    kAudioChannelLabel_RightSurround = 6,
    kAudioChannelLabel_LeftCenter = 7,
    kAudioChannelLabel_RightCenter = 8,
    kAudioChannelLabel_CenterSurround = 9,
    kAudioChannelLabel_LeftSurroundDirect = 10,
    kAudioChannelLabel_RightSurroundDirect = 11,
    kAudioChannelLabel_TopCenterSurround = 12,
    kAudioChannelLabel_VerticalHeightLeft = 13,
    kAudioChannelLabel_VerticalHeightCenter = 14,
    kAudioChannelLabel_VerticalHeightRight = 15,

    kAudioChannelLabel_TopBackLeft = 16,
    kAudioChannelLabel_TopBackCenter = 17,
    kAudioChannelLabel_TopBackRight = 18,

    kAudioChannelLabel_RearSurroundLeft = 33,
    kAudioChannelLabel_RearSurroundRight = 34,
    kAudioChannelLabel_LeftWide = 35,
    kAudioChannelLabel_RightWide = 36,
    kAudioChannelLabel_LFE2 = 37,
    kAudioChannelLabel_LeftTotal = 38,
    kAudioChannelLabel_RightTotal = 39,
    kAudioChannelLabel_HearingImpaired = 40,
    kAudioChannelLabel_Narration = 41,
    kAudioChannelLabel_Mono = 42,
    kAudioChannelLabel_DialogCentricMix = 43,

    kAudioChannelLabel_CenterSurroundDirect = 44,

    kAudioChannelLabel_Haptic = 45,


    kAudioChannelLabel_Ambisonic_W = 200,
    kAudioChannelLabel_Ambisonic_X = 201,
    kAudioChannelLabel_Ambisonic_Y = 202,
    kAudioChannelLabel_Ambisonic_Z = 203,


    kAudioChannelLabel_MS_Mid = 204,
    kAudioChannelLabel_MS_Side = 205,


    kAudioChannelLabel_XY_X = 206,
    kAudioChannelLabel_XY_Y = 207,


    kAudioChannelLabel_HeadphonesLeft = 301,
    kAudioChannelLabel_HeadphonesRight = 302,
    kAudioChannelLabel_ClickTrack = 304,
    kAudioChannelLabel_ForeignLanguage = 305,


    kAudioChannelLabel_Discrete = 400,


    kAudioChannelLabel_Discrete_0 = (1<<16) | 0,
    kAudioChannelLabel_Discrete_1 = (1<<16) | 1,
    kAudioChannelLabel_Discrete_2 = (1<<16) | 2,
    kAudioChannelLabel_Discrete_3 = (1<<16) | 3,
    kAudioChannelLabel_Discrete_4 = (1<<16) | 4,
    kAudioChannelLabel_Discrete_5 = (1<<16) | 5,
    kAudioChannelLabel_Discrete_6 = (1<<16) | 6,
    kAudioChannelLabel_Discrete_7 = (1<<16) | 7,
    kAudioChannelLabel_Discrete_8 = (1<<16) | 8,
    kAudioChannelLabel_Discrete_9 = (1<<16) | 9,
    kAudioChannelLabel_Discrete_10 = (1<<16) | 10,
    kAudioChannelLabel_Discrete_11 = (1<<16) | 11,
    kAudioChannelLabel_Discrete_12 = (1<<16) | 12,
    kAudioChannelLabel_Discrete_13 = (1<<16) | 13,
    kAudioChannelLabel_Discrete_14 = (1<<16) | 14,
    kAudioChannelLabel_Discrete_15 = (1<<16) | 15,
    kAudioChannelLabel_Discrete_65535 = (1<<16) | 65535
};






enum
{
    kAudioChannelBit_Left = (1<<0),
    kAudioChannelBit_Right = (1<<1),
    kAudioChannelBit_Center = (1<<2),
    kAudioChannelBit_LFEScreen = (1<<3),
    kAudioChannelBit_LeftSurround = (1<<4),
    kAudioChannelBit_RightSurround = (1<<5),
    kAudioChannelBit_LeftCenter = (1<<6),
    kAudioChannelBit_RightCenter = (1<<7),
    kAudioChannelBit_CenterSurround = (1<<8),
    kAudioChannelBit_LeftSurroundDirect = (1<<9),
    kAudioChannelBit_RightSurroundDirect = (1<<10),
    kAudioChannelBit_TopCenterSurround = (1<<11),
    kAudioChannelBit_VerticalHeightLeft = (1<<12),
    kAudioChannelBit_VerticalHeightCenter = (1<<13),
    kAudioChannelBit_VerticalHeightRight = (1<<14),
    kAudioChannelBit_TopBackLeft = (1<<15),
    kAudioChannelBit_TopBackCenter = (1<<16),
    kAudioChannelBit_TopBackRight = (1<<17)
};
# 972 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioChannelFlags_AllOff = 0,
    kAudioChannelFlags_RectangularCoordinates = (1<<0),
    kAudioChannelFlags_SphericalCoordinates = (1<<1),
    kAudioChannelFlags_Meters = (1<<2)
};
# 1001 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kAudioChannelCoordinates_LeftRight = 0,
    kAudioChannelCoordinates_BackFront = 1,
    kAudioChannelCoordinates_DownUp = 2,
    kAudioChannelCoordinates_Azimuth = 0,
    kAudioChannelCoordinates_Elevation = 1,
    kAudioChannelCoordinates_Distance = 2
};
# 1028 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
# 1053 "/var/include/CoreAudio/CoreAudioTypes.h"
    kAudioChannelLayoutTag_UseChannelDescriptions = (0<<16) | 0,
    kAudioChannelLayoutTag_UseChannelBitmap = (1<<16) | 0,

    kAudioChannelLayoutTag_Mono = (100<<16) | 1,
    kAudioChannelLayoutTag_Stereo = (101<<16) | 2,
    kAudioChannelLayoutTag_StereoHeadphones = (102<<16) | 2,
    kAudioChannelLayoutTag_MatrixStereo = (103<<16) | 2,
    kAudioChannelLayoutTag_MidSide = (104<<16) | 2,
    kAudioChannelLayoutTag_XY = (105<<16) | 2,
    kAudioChannelLayoutTag_Binaural = (106<<16) | 2,
    kAudioChannelLayoutTag_Ambisonic_B_Format = (107<<16) | 4,

    kAudioChannelLayoutTag_Quadraphonic = (108<<16) | 4,
    kAudioChannelLayoutTag_Pentagonal = (109<<16) | 5,
    kAudioChannelLayoutTag_Hexagonal = (110<<16) | 6,
    kAudioChannelLayoutTag_Octagonal = (111<<16) | 8,
    kAudioChannelLayoutTag_Cube = (112<<16) | 8,



    kAudioChannelLayoutTag_MPEG_1_0 = kAudioChannelLayoutTag_Mono,
    kAudioChannelLayoutTag_MPEG_2_0 = kAudioChannelLayoutTag_Stereo,
    kAudioChannelLayoutTag_MPEG_3_0_A = (113<<16) | 3,
    kAudioChannelLayoutTag_MPEG_3_0_B = (114<<16) | 3,
    kAudioChannelLayoutTag_MPEG_4_0_A = (115<<16) | 4,
    kAudioChannelLayoutTag_MPEG_4_0_B = (116<<16) | 4,
    kAudioChannelLayoutTag_MPEG_5_0_A = (117<<16) | 5,
    kAudioChannelLayoutTag_MPEG_5_0_B = (118<<16) | 5,
    kAudioChannelLayoutTag_MPEG_5_0_C = (119<<16) | 5,
    kAudioChannelLayoutTag_MPEG_5_0_D = (120<<16) | 5,
    kAudioChannelLayoutTag_MPEG_5_1_A = (121<<16) | 6,
    kAudioChannelLayoutTag_MPEG_5_1_B = (122<<16) | 6,
    kAudioChannelLayoutTag_MPEG_5_1_C = (123<<16) | 6,
    kAudioChannelLayoutTag_MPEG_5_1_D = (124<<16) | 6,
    kAudioChannelLayoutTag_MPEG_6_1_A = (125<<16) | 7,
    kAudioChannelLayoutTag_MPEG_7_1_A = (126<<16) | 8,
    kAudioChannelLayoutTag_MPEG_7_1_B = (127<<16) | 8,
    kAudioChannelLayoutTag_MPEG_7_1_C = (128<<16) | 8,
    kAudioChannelLayoutTag_Emagic_Default_7_1 = (129<<16) | 8,
    kAudioChannelLayoutTag_SMPTE_DTV = (130<<16) | 8,



    kAudioChannelLayoutTag_ITU_1_0 = kAudioChannelLayoutTag_Mono,
    kAudioChannelLayoutTag_ITU_2_0 = kAudioChannelLayoutTag_Stereo,

    kAudioChannelLayoutTag_ITU_2_1 = (131<<16) | 3,
    kAudioChannelLayoutTag_ITU_2_2 = (132<<16) | 4,
    kAudioChannelLayoutTag_ITU_3_0 = kAudioChannelLayoutTag_MPEG_3_0_A,
    kAudioChannelLayoutTag_ITU_3_1 = kAudioChannelLayoutTag_MPEG_4_0_A,

    kAudioChannelLayoutTag_ITU_3_2 = kAudioChannelLayoutTag_MPEG_5_0_A,
    kAudioChannelLayoutTag_ITU_3_2_1 = kAudioChannelLayoutTag_MPEG_5_1_A,
    kAudioChannelLayoutTag_ITU_3_4_1 = kAudioChannelLayoutTag_MPEG_7_1_C,


    kAudioChannelLayoutTag_DVD_0 = kAudioChannelLayoutTag_Mono,
    kAudioChannelLayoutTag_DVD_1 = kAudioChannelLayoutTag_Stereo,
    kAudioChannelLayoutTag_DVD_2 = kAudioChannelLayoutTag_ITU_2_1,
    kAudioChannelLayoutTag_DVD_3 = kAudioChannelLayoutTag_ITU_2_2,
    kAudioChannelLayoutTag_DVD_4 = (133<<16) | 3,
    kAudioChannelLayoutTag_DVD_5 = (134<<16) | 4,
    kAudioChannelLayoutTag_DVD_6 = (135<<16) | 5,
    kAudioChannelLayoutTag_DVD_7 = kAudioChannelLayoutTag_MPEG_3_0_A,
    kAudioChannelLayoutTag_DVD_8 = kAudioChannelLayoutTag_MPEG_4_0_A,
    kAudioChannelLayoutTag_DVD_9 = kAudioChannelLayoutTag_MPEG_5_0_A,
    kAudioChannelLayoutTag_DVD_10 = (136<<16) | 4,
    kAudioChannelLayoutTag_DVD_11 = (137<<16) | 5,
    kAudioChannelLayoutTag_DVD_12 = kAudioChannelLayoutTag_MPEG_5_1_A,

    kAudioChannelLayoutTag_DVD_13 = kAudioChannelLayoutTag_DVD_8,
    kAudioChannelLayoutTag_DVD_14 = kAudioChannelLayoutTag_DVD_9,
    kAudioChannelLayoutTag_DVD_15 = kAudioChannelLayoutTag_DVD_10,
    kAudioChannelLayoutTag_DVD_16 = kAudioChannelLayoutTag_DVD_11,
    kAudioChannelLayoutTag_DVD_17 = kAudioChannelLayoutTag_DVD_12,
    kAudioChannelLayoutTag_DVD_18 = (138<<16) | 5,
    kAudioChannelLayoutTag_DVD_19 = kAudioChannelLayoutTag_MPEG_5_0_B,
    kAudioChannelLayoutTag_DVD_20 = kAudioChannelLayoutTag_MPEG_5_1_B,



    kAudioChannelLayoutTag_AudioUnit_4 = kAudioChannelLayoutTag_Quadraphonic,
    kAudioChannelLayoutTag_AudioUnit_5 = kAudioChannelLayoutTag_Pentagonal,
    kAudioChannelLayoutTag_AudioUnit_6 = kAudioChannelLayoutTag_Hexagonal,
    kAudioChannelLayoutTag_AudioUnit_8 = kAudioChannelLayoutTag_Octagonal,

    kAudioChannelLayoutTag_AudioUnit_5_0 = kAudioChannelLayoutTag_MPEG_5_0_B,
    kAudioChannelLayoutTag_AudioUnit_6_0 = (139<<16) | 6,
    kAudioChannelLayoutTag_AudioUnit_7_0 = (140<<16) | 7,
    kAudioChannelLayoutTag_AudioUnit_7_0_Front = (148<<16) | 7,
    kAudioChannelLayoutTag_AudioUnit_5_1 = kAudioChannelLayoutTag_MPEG_5_1_A,
    kAudioChannelLayoutTag_AudioUnit_6_1 = kAudioChannelLayoutTag_MPEG_6_1_A,
    kAudioChannelLayoutTag_AudioUnit_7_1 = kAudioChannelLayoutTag_MPEG_7_1_C,
    kAudioChannelLayoutTag_AudioUnit_7_1_Front = kAudioChannelLayoutTag_MPEG_7_1_A,

    kAudioChannelLayoutTag_AAC_3_0 = kAudioChannelLayoutTag_MPEG_3_0_B,
    kAudioChannelLayoutTag_AAC_Quadraphonic = kAudioChannelLayoutTag_Quadraphonic,
    kAudioChannelLayoutTag_AAC_4_0 = kAudioChannelLayoutTag_MPEG_4_0_B,
    kAudioChannelLayoutTag_AAC_5_0 = kAudioChannelLayoutTag_MPEG_5_0_D,
    kAudioChannelLayoutTag_AAC_5_1 = kAudioChannelLayoutTag_MPEG_5_1_D,
    kAudioChannelLayoutTag_AAC_6_0 = (141<<16) | 6,
    kAudioChannelLayoutTag_AAC_6_1 = (142<<16) | 7,
    kAudioChannelLayoutTag_AAC_7_0 = (143<<16) | 7,
    kAudioChannelLayoutTag_AAC_7_1 = kAudioChannelLayoutTag_MPEG_7_1_B,
    kAudioChannelLayoutTag_AAC_Octagonal = (144<<16) | 8,

    kAudioChannelLayoutTag_TMH_10_2_std = (145<<16) | 16,
    kAudioChannelLayoutTag_TMH_10_2_full = (146<<16) | 21,

    kAudioChannelLayoutTag_AC3_1_0_1 = (149<<16) | 2,
    kAudioChannelLayoutTag_AC3_3_0 = (150<<16) | 3,
    kAudioChannelLayoutTag_AC3_3_1 = (151<<16) | 4,
    kAudioChannelLayoutTag_AC3_3_0_1 = (152<<16) | 4,
    kAudioChannelLayoutTag_AC3_2_1_1 = (153<<16) | 4,
    kAudioChannelLayoutTag_AC3_3_1_1 = (154<<16) | 5,

    kAudioChannelLayoutTag_DiscreteInOrder = (147<<16) | 0,
    kAudioChannelLayoutTag_Unknown = 0xFFFF0000
};
# 1183 "/var/include/CoreAudio/CoreAudioTypes.h"
enum
{
    kMPEG4Object_AAC_Main = 1,
    kMPEG4Object_AAC_LC = 2,
    kMPEG4Object_AAC_SSR = 3,
    kMPEG4Object_AAC_LTP = 4,
    kMPEG4Object_AAC_SBR = 5,
    kMPEG4Object_AAC_Scalable = 6,
    kMPEG4Object_TwinVQ = 7,
    kMPEG4Object_CELP = 8,
    kMPEG4Object_HVXC = 9
};
# 63 "/var/include/AudioToolbox/AudioQueue.h" 2
# 78 "/var/include/AudioToolbox/AudioQueue.h"
       
       
# 119 "/var/include/AudioToolbox/AudioQueue.h"
enum {
    kAudioQueueErr_InvalidBuffer = -66687,
    kAudioQueueErr_BufferEmpty = -66686,
    kAudioQueueErr_DisposalPending = -66685,
    kAudioQueueErr_InvalidProperty = -66684,
    kAudioQueueErr_InvalidPropertySize = -66683,
    kAudioQueueErr_InvalidParameter = -66682,
    kAudioQueueErr_CannotStart = -66681,
    kAudioQueueErr_InvalidDevice = -66680,
    kAudioQueueErr_BufferInQueue = -66679,
    kAudioQueueErr_InvalidRunState = -66678,
    kAudioQueueErr_InvalidQueueType = -66677,
    kAudioQueueErr_Permissions = -66676,
    kAudioQueueErr_InvalidPropertyValue = -66675,
    kAudioQueueErr_PrimeTimedOut = -66674,
    kAudioQueueErr_CodecNotFound = -66673,
 kAudioQueueErr_InvalidCodecAccess = -66672,
 kAudioQueueErr_QueueInvalidated = -66671,
    kAudioQueueErr_EnqueueDuringReset = -66632
};
# 205 "/var/include/AudioToolbox/AudioQueue.h"
enum {
    kAudioQueueProperty_IsRunning = 'aqrn',

    kAudioQueueDeviceProperty_SampleRate = 'aqsr',
    kAudioQueueDeviceProperty_NumberChannels = 'aqdc',
    kAudioQueueProperty_CurrentDevice = 'aqcd',

    kAudioQueueProperty_MagicCookie = 'aqmc',
    kAudioQueueProperty_MaximumOutputPacketSize = 'xops',
    kAudioQueueProperty_StreamDescription = 'aqft',

    kAudioQueueProperty_ChannelLayout = 'aqcl',
    kAudioQueueProperty_EnableLevelMetering = 'aqme',
    kAudioQueueProperty_CurrentLevelMeter = 'aqmv',
    kAudioQueueProperty_CurrentLevelMeterDB = 'aqmd',

    kAudioQueueProperty_DecodeBufferSizeFrames = 'dcbf',






};
# 265 "/var/include/AudioToolbox/AudioQueue.h"
enum {
 kAudioQueueProperty_HardwareCodecPolicy = 'aqcp'
};
# 289 "/var/include/AudioToolbox/AudioQueue.h"
enum {
 kAudioQueueHardwareCodecPolicy_Default = 0,
 kAudioQueueHardwareCodecPolicy_UseSoftwareOnly = 1,
 kAudioQueueHardwareCodecPolicy_UseHardwareOnly = 2,
 kAudioQueueHardwareCodecPolicy_PreferSoftware = 3,
 kAudioQueueHardwareCodecPolicy_PreferHardware = 4
};
# 326 "/var/include/AudioToolbox/AudioQueue.h"
enum
{
    kAudioQueueParam_Volume = 1,




};

       
       
# 345 "/var/include/AudioToolbox/AudioQueue.h"
typedef UInt32 AudioQueuePropertyID;





typedef UInt32 AudioQueueParameterID;





typedef Float32 AudioQueueParameterValue;





typedef struct OpaqueAudioQueue * AudioQueueRef;
# 378 "/var/include/AudioToolbox/AudioQueue.h"
typedef struct OpaqueAudioQueueTimeline * AudioQueueTimelineRef;
# 416 "/var/include/AudioToolbox/AudioQueue.h"
typedef struct AudioQueueBuffer {
    const UInt32 mAudioDataBytesCapacity;
    void * const mAudioData;
    UInt32 mAudioDataByteSize;
    void * mUserData;

    const UInt32 mPacketDescriptionCapacity;
    AudioStreamPacketDescription * const mPacketDescriptions;
    UInt32 mPacketDescriptionCount;



} AudioQueueBuffer;





typedef AudioQueueBuffer *AudioQueueBufferRef;
# 461 "/var/include/AudioToolbox/AudioQueue.h"
struct AudioQueueParameterEvent {
    AudioQueueParameterID mID;
    AudioQueueParameterValue mValue;
};
typedef struct AudioQueueParameterEvent AudioQueueParameterEvent;
# 477 "/var/include/AudioToolbox/AudioQueue.h"
typedef struct AudioQueueLevelMeterState {
    Float32 mAveragePower;
    Float32 mPeakPower;
} AudioQueueLevelMeterState;


       
       
# 556 "/var/include/AudioToolbox/AudioQueue.h"
typedef void (*AudioQueueOutputCallback)(
                                    void * inUserData,
                                    AudioQueueRef inAQ,
                                    AudioQueueBufferRef inBuffer);
# 588 "/var/include/AudioToolbox/AudioQueue.h"
typedef void (*AudioQueueInputCallback)(
                                    void * inUserData,
                                    AudioQueueRef inAQ,
                                    AudioQueueBufferRef inBuffer,
                                    const AudioTimeStamp * inStartTime,
                                    UInt32 inNumberPacketDescriptions,
                                    const AudioStreamPacketDescription *inPacketDescs);
# 612 "/var/include/AudioToolbox/AudioQueue.h"
typedef void (*AudioQueuePropertyListenerProc)(
                                    void * inUserData,
                                    AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID);






       
       
# 661 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueNewOutput( const AudioStreamBasicDescription *inFormat,
                                    AudioQueueOutputCallback inCallbackProc,
                                    void * inUserData,
                                    CFRunLoopRef inCallbackRunLoop,
                                    CFStringRef inCallbackRunLoopMode,
                                    UInt32 inFlags,
                                    AudioQueueRef * outAQ) ;
# 707 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueNewInput( const AudioStreamBasicDescription *inFormat,
                                    AudioQueueInputCallback inCallbackProc,
                                    void * inUserData,
                                    CFRunLoopRef inCallbackRunLoop,
                                    CFStringRef inCallbackRunLoopMode,
                                    UInt32 inFlags,
                                    AudioQueueRef * outAQ) ;
# 798 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueDispose( AudioQueueRef inAQ,
                                    Boolean inImmediate) ;

       
       
# 826 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueAllocateBuffer( AudioQueueRef inAQ,
                                    UInt32 inBufferByteSize,
                                    AudioQueueBufferRef * outBuffer) ;
# 851 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueAllocateBufferWithPacketDescriptions(
                                    AudioQueueRef inAQ,
                                    UInt32 inBufferByteSize,
                                    UInt32 inNumberPacketDescriptions,
                                    AudioQueueBufferRef * outBuffer) ;
# 873 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueFreeBuffer( AudioQueueRef inAQ,
                                    AudioQueueBufferRef inBuffer) ;
# 905 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueEnqueueBuffer( AudioQueueRef inAQ,
                                    AudioQueueBufferRef inBuffer,
                                    UInt32 inNumPacketDescs,
                                    const AudioStreamPacketDescription *inPacketDescs) ;
# 967 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueEnqueueBufferWithParameters(
                                    AudioQueueRef inAQ,
                                    AudioQueueBufferRef inBuffer,
                                    UInt32 inNumPacketDescs,
                                    const AudioStreamPacketDescription * inPacketDescs,
                                    UInt32 inTrimFramesAtStart,
                                    UInt32 inTrimFramesAtEnd,
                                    UInt32 inNumParamValues,
                                    const AudioQueueParameterEvent * inParamValues,
                                    const AudioTimeStamp * inStartTime,
                                    AudioTimeStamp * outActualStartTime) ;

       
       
# 999 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueStart( AudioQueueRef inAQ,
                                    const AudioTimeStamp * inStartTime) ;
# 1024 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueuePrime( AudioQueueRef inAQ,
                                    UInt32 inNumberOfFramesToPrepare,
                                    UInt32 * outNumberOfFramesPrepared) ;
# 1049 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueStop( AudioQueueRef inAQ,
                                    Boolean inImmediate) ;
# 1063 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueuePause( AudioQueueRef inAQ) ;
# 1086 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueFlush( AudioQueueRef inAQ) ;
# 1105 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueReset( AudioQueueRef inAQ) ;

       
       
# 1131 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueGetParameter( AudioQueueRef inAQ,
                                    AudioQueueParameterID inParamID,
                                    AudioQueueParameterValue * outValue) ;
# 1149 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueSetParameter( AudioQueueRef inAQ,
                                    AudioQueueParameterID inParamID,
                                    AudioQueueParameterValue inValue) ;


       
       
# 1177 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueGetProperty( AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID,
                                    void * outData,
                                    UInt32 * ioDataSize) ;
# 1199 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueSetProperty( AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID,
                                    const void * inData,
                                    UInt32 inDataSize) ;
# 1220 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueGetPropertySize( AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID,
                                    UInt32 * outDataSize) ;
# 1244 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueAddPropertyListener( AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID,
                                    AudioQueuePropertyListenerProc inProc,
                                    void * inUserData) ;
# 1265 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueRemovePropertyListener( AudioQueueRef inAQ,
                                    AudioQueuePropertyID inID,
                                    AudioQueuePropertyListenerProc inProc,
                                    void * inUserData) ;



       
       
# 1292 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueCreateTimeline( AudioQueueRef inAQ,
                                    AudioQueueTimelineRef * outTimeline) ;
# 1310 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueDisposeTimeline( AudioQueueRef inAQ,
                                    AudioQueueTimelineRef inTimeline) ;
# 1339 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueGetCurrentTime( AudioQueueRef inAQ,
                                    AudioQueueTimelineRef inTimeline,
                                    AudioTimeStamp * outTimeStamp,
                                    Boolean * outTimelineDiscontinuity) ;
# 1361 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueDeviceGetCurrentTime( AudioQueueRef inAQ,
                                    AudioTimeStamp *outTimeStamp) ;
# 1393 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueDeviceTranslateTime( AudioQueueRef inAQ,
                                    const AudioTimeStamp * inTime,
                                    AudioTimeStamp * outTime) ;
# 1411 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueDeviceGetNearestStartTime(AudioQueueRef inAQ,
                                    AudioTimeStamp * ioRequestedStartTime,
                                    UInt32 inFlags) ;

       
       
# 1441 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueSetOfflineRenderFormat( AudioQueueRef inAQ,
                                    const AudioStreamBasicDescription *inFormat,
                                    const AudioChannelLayout *inLayout);
# 1462 "/var/include/AudioToolbox/AudioQueue.h"
extern OSStatus
AudioQueueOfflineRender( AudioQueueRef inAQ,
                                    const AudioTimeStamp * inTimestamp,
                                    AudioQueueBufferRef ioBuffer,
                                    UInt32 inNumberFrames) ;
# 13 "test.c" 2
# 1 "/var/include/AudioToolbox/AudioToolbox.h" 1
# 22 "/var/include/AudioToolbox/AudioToolbox.h"
# 1 "/var/include/AudioToolbox/AudioFile.h" 1
# 72 "/var/include/AudioToolbox/AudioFile.h"
enum {
        kAudioFileAIFFType = 'AIFF',
        kAudioFileAIFCType = 'AIFC',
        kAudioFileWAVEType = 'WAVE',
        kAudioFileSoundDesigner2Type = 'Sd2f',
        kAudioFileNextType = 'NeXT',
        kAudioFileMP3Type = 'MPG3',
        kAudioFileMP2Type = 'MPG2',
        kAudioFileMP1Type = 'MPG1',
  kAudioFileAC3Type = 'ac-3',
        kAudioFileAAC_ADTSType = 'adts',
        kAudioFileMPEG4Type = 'mp4f',
        kAudioFileM4AType = 'm4af',
  kAudioFileCAFType = 'caff',
  kAudioFile3GPType = '3gpp',
  kAudioFile3GP2Type = '3gp2',
  kAudioFileAMRType = 'amrf'
};
typedef UInt32 AudioFileTypeID;
# 123 "/var/include/AudioToolbox/AudioFile.h"
enum {
        kAudioFileUnspecifiedError = 'wht?',
        kAudioFileUnsupportedFileTypeError = 'typ?',
        kAudioFileUnsupportedDataFormatError = 'fmt?',
        kAudioFileUnsupportedPropertyError = 'pty?',
        kAudioFileBadPropertySizeError = '!siz',
        kAudioFilePermissionsError = 'prm?',
        kAudioFileNotOptimizedError = 'optm',

        kAudioFileInvalidChunkError = 'chk?',
        kAudioFileDoesNotAllow64BitDataSizeError = 'off?',
        kAudioFileInvalidPacketOffsetError = 'pck?',
        kAudioFileInvalidFileError = 'dta?',
  kAudioFileOperationNotSupportedError = 0x6F703F3F
};
# 150 "/var/include/AudioToolbox/AudioFile.h"
enum {
 kAudioFileFlags_EraseFile = 1,
 kAudioFileFlags_DontPageAlignAudioData = 2
};

enum {
 kAudioFileReadPermission = 0x01,
 kAudioFileWritePermission = 0x02,
 kAudioFileReadWritePermission = 0x03
};
# 169 "/var/include/AudioToolbox/AudioFile.h"
typedef struct OpaqueAudioFileID *AudioFileID;




typedef UInt32 AudioFilePropertyID;
# 188 "/var/include/AudioToolbox/AudioFile.h"
enum {
 kAudioFileLoopDirection_NoLooping = 0,
 kAudioFileLoopDirection_Forward = 1,
 kAudioFileLoopDirection_ForwardAndBackward = 2,
 kAudioFileLoopDirection_Backward = 3
};
# 209 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFile_SMPTE_Time
{
 SInt8 mHours;
 UInt8 mMinutes;
 UInt8 mSeconds;
 UInt8 mFrames;
 UInt32 mSubFrameSampleOffset;
};
typedef struct AudioFile_SMPTE_Time AudioFile_SMPTE_Time;







enum {
 kAudioFileMarkerType_Generic = 0,
};
# 242 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFileMarker
{
 Float64 mFramePosition;

 CFStringRef mName;
 SInt32 mMarkerID;

 AudioFile_SMPTE_Time mSMPTETime;
 UInt32 mType;
 UInt16 mReserved;
 UInt16 mChannel;
};
typedef struct AudioFileMarker AudioFileMarker;







struct AudioFileMarkerList
{
 UInt32 mSMPTE_TimeType;
 UInt32 mNumberMarkers;
 AudioFileMarker mMarkers[1];
};
typedef struct AudioFileMarkerList AudioFileMarkerList;
# 306 "/var/include/AudioToolbox/AudioFile.h"
enum {
 kAudioFileRegionFlag_LoopEnable = 1,
 kAudioFileRegionFlag_PlayForward = 2,
 kAudioFileRegionFlag_PlayBackward = 4
};
# 328 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFileRegion
{
 UInt32 mRegionID;
 CFStringRef mName;
 UInt32 mFlags;
 UInt32 mNumberMarkers;
 AudioFileMarker mMarkers[1];
};
typedef struct AudioFileRegion AudioFileRegion;
# 351 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFileRegionList
{
 UInt32 mSMPTE_TimeType;
 UInt32 mNumberRegions;
 AudioFileRegion mRegions[1];
};
typedef struct AudioFileRegionList AudioFileRegionList;
# 380 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFramePacketTranslation
{
 SInt64 mFrame;
 SInt64 mPacket;
 UInt32 mFrameOffsetInPacket;
};
typedef struct AudioFramePacketTranslation AudioFramePacketTranslation;
# 398 "/var/include/AudioToolbox/AudioFile.h"
enum {
 kBytePacketTranslationFlag_IsEstimate = 1
};
# 411 "/var/include/AudioToolbox/AudioFile.h"
struct AudioBytePacketTranslation
{
 SInt64 mByte;
 SInt64 mPacket;
 UInt32 mByteOffsetInPacket;
 UInt32 mFlags;
};
typedef struct AudioBytePacketTranslation AudioBytePacketTranslation;
# 435 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFilePacketTableInfo
{
        SInt64 mNumberValidFrames;
        SInt32 mPrimingFrames;
        SInt32 mRemainderFrames;
};
typedef struct AudioFilePacketTableInfo AudioFilePacketTableInfo;
# 489 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileCreateWithURL (CFURLRef inFileRef,
                    AudioFileTypeID inFileType,
                    const AudioStreamBasicDescription *inFormat,
                    UInt32 inFlags,
                    AudioFileID *outAudioFile) ;
# 510 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileOpenURL ( CFURLRef inFileRef,
     SInt8 inPermissions,
     AudioFileTypeID inFileTypeHint,
     AudioFileID *outAudioFile) ;
# 527 "/var/include/AudioToolbox/AudioFile.h"
typedef OSStatus (*AudioFile_ReadProc)(
        void * inClientData,
        SInt64 inPosition,
        UInt32 requestCount,
        void * buffer,
        UInt32 * actualCount);
# 545 "/var/include/AudioToolbox/AudioFile.h"
typedef OSStatus (*AudioFile_WriteProc)(
        void * inClientData,
        SInt64 inPosition,
        UInt32 requestCount,
        const void *buffer,
        UInt32 * actualCount);
# 560 "/var/include/AudioToolbox/AudioFile.h"
typedef SInt64 (*AudioFile_GetSizeProc)(
        void * inClientData);
# 571 "/var/include/AudioToolbox/AudioFile.h"
typedef OSStatus (*AudioFile_SetSizeProc)(
        void * inClientData,
        SInt64 inSize);
# 593 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileInitializeWithCallbacks (
      void * inClientData,
      AudioFile_ReadProc inReadFunc,
      AudioFile_WriteProc inWriteFunc,
      AudioFile_GetSizeProc inGetSizeFunc,
      AudioFile_SetSizeProc inSetSizeFunc,
                        AudioFileTypeID inFileType,
                        const AudioStreamBasicDescription *inFormat,
                        UInt32 inFlags,
                        AudioFileID *outAudioFile) ;
# 624 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileOpenWithCallbacks (
    void * inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
                AudioFileTypeID inFileTypeHint,
                AudioFileID *outAudioFile) ;
# 641 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileClose (AudioFileID inAudioFile) ;
# 657 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileOptimize (AudioFileID inAudioFile) ;
# 673 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileReadBytes ( AudioFileID inAudioFile,
                        Boolean inUseCache,
                        SInt64 inStartingByte,
                        UInt32 *ioNumBytes,
                        void *outBuffer) ;
# 691 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileWriteBytes ( AudioFileID inAudioFile,
                        Boolean inUseCache,
                        SInt64 inStartingByte,
                        UInt32 *ioNumBytes,
                        const void *inBuffer) ;
# 723 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileReadPacketData ( AudioFileID inAudioFile,
                         Boolean inUseCache,
                         UInt32 *ioNumBytes,
                         AudioStreamPacketDescription *outPacketDescriptions,
                         SInt64 inStartingPacket,
                         UInt32 *ioNumPackets,
                         void *outBuffer) __attribute__((weak_import));
# 753 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileReadPackets ( AudioFileID inAudioFile,
                        Boolean inUseCache,
                        UInt32 *outNumBytes,
                        AudioStreamPacketDescription *outPacketDescriptions,
                        SInt64 inStartingPacket,
                        UInt32 *ioNumPackets,
                        void *outBuffer) ;
# 778 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileWritePackets ( AudioFileID inAudioFile,
                        Boolean inUseCache,
                        UInt32 inNumBytes,
                        const AudioStreamPacketDescription *inPacketDescriptions,
                        SInt64 inStartingPacket,
                        UInt32 *ioNumPackets,
                        const void *inBuffer) ;
# 799 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileCountUserData ( AudioFileID inAudioFile,
       UInt32 inUserDataID,
       UInt32 *outNumberItems) ;
# 813 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetUserDataSize ( AudioFileID inAudioFile,
       UInt32 inUserDataID,
       UInt32 inIndex,
       UInt32 *outUserDataSize) ;
# 829 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetUserData ( AudioFileID inAudioFile,
      UInt32 inUserDataID,
      UInt32 inIndex,
      UInt32 *ioUserDataSize,
      void *outUserData) ;
# 847 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileSetUserData ( AudioFileID inAudioFile,
      UInt32 inUserDataID,
      UInt32 inIndex,
      UInt32 inUserDataSize,
      const void *inUserData) ;
# 864 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileRemoveUserData ( AudioFileID inAudioFile,
      UInt32 inUserDataID,
      UInt32 inIndex) ;
# 965 "/var/include/AudioToolbox/AudioFile.h"
enum
{
 kAudioFilePropertyFileFormat = 'ffmt',
 kAudioFilePropertyDataFormat = 'dfmt',
 kAudioFilePropertyIsOptimized = 'optm',
 kAudioFilePropertyMagicCookieData = 'mgic',
 kAudioFilePropertyAudioDataByteCount = 'bcnt',
 kAudioFilePropertyAudioDataPacketCount = 'pcnt',
 kAudioFilePropertyMaximumPacketSize = 'psze',
 kAudioFilePropertyDataOffset = 'doff',
 kAudioFilePropertyChannelLayout = 'cmap',
 kAudioFilePropertyDeferSizeUpdates = 'dszu',
 kAudioFilePropertyDataFormatName = 'fnme',
 kAudioFilePropertyMarkerList = 'mkls',
 kAudioFilePropertyRegionList = 'rgls',
 kAudioFilePropertyPacketToFrame = 'pkfr',
 kAudioFilePropertyFrameToPacket = 'frpk',
 kAudioFilePropertyPacketToByte = 'pkby',
 kAudioFilePropertyByteToPacket = 'bypk',
 kAudioFilePropertyChunkIDs = 'chid',
 kAudioFilePropertyInfoDictionary = 'info',
 kAudioFilePropertyPacketTableInfo = 'pnfo',
 kAudioFilePropertyFormatList = 'flst',
 kAudioFilePropertyPacketSizeUpperBound = 'pkub',
 kAudioFilePropertyReserveDuration = 'rsrv',
 kAudioFilePropertyEstimatedDuration = 'edur',
 kAudioFilePropertyBitRate = 'brat',
 kAudioFilePropertyID3Tag = 'id3t'
};
# 1006 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetPropertyInfo( AudioFileID inAudioFile,
                                AudioFilePropertyID inPropertyID,
                                UInt32 *outDataSize,
                                UInt32 *isWritable) ;
# 1021 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetProperty( AudioFileID inAudioFile,
                        AudioFilePropertyID inPropertyID,
                        UInt32 *ioDataSize,
                        void *outPropertyData) ;
# 1036 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileSetProperty( AudioFileID inAudioFile,
                        AudioFilePropertyID inPropertyID,
                        UInt32 inDataSize,
                        const void *inPropertyData) ;
# 1137 "/var/include/AudioToolbox/AudioFile.h"
enum
{
 kAudioFileGlobalInfo_ReadableTypes = 'afrf',
 kAudioFileGlobalInfo_WritableTypes = 'afwf',
 kAudioFileGlobalInfo_FileTypeName = 'ftnm',
 kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat = 'sdid',
 kAudioFileGlobalInfo_AvailableFormatIDs = 'fmid',

 kAudioFileGlobalInfo_AllExtensions = 'alxt',
 kAudioFileGlobalInfo_AllHFSTypeCodes = 'ahfs',
 kAudioFileGlobalInfo_AllUTIs = 'auti',
 kAudioFileGlobalInfo_AllMIMETypes = 'amim',

 kAudioFileGlobalInfo_ExtensionsForType = 'fext',
 kAudioFileGlobalInfo_HFSTypeCodesForType = 'fhfs',
 kAudioFileGlobalInfo_UTIsForType = 'futi',
 kAudioFileGlobalInfo_MIMETypesForType = 'fmim',

 kAudioFileGlobalInfo_TypesForMIMEType = 'tmim',
 kAudioFileGlobalInfo_TypesForUTI = 'tuti',
 kAudioFileGlobalInfo_TypesForHFSTypeCode = 'thfs',
 kAudioFileGlobalInfo_TypesForExtension = 'text'
};
# 1172 "/var/include/AudioToolbox/AudioFile.h"
struct AudioFileTypeAndFormatID
{
 AudioFileTypeID mFileType;
 UInt32 mFormatID;
};
typedef struct AudioFileTypeAndFormatID AudioFileTypeAndFormatID;
# 1190 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetGlobalInfoSize( AudioFilePropertyID inPropertyID,
                                UInt32 inSpecifierSize,
                                void *inSpecifier,
                                UInt32 *outDataSize) ;
# 1206 "/var/include/AudioToolbox/AudioFile.h"
extern OSStatus
AudioFileGetGlobalInfo( AudioFilePropertyID inPropertyID,
        UInt32 inSpecifierSize,
        void *inSpecifier,
                          UInt32 *ioDataSize,
                          void *outPropertyData) ;

       
# 23 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 1 "/var/include/AudioToolbox/AudioFileStream.h" 1
# 62 "/var/include/AudioToolbox/AudioFileStream.h"
       

typedef UInt32 AudioFileStreamPropertyID;
typedef struct OpaqueAudioFileStreamID *AudioFileStreamID;

typedef void (*AudioFileStream_PropertyListenerProc)(
           void * inClientData,
           AudioFileStreamID inAudioFileStream,
           AudioFileStreamPropertyID inPropertyID,
           UInt32 * ioFlags);

typedef void (*AudioFileStream_PacketsProc)(
           void * inClientData,
           UInt32 inNumberBytes,
           UInt32 inNumberPackets,
           const void * inInputData,
           AudioStreamPacketDescription *inPacketDescriptions);




       
# 107 "/var/include/AudioToolbox/AudioFileStream.h"
enum {
 kAudioFileStreamPropertyFlag_PropertyIsCached = 1,
 kAudioFileStreamPropertyFlag_CacheProperty = 2,

 kAudioFileStreamParseFlag_Discontinuity = 1,

 kAudioFileStreamSeekFlag_OffsetIsEstimated = 1
};




       
# 153 "/var/include/AudioToolbox/AudioFileStream.h"
enum
{
 kAudioFileStreamError_UnsupportedFileType = 'typ?',
 kAudioFileStreamError_UnsupportedDataFormat = 'fmt?',
 kAudioFileStreamError_UnsupportedProperty = 'pty?',
 kAudioFileStreamError_BadPropertySize = '!siz',
 kAudioFileStreamError_NotOptimized = 'optm',
 kAudioFileStreamError_InvalidPacketOffset = 'pck?',
 kAudioFileStreamError_InvalidFile = 'dta?',
 kAudioFileStreamError_ValueUnknown = 'unk?',
 kAudioFileStreamError_DataUnavailable = 'more',
 kAudioFileStreamError_IllegalOperation = 'nope',
 kAudioFileStreamError_UnspecifiedError = 'wht?',
 kAudioFileStreamError_DiscontinuityCantRecover = 'dsc!'
};




       
# 236 "/var/include/AudioToolbox/AudioFileStream.h"
enum
{
 kAudioFileStreamProperty_ReadyToProducePackets = 'redy',
 kAudioFileStreamProperty_FileFormat = 'ffmt',
 kAudioFileStreamProperty_DataFormat = 'dfmt',
 kAudioFileStreamProperty_FormatList = 'flst',
 kAudioFileStreamProperty_MagicCookieData = 'mgic',
 kAudioFileStreamProperty_AudioDataByteCount = 'bcnt',
 kAudioFileStreamProperty_AudioDataPacketCount = 'pcnt',
 kAudioFileStreamProperty_MaximumPacketSize = 'psze',
 kAudioFileStreamProperty_DataOffset = 'doff',
 kAudioFileStreamProperty_ChannelLayout = 'cmap',
 kAudioFileStreamProperty_PacketToFrame = 'pkfr',
 kAudioFileStreamProperty_FrameToPacket = 'frpk',
 kAudioFileStreamProperty_PacketToByte = 'pkby',
 kAudioFileStreamProperty_ByteToPacket = 'bypk',
 kAudioFileStreamProperty_PacketTableInfo = 'pnfo',
 kAudioFileStreamProperty_PacketSizeUpperBound = 'pkub',
 kAudioFileStreamProperty_AverageBytesPerPacket = 'abpp',
 kAudioFileStreamProperty_BitRate = 'brat'
};




       
# 294 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamOpen (
       void * inClientData,
       AudioFileStream_PropertyListenerProc inPropertyListenerProc,
       AudioFileStream_PacketsProc inPacketsProc,
                   AudioFileTypeID inFileTypeHint,
                   AudioFileStreamID * outAudioFileStream)
                  ;
# 320 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamParseBytes(
        AudioFileStreamID inAudioFileStream,
        UInt32 inDataByteSize,
        const void* inData,
        UInt32 inFlags)
                  ;
# 349 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamSeek(
        AudioFileStreamID inAudioFileStream,
        SInt64 inPacketOffset,
        SInt64 * outDataByteOffset,
        UInt32 * ioFlags)
                  ;
# 374 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamGetPropertyInfo(
        AudioFileStreamID inAudioFileStream,
        AudioFileStreamPropertyID inPropertyID,
        UInt32 * outPropertyDataSize,
        Boolean * outWritable)
                  ;
# 400 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamGetProperty(
       AudioFileStreamID inAudioFileStream,
       AudioFileStreamPropertyID inPropertyID,
       UInt32 * ioPropertyDataSize,
       void * outPropertyData)
                  ;
# 424 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamSetProperty(
       AudioFileStreamID inAudioFileStream,
       AudioFileStreamPropertyID inPropertyID,
       UInt32 inPropertyDataSize,
       const void * inPropertyData)
                  ;
# 440 "/var/include/AudioToolbox/AudioFileStream.h"
extern OSStatus
AudioFileStreamClose( AudioFileStreamID inAudioFileStream)
                  ;
# 24 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 1 "/var/include/AudioToolbox/AudioFormat.h" 1
# 42 "/var/include/AudioToolbox/AudioFormat.h"
typedef UInt32 AudioFormatPropertyID;
# 53 "/var/include/AudioToolbox/AudioFormat.h"
enum {
 kPanningMode_SoundField = 3,
 kPanningMode_VectorBasedPanning = 4
};
# 73 "/var/include/AudioToolbox/AudioFormat.h"
struct AudioPanningInfo {
 UInt32 mPanningMode;
 UInt32 mCoordinateFlags;
 Float32 mCoordinates[3];
 Float32 mGainScale;
 const AudioChannelLayout* mOutputChannelMap;
};
typedef struct AudioPanningInfo AudioPanningInfo;
# 93 "/var/include/AudioToolbox/AudioFormat.h"
enum {
 kAudioBalanceFadeType_MaxUnityGain = 0,
 kAudioBalanceFadeType_EqualPower = 1
};
# 110 "/var/include/AudioToolbox/AudioFormat.h"
struct AudioBalanceFade
{
 Float32 mLeftRightBalance;
 Float32 mBackFrontFade;
 UInt32 mType;
 const AudioChannelLayout* mChannelLayout;
};
typedef struct AudioBalanceFade AudioBalanceFade;
# 129 "/var/include/AudioToolbox/AudioFormat.h"
struct AudioFormatInfo
{
 AudioStreamBasicDescription mASBD;
 const void* mMagicCookie;
 UInt32 mMagicCookieSize;
};
typedef struct AudioFormatInfo AudioFormatInfo;
# 145 "/var/include/AudioToolbox/AudioFormat.h"
struct AudioFormatListItem
{
 AudioStreamBasicDescription mASBD;
 AudioChannelLayoutTag mChannelLayoutTag;
};
typedef struct AudioFormatListItem AudioFormatListItem;
# 341 "/var/include/AudioToolbox/AudioFormat.h"
enum
{



 kAudioFormatProperty_FormatInfo = 'fmti',
 kAudioFormatProperty_FormatName = 'fnam',
 kAudioFormatProperty_EncodeFormatIDs = 'acof',
 kAudioFormatProperty_DecodeFormatIDs = 'acif',
 kAudioFormatProperty_FormatList = 'flst',
    kAudioFormatProperty_ASBDFromESDS = 'essd',
    kAudioFormatProperty_ChannelLayoutFromESDS = 'escl',
 kAudioFormatProperty_OutputFormatList = 'ofls',
 kAudioFormatProperty_FirstPlayableFormatFromList = 'fpfl',
 kAudioFormatProperty_Encoders = 'aven',
 kAudioFormatProperty_Decoders = 'avde',
 kAudioFormatProperty_FormatIsVBR = 'fvbr',
 kAudioFormatProperty_FormatIsExternallyFramed = 'fexf',
 kAudioFormatProperty_AvailableEncodeBitRates = 'aebr',
 kAudioFormatProperty_AvailableEncodeSampleRates = 'aesr',
 kAudioFormatProperty_AvailableEncodeChannelLayoutTags = 'aecl',
 kAudioFormatProperty_AvailableEncodeNumberChannels = 'avnc',
 kAudioFormatProperty_ASBDFromMPEGPacket = 'admp',





 kAudioFormatProperty_BitmapForLayoutTag = 'bmtg',
 kAudioFormatProperty_MatrixMixMap = 'mmap',
    kAudioFormatProperty_ChannelMap = 'chmp',
 kAudioFormatProperty_NumberOfChannelsForLayout = 'nchm',
 kAudioFormatProperty_ChannelLayoutForTag = 'cmpl',
 kAudioFormatProperty_TagForChannelLayout = 'cmpt',
 kAudioFormatProperty_ChannelLayoutName = 'lonm',
 kAudioFormatProperty_ChannelLayoutForBitmap = 'cmpb',
 kAudioFormatProperty_ChannelName = 'cnam',
 kAudioFormatProperty_ChannelShortName = 'csnm',

 kAudioFormatProperty_TagsForNumberOfChannels = 'tagc',
 kAudioFormatProperty_PanningMatrix = 'panm',
 kAudioFormatProperty_BalanceFade = 'balf',





 kAudioFormatProperty_ID3TagSize = 'id3s',
 kAudioFormatProperty_ID3TagToDictionary = 'id3d'
};
# 440 "/var/include/AudioToolbox/AudioFormat.h"
enum {
 kAudioFormatProperty_HardwareCodecCapabilities = 'hwcc',
};
# 458 "/var/include/AudioToolbox/AudioFormat.h"
enum
{
 kAudioDecoderComponentType = 'adec',
 kAudioEncoderComponentType = 'aenc',
};
# 480 "/var/include/AudioToolbox/AudioFormat.h"
enum
{
 kAppleSoftwareAudioCodecManufacturer = 'appl',
 kAppleHardwareAudioCodecManufacturer = 'aphw'
};
# 503 "/var/include/AudioToolbox/AudioFormat.h"
extern OSStatus
AudioFormatGetPropertyInfo( AudioFormatPropertyID inPropertyID,
       UInt32 inSpecifierSize,
       const void* inSpecifier,
       UInt32* outPropertyDataSize) ;
# 520 "/var/include/AudioToolbox/AudioFormat.h"
extern OSStatus
AudioFormatGetProperty( AudioFormatPropertyID inPropertyID,
      UInt32 inSpecifierSize,
      const void* inSpecifier,
      UInt32* ioPropertyDataSize,
      void* outPropertyData) ;






enum {
        kAudioFormatUnspecifiedError = 'what',
        kAudioFormatUnsupportedPropertyError = 'prop',
        kAudioFormatBadPropertySizeError = '!siz',
        kAudioFormatBadSpecifierSizeError = '!spc',
        kAudioFormatUnsupportedDataFormatError = 'fmt?',
        kAudioFormatUnknownFormatError = '!fmt'
};
# 25 "/var/include/AudioToolbox/AudioToolbox.h" 2

# 1 "/var/include/AudioToolbox/AudioServices.h" 1
# 37 "/var/include/AudioToolbox/AudioServices.h"
       
# 61 "/var/include/AudioToolbox/AudioServices.h"
       
# 79 "/var/include/AudioToolbox/AudioServices.h"
enum
{
 kAudioServicesNoError = 0,
 kAudioServicesUnsupportedPropertyError = 'pty?',
 kAudioServicesBadPropertySizeError = '!siz',
 kAudioServicesBadSpecifierSizeError = '!spc',

 kAudioServicesSystemSoundUnspecifiedError = -1500,
 kAudioServicesSystemSoundClientTimedOutError = -1501
};


       






typedef UInt32 SystemSoundID;





typedef UInt32 AudioServicesPropertyID;
# 116 "/var/include/AudioToolbox/AudioServices.h"
typedef void
(*AudioServicesSystemSoundCompletionProc)( SystemSoundID ssID,
                                         void* clientData);


       
# 137 "/var/include/AudioToolbox/AudioServices.h"
enum
{

    kSystemSoundID_Vibrate = 0x00000FFF






};


       
# 166 "/var/include/AudioToolbox/AudioServices.h"
enum
{
    kAudioServicesPropertyIsUISound = 'isui',
    kAudioServicesPropertyCompletePlaybackIfAppDies = 'ifdi'
};


       
# 188 "/var/include/AudioToolbox/AudioServices.h"
extern void
AudioServicesPlayAlertSound(SystemSoundID inSystemSoundID) ;
# 198 "/var/include/AudioToolbox/AudioServices.h"
extern void
AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID) ;
# 212 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesCreateSystemSoundID( CFURLRef inFileURL,
                                    SystemSoundID* outSystemSoundID) ;
# 225 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID) ;
# 249 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesAddSystemSoundCompletion( SystemSoundID inSystemSoundID,
                                     CFRunLoopRef inRunLoop,
                                     CFStringRef inRunLoopMode,
                                     AudioServicesSystemSoundCompletionProc inCompletionRoutine,
                                     void* inClientData) ;
# 265 "/var/include/AudioToolbox/AudioServices.h"
extern void
AudioServicesRemoveSystemSoundCompletion(SystemSoundID inSystemSoundID) ;
# 286 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesGetPropertyInfo( AudioServicesPropertyID inPropertyID,
                              UInt32 inSpecifierSize,
                              const void* inSpecifier,
                              UInt32* outPropertyDataSize,
                              Boolean* outWritable) ;
# 312 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesGetProperty( AudioServicesPropertyID inPropertyID,
                            UInt32 inSpecifierSize,
                            const void* inSpecifier,
                            UInt32* ioPropertyDataSize,
                            void* outPropertyData) ;
# 335 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioServicesSetProperty( AudioServicesPropertyID inPropertyID,
                            UInt32 inSpecifierSize,
                            const void* inSpecifier,
                            UInt32 inPropertyDataSize,
                            const void* inPropertyData) ;
# 553 "/var/include/AudioToolbox/AudioServices.h"
       
       
# 576 "/var/include/AudioToolbox/AudioServices.h"
enum
{
    kAudioSessionNoError = 0,
    kAudioSessionNotInitialized = '!ini',
    kAudioSessionAlreadyInitialized = 'init',
    kAudioSessionInitializationError = 'ini?',
    kAudioSessionUnsupportedPropertyError = 'pty?',
    kAudioSessionBadPropertySizeError = '!siz',
    kAudioSessionNotActiveError = '!act',
    kAudioServicesNoHardwareError = 'nohw'
};


       
       





typedef UInt32 AudioSessionPropertyID;


       
       
# 611 "/var/include/AudioToolbox/AudioServices.h"
enum {
    kAudioSessionBeginInterruption = 1,
    kAudioSessionEndInterruption = 0
};


       
       
# 635 "/var/include/AudioToolbox/AudioServices.h"
enum {
    kAudioSessionCategory_AmbientSound = 'ambi',
    kAudioSessionCategory_SoloAmbientSound = 'solo',
    kAudioSessionCategory_MediaPlayback = 'medi',
    kAudioSessionCategory_RecordAudio = 'reca',
    kAudioSessionCategory_PlayAndRecord = 'plar'
};

       
# 654 "/var/include/AudioToolbox/AudioServices.h"
enum {
    kAudioSessionOverrideAudioRoute_None = 0,
    kAudioSessionOverrideAudioRoute_Speaker = 'spkr'
};


       
# 680 "/var/include/AudioToolbox/AudioServices.h"
enum {
 kAudioSessionRouteChangeReason_Unknown = 0,
 kAudioSessionRouteChangeReason_NewDeviceAvailable = 1,
 kAudioSessionRouteChangeReason_OldDeviceUnavailable = 2,
 kAudioSessionRouteChangeReason_CategoryChange = 3,
 kAudioSessionRouteChangeReason_Override = 4,
 kAudioSessionRouteChangeReason_WakeFromSleep = 6,
};





       
# 759 "/var/include/AudioToolbox/AudioServices.h"
enum {
    kAudioSessionProperty_PreferredHardwareSampleRate = 'hwsr',
    kAudioSessionProperty_PreferredHardwareIOBufferDuration = 'iobd',
    kAudioSessionProperty_AudioCategory = 'acat',
    kAudioSessionProperty_AudioRoute = 'rout',
    kAudioSessionProperty_AudioRouteChange = 'roch',
    kAudioSessionProperty_CurrentHardwareSampleRate = 'chsr',
    kAudioSessionProperty_CurrentHardwareInputNumberChannels = 'chic',
    kAudioSessionProperty_CurrentHardwareOutputNumberChannels = 'choc',
    kAudioSessionProperty_CurrentHardwareOutputVolume = 'chov',
    kAudioSessionProperty_CurrentHardwareInputLatency = 'cilt',
    kAudioSessionProperty_CurrentHardwareOutputLatency = 'colt',
    kAudioSessionProperty_CurrentHardwareIOBufferDuration = 'chbd',
    kAudioSessionProperty_OtherAudioIsPlaying = 'othr',
    kAudioSessionProperty_OverrideAudioRoute = 'ovrd',
    kAudioSessionProperty_AudioInputAvailable = 'aiav',
    kAudioSessionProperty_ServerDied = 'died',
    kAudioSessionProperty_OtherMixableAudioShouldDuck = 'duck',
    kAudioSessionProperty_OverrideCategoryMixWithOthers = 'cmix'
};


       
       
# 794 "/var/include/AudioToolbox/AudioServices.h"
typedef void (*AudioSessionInterruptionListener)(
                                void * inClientData,
                                UInt32 inInterruptionState);
# 812 "/var/include/AudioToolbox/AudioServices.h"
typedef void (*AudioSessionPropertyListener)(
        void * inClientData,
        AudioSessionPropertyID inID,
        UInt32 inDataSize,
                                const void * inData);


       
       
# 843 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionInitialize( CFRunLoopRef inRunLoop,
                                    CFStringRef inRunLoopMode,
                                    AudioSessionInterruptionListener inInterruptionListener,
                                    void *inClientData) ;
# 860 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionSetActive( Boolean active) ;
# 877 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionGetProperty( AudioSessionPropertyID inID,
                                    UInt32 *ioDataSize,
                                    void *outData) ;
# 894 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionSetProperty( AudioSessionPropertyID inID,
                                    UInt32 inDataSize,
                                    const void *inData) ;
# 909 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionGetPropertySize( AudioSessionPropertyID inID,
                                    UInt32 *outDataSize) ;
# 926 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionAddPropertyListener( AudioSessionPropertyID inID,
                                    AudioSessionPropertyListener inProc,
                                    void *inClientData) ;
# 939 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionRemovePropertyListener( AudioSessionPropertyID inID) __attribute__((deprecated));
# 950 "/var/include/AudioToolbox/AudioServices.h"
extern OSStatus
AudioSessionRemovePropertyListenerWithUserData( AudioSessionPropertyID inID,
                                                AudioSessionPropertyListener inProc,
                                                void *inClientData) __attribute__((weak_import));


       
       
# 967 "/var/include/AudioToolbox/AudioServices.h"
enum {
    kAudioSessionCategory_UserInterfaceSoundEffects = 'uifx',
    kAudioSessionCategory_LiveAudio = 'live'
};
# 27 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 1 "/var/include/AudioToolbox/AUGraph.h" 1
# 21 "/var/include/AudioToolbox/AUGraph.h"
# 1 "/var/include/AudioUnit/AudioUnit.h" 1
# 21 "/var/include/AudioUnit/AudioUnit.h"
# 1 "/var/include/AudioUnit/AudioComponent.h" 1
# 18 "/var/include/AudioUnit/AudioComponent.h"
       
# 52 "/var/include/AudioUnit/AudioComponent.h"
       
# 68 "/var/include/AudioUnit/AudioComponent.h"
#pragma pack(push, 4)
typedef struct AudioComponentDescription {
 OSType componentType;
 OSType componentSubType;
 OSType componentManufacturer;
 UInt32 componentFlags;
 UInt32 componentFlagsMask;
} AudioComponentDescription;
#pragma pack(pop)
# 96 "/var/include/AudioUnit/AudioComponent.h"
typedef struct OpaqueAudioComponent * AudioComponent;
# 107 "/var/include/AudioUnit/AudioComponent.h"
 typedef struct OpaqueAudioComponentInstance * AudioComponentInstance;






       
# 134 "/var/include/AudioUnit/AudioComponent.h"
extern AudioComponent
AudioComponentFindNext ( AudioComponent inComponent,
     const AudioComponentDescription * inDesc)
                   ;
# 148 "/var/include/AudioUnit/AudioComponent.h"
extern UInt32
AudioComponentCount ( const AudioComponentDescription * inDesc)
                   ;
# 162 "/var/include/AudioUnit/AudioComponent.h"
extern OSStatus
AudioComponentCopyName ( AudioComponent inComponent,
       CFStringRef * outName)
                   ;
# 177 "/var/include/AudioUnit/AudioComponent.h"
extern OSStatus
AudioComponentGetDescription( AudioComponent inComponent,
       AudioComponentDescription * outDesc)
                   ;
# 192 "/var/include/AudioUnit/AudioComponent.h"
extern OSStatus
AudioComponentGetVersion( AudioComponent inComponent,
       UInt32 * outVersion)
                   ;
# 211 "/var/include/AudioUnit/AudioComponent.h"
extern OSStatus
AudioComponentInstanceNew( AudioComponent inComponent,
       AudioComponentInstance * outInstance)
                   ;
# 225 "/var/include/AudioUnit/AudioComponent.h"
extern OSStatus
AudioComponentInstanceDispose( AudioComponentInstance inInstance)
                   ;
# 241 "/var/include/AudioUnit/AudioComponent.h"
extern AudioComponent
AudioComponentInstanceGetComponent ( AudioComponentInstance inInstance)
                   ;
# 255 "/var/include/AudioUnit/AudioComponent.h"
extern Boolean
AudioComponentInstanceCanDo ( AudioComponentInstance inInstance,
        SInt16 inSelectorID)
                   __attribute__((weak_import));
# 22 "/var/include/AudioUnit/AudioUnit.h" 2
# 1 "/var/include/AudioUnit/AUComponent.h" 1
# 18 "/var/include/AudioUnit/AUComponent.h"
       
# 97 "/var/include/AudioUnit/AUComponent.h"
#pragma options align=mac68k
# 106 "/var/include/AudioUnit/AUComponent.h"
       
       




typedef AudioComponentInstance AudioUnit;
# 187 "/var/include/AudioUnit/AUComponent.h"
enum
{
 kAudioUnitType_Output = 'auou',
 kAudioUnitType_MusicDevice = 'aumu',
 kAudioUnitType_MusicEffect = 'aumf',
 kAudioUnitType_FormatConverter = 'aufc',
 kAudioUnitType_Effect = 'aufx',
 kAudioUnitType_Mixer = 'aumx',
 kAudioUnitType_Panner = 'aupn',
 kAudioUnitType_Generator = 'augn',
 kAudioUnitType_OfflineEffect = 'auol'
};


       
       




enum {
 kAudioUnitManufacturer_Apple = 'appl'
};
# 245 "/var/include/AudioUnit/AUComponent.h"
enum {
 kAudioUnitSubType_GenericOutput = 'genr',





 kAudioUnitSubType_RemoteIO = 'rioc',
 kAudioUnitSubType_VoiceProcessingIO = 'vpio'

};
# 310 "/var/include/AudioUnit/AUComponent.h"
enum{
 kAudioUnitSubType_AUConverter = 'conv',
# 320 "/var/include/AudioUnit/AUComponent.h"
 kAudioUnitSubType_AUiPodTime = 'iptm'

};
# 404 "/var/include/AudioUnit/AUComponent.h"
enum {
# 425 "/var/include/AudioUnit/AUComponent.h"
 kAudioUnitSubType_AUiPodEQ = 'ipeq',

};
# 458 "/var/include/AudioUnit/AUComponent.h"
enum {
 kAudioUnitSubType_MultiChannelMixer = 'mcmx',





 kAudioUnitSubType_AU3DMixerEmbedded = '3dem'

};
# 527 "/var/include/AudioUnit/AUComponent.h"
       
       
# 565 "/var/include/AudioUnit/AUComponent.h"
enum
{
 kAudioUnitRenderAction_PreRender = (1 << 2),
 kAudioUnitRenderAction_PostRender = (1 << 3),
 kAudioUnitRenderAction_OutputIsSilence = (1 << 4),
 kAudioOfflineUnitRenderAction_Preflight = (1 << 5),
 kAudioOfflineUnitRenderAction_Render = (1 << 6),
 kAudioOfflineUnitRenderAction_Complete = (1 << 7),
 kAudioUnitRenderAction_PostRenderError = (1 << 8)
};
typedef UInt32 AudioUnitRenderActionFlags;
# 620 "/var/include/AudioUnit/AUComponent.h"
enum
{
 kAudioUnitErr_InvalidProperty = -10879,
 kAudioUnitErr_InvalidParameter = -10878,
 kAudioUnitErr_InvalidElement = -10877,
 kAudioUnitErr_NoConnection = -10876,
 kAudioUnitErr_FailedInitialization = -10875,
 kAudioUnitErr_TooManyFramesToProcess = -10874,
 kAudioUnitErr_InvalidFile = -10871,
 kAudioUnitErr_FormatNotSupported = -10868,
 kAudioUnitErr_Uninitialized = -10867,
 kAudioUnitErr_InvalidScope = -10866,
 kAudioUnitErr_PropertyNotWritable = -10865,
 kAudioUnitErr_CannotDoInCurrentContext = -10863,
 kAudioUnitErr_InvalidPropertyValue = -10851,
 kAudioUnitErr_PropertyNotInUse = -10850,
 kAudioUnitErr_Initialized = -10849,
 kAudioUnitErr_InvalidOfflineRender = -10848,
 kAudioUnitErr_Unauthorized = -10847
};






typedef UInt32 AudioUnitPropertyID;





typedef UInt32 AudioUnitScope;






typedef UInt32 AudioUnitElement;





typedef UInt32 AudioUnitParameterID;





typedef Float32 AudioUnitParameterValue;
# 684 "/var/include/AudioUnit/AUComponent.h"
enum
{
 kParameterEvent_Immediate = 1,
 kParameterEvent_Ramped = 2
};
typedef UInt32 AUParameterEventType;
# 714 "/var/include/AudioUnit/AUComponent.h"
struct AudioUnitParameterEvent
{
 AudioUnitScope scope;
 AudioUnitElement element;
 AudioUnitParameterID parameter;

 AUParameterEventType eventType;

 union
 {
  struct
  {
   SInt32 startBufferOffset;
   UInt32 durationInFrames;
   AudioUnitParameterValue startValue;
   AudioUnitParameterValue endValue;
  } ramp;

  struct
  {
   UInt32 bufferOffset;
   AudioUnitParameterValue value;
  } immediate;

 } eventValues;
};
typedef struct AudioUnitParameterEvent AudioUnitParameterEvent;
# 757 "/var/include/AudioUnit/AUComponent.h"
struct AudioUnitParameter
{
 AudioUnit mAudioUnit;
 AudioUnitParameterID mParameterID;
 AudioUnitScope mScope;
 AudioUnitElement mElement;
};
typedef struct AudioUnitParameter AudioUnitParameter;
# 781 "/var/include/AudioUnit/AUComponent.h"
struct AudioUnitProperty
{
 AudioUnit mAudioUnit;
 AudioUnitPropertyID mPropertyID;
 AudioUnitScope mScope;
 AudioUnitElement mElement;
};
typedef struct AudioUnitProperty AudioUnitProperty;
# 812 "/var/include/AudioUnit/AUComponent.h"
typedef OSStatus
(*AURenderCallback)( void * inRefCon,
      AudioUnitRenderActionFlags * ioActionFlags,
      const AudioTimeStamp * inTimeStamp,
      UInt32 inBusNumber,
      UInt32 inNumberFrames,
      AudioBufferList * ioData);
# 836 "/var/include/AudioUnit/AUComponent.h"
typedef void
(*AudioUnitPropertyListenerProc)( void * inRefCon,
         AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement);
# 858 "/var/include/AudioUnit/AUComponent.h"
typedef void
(*AUInputSamplesInOutputCallback)( void * inRefCon,
         const AudioTimeStamp * inOutputTimeStamp,
         Float64 inInputSample,
         Float64 inNumberInputSamples);


       
       
# 883 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitInitialize( AudioUnit inUnit) ;
# 899 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitUninitialize( AudioUnit inUnit) ;
# 925 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitGetPropertyInfo( AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement,
         UInt32 * outDataSize,
         Boolean * outWritable) ;
# 955 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitGetProperty( AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement,
         void * outData,
         UInt32 * ioDataSize) ;
# 986 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitSetProperty( AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement,
         const void * inData,
         UInt32 inDataSize) ;
# 1014 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitAddPropertyListener( AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitPropertyListenerProc inProc,
         void * inProcUserData) ;
# 1037 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitRemovePropertyListenerWithUserData(
         AudioUnit inUnit,
         AudioUnitPropertyID inID,
         AudioUnitPropertyListenerProc inProc,
         void * inProcUserData) ;
# 1065 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitAddRenderNotify( AudioUnit inUnit,
         AURenderCallback inProc,
         void * inProcUserData) ;
# 1083 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitRemoveRenderNotify( AudioUnit inUnit,
         AURenderCallback inProc,
         void * inProcUserData) ;
# 1106 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitGetParameter( AudioUnit inUnit,
         AudioUnitParameterID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement,
         AudioUnitParameterValue * outValue) ;
# 1135 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitSetParameter( AudioUnit inUnit,
         AudioUnitParameterID inID,
         AudioUnitScope inScope,
         AudioUnitElement inElement,
         AudioUnitParameterValue inValue,
         UInt32 inBufferOffsetInFrames) ;
# 1170 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitScheduleParameters( AudioUnit inUnit,
         const AudioUnitParameterEvent * inParameterEvent,
         UInt32 inNumParamEvents) ;
# 1208 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitRender( AudioUnit inUnit,
         AudioUnitRenderActionFlags * ioActionFlags,
         const AudioTimeStamp * inTimeStamp,
         UInt32 inOutputBusNumber,
         UInt32 inNumberFrames,
         AudioBufferList * ioData) ;
# 1237 "/var/include/AudioUnit/AUComponent.h"
extern OSStatus
AudioUnitReset( AudioUnit inUnit,
         AudioUnitScope inScope,
         AudioUnitElement inElement) ;
# 1264 "/var/include/AudioUnit/AUComponent.h"
enum
{
 kAudioUnitRange = 0x0000,
 kAudioUnitInitializeSelect = 0x0001,
 kAudioUnitUninitializeSelect = 0x0002,
 kAudioUnitGetPropertyInfoSelect = 0x0003,
 kAudioUnitGetPropertySelect = 0x0004,
 kAudioUnitSetPropertySelect = 0x0005,
 kAudioUnitAddPropertyListenerSelect = 0x000A,
 kAudioUnitRemovePropertyListenerSelect = 0x000B,
 kAudioUnitRemovePropertyListenerWithUserDataSelect = 0x0012,
 kAudioUnitAddRenderNotifySelect = 0x000F,
 kAudioUnitRemoveRenderNotifySelect = 0x0010,
 kAudioUnitGetParameterSelect = 0x0006,
 kAudioUnitSetParameterSelect = 0x0007,
 kAudioUnitScheduleParametersSelect = 0x0011,
 kAudioUnitRenderSelect = 0x000E,
 kAudioUnitResetSelect = 0x0009
};


       
       
# 1303 "/var/include/AudioUnit/AUComponent.h"
typedef OSStatus
(*AudioUnitGetParameterProc)( void * inComponentStorage,
        AudioUnitParameterID inID,
        AudioUnitScope inScope,
        AudioUnitElement inElement,
        AudioUnitParameterValue * outValue);
# 1327 "/var/include/AudioUnit/AUComponent.h"
typedef OSStatus
(*AudioUnitSetParameterProc)( void * inComponentStorage,
        AudioUnitParameterID inID,
        AudioUnitScope inScope,
        AudioUnitElement inElement,
        AudioUnitParameterValue inValue,
        UInt32 inBufferOffsetInFrames);
# 1352 "/var/include/AudioUnit/AUComponent.h"
typedef OSStatus
(*AudioUnitRenderProc)( void * inComponentStorage,
        AudioUnitRenderActionFlags * ioActionFlags,
        const AudioTimeStamp * inTimeStamp,
        UInt32 inOutputBusNumber,
        UInt32 inNumberFrames,
        AudioBufferList * ioData);



       
       
# 1378 "/var/include/AudioUnit/AUComponent.h"
enum {
 kAudioUnitErr_IllegalInstrument = -10873,
 kAudioUnitErr_InstrumentTypeNotFound = -10872,
 kAudioUnitErr_UnknownFileType = -10870,
 kAudioUnitErr_FileNotSpecified = -10869
};
# 1399 "/var/include/AudioUnit/AUComponent.h"
#pragma options align=reset
# 23 "/var/include/AudioUnit/AudioUnit.h" 2
# 1 "/var/include/AudioUnit/AudioOutputUnit.h" 1
# 38 "/var/include/AudioUnit/AudioOutputUnit.h"
#pragma options align=mac68k
# 49 "/var/include/AudioUnit/AudioOutputUnit.h"
extern OSStatus
AudioOutputUnitStart( AudioUnit ci) ;

extern OSStatus
AudioOutputUnitStop( AudioUnit ci) ;




enum {
 kAudioOutputUnitRange = 0x0200,
 kAudioOutputUnitStartSelect = 0x0201,
 kAudioOutputUnitStopSelect = 0x0202
};



#pragma options align=reset
# 24 "/var/include/AudioUnit/AudioUnit.h" 2
# 1 "/var/include/AudioUnit/AudioUnitProperties.h" 1
# 29 "/var/include/AudioUnit/AudioUnitProperties.h"
       
# 77 "/var/include/AudioUnit/AudioUnitProperties.h"
       
       
       
# 97 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAudioUnitScope_Global = 0,
 kAudioUnitScope_Input = 1,
 kAudioUnitScope_Output = 2






};



       
# 699 "/var/include/AudioUnit/AudioUnitProperties.h"
enum
{

 kAudioUnitProperty_ClassInfo = 0,
 kAudioUnitProperty_MakeConnection = 1,
 kAudioUnitProperty_SampleRate = 2,
 kAudioUnitProperty_ParameterList = 3,
 kAudioUnitProperty_ParameterInfo = 4,
 kAudioUnitProperty_StreamFormat = 8,
 kAudioUnitProperty_ElementCount = 11,
 kAudioUnitProperty_Latency = 12,
 kAudioUnitProperty_SupportedNumChannels = 13,
 kAudioUnitProperty_MaximumFramesPerSlice = 14,
 kAudioUnitProperty_AudioChannelLayout = 19,
 kAudioUnitProperty_TailTime = 20,
 kAudioUnitProperty_BypassEffect = 21,
 kAudioUnitProperty_LastRenderError = 22,
 kAudioUnitProperty_SetRenderCallback = 23,
 kAudioUnitProperty_FactoryPresets = 24,
 kAudioUnitProperty_RenderQuality = 26,
 kAudioUnitProperty_InPlaceProcessing = 29,
 kAudioUnitProperty_ElementName = 30,
 kAudioUnitProperty_SupportedChannelLayoutTags = 32,
 kAudioUnitProperty_PresentPreset = 36,
 kAudioUnitProperty_ShouldAllocateBuffer = 51
# 750 "/var/include/AudioUnit/AudioUnitProperties.h"
};
# 800 "/var/include/AudioUnit/AudioUnitProperties.h"
typedef struct AudioUnitConnection {
 AudioUnit sourceAudioUnit;
 UInt32 sourceOutputNumber;
 UInt32 destInputNumber;
} AudioUnitConnection;





typedef struct AUChannelInfo {
 SInt16 inChannels;
 SInt16 outChannels;
} AUChannelInfo;





typedef struct AudioUnitExternalBuffer {
 Byte * buffer;
 UInt32 size;
} AudioUnitExternalBuffer;





typedef struct AURenderCallbackStruct {
 AURenderCallback inputProc;
 void * inputProcRefCon;
} AURenderCallbackStruct;
# 842 "/var/include/AudioUnit/AudioUnitProperties.h"
typedef struct AUPreset {
 SInt32 presetNumber;
 CFStringRef presetName;
} AUPreset;







enum {
 kRenderQuality_Max = 0x7F,
 kRenderQuality_High = 0x60,
 kRenderQuality_Medium = 0x40,
 kRenderQuality_Low = 0x20,
 kRenderQuality_Min = 0
};
# 1005 "/var/include/AudioUnit/AudioUnitProperties.h"
       
# 1066 "/var/include/AudioUnit/AudioUnitProperties.h"
enum
{
 kAudioUnitParameterUnit_Generic = 0,
 kAudioUnitParameterUnit_Indexed = 1,
 kAudioUnitParameterUnit_Boolean = 2,
 kAudioUnitParameterUnit_Percent = 3,
 kAudioUnitParameterUnit_Seconds = 4,
 kAudioUnitParameterUnit_SampleFrames = 5,
 kAudioUnitParameterUnit_Phase = 6,
 kAudioUnitParameterUnit_Rate = 7,
 kAudioUnitParameterUnit_Hertz = 8,
 kAudioUnitParameterUnit_Cents = 9,
 kAudioUnitParameterUnit_RelativeSemiTones = 10,
 kAudioUnitParameterUnit_MIDINoteNumber = 11,
 kAudioUnitParameterUnit_MIDIController = 12,
 kAudioUnitParameterUnit_Decibels = 13,
 kAudioUnitParameterUnit_LinearGain = 14,
 kAudioUnitParameterUnit_Degrees = 15,
 kAudioUnitParameterUnit_EqualPowerCrossfade = 16,
 kAudioUnitParameterUnit_MixerFaderCurve1 = 17,
 kAudioUnitParameterUnit_Pan = 18,
 kAudioUnitParameterUnit_Meters = 19,
 kAudioUnitParameterUnit_AbsoluteCents = 20,
 kAudioUnitParameterUnit_Octaves = 21,
 kAudioUnitParameterUnit_BPM = 22,
    kAudioUnitParameterUnit_Beats = 23,
 kAudioUnitParameterUnit_Milliseconds = 24,
 kAudioUnitParameterUnit_Ratio = 25,
 kAudioUnitParameterUnit_CustomUnit = 26
};



typedef UInt32 AudioUnitParameterUnit;
# 1129 "/var/include/AudioUnit/AudioUnitProperties.h"
typedef struct AudioUnitParameterInfo
{
 char name[52];
 CFStringRef unitName;
 UInt32 clumpID;
 CFStringRef cfNameString;
 AudioUnitParameterUnit unit;
 AudioUnitParameterValue minValue;
 AudioUnitParameterValue maxValue;
 AudioUnitParameterValue defaultValue;
 UInt32 flags;
} AudioUnitParameterInfo;
# 1166 "/var/include/AudioUnit/AudioUnitProperties.h"
enum
{
 kAudioUnitParameterFlag_CFNameRelease = (1L << 4),

 kAudioUnitParameterFlag_MeterReadOnly = (1L << 15),


 kAudioUnitParameterFlag_DisplayMask = (7L << 16) | (1L << 22),
 kAudioUnitParameterFlag_DisplaySquareRoot = (1L << 16),
 kAudioUnitParameterFlag_DisplaySquared = (2L << 16),
 kAudioUnitParameterFlag_DisplayCubed = (3L << 16),
 kAudioUnitParameterFlag_DisplayCubeRoot = (4L << 16),
 kAudioUnitParameterFlag_DisplayExponential = (5L << 16),

 kAudioUnitParameterFlag_HasClump = (1L << 20),
 kAudioUnitParameterFlag_ValuesHaveStrings = (1L << 21),

 kAudioUnitParameterFlag_DisplayLogarithmic = (1L << 22),

 kAudioUnitParameterFlag_IsHighResolution = (1L << 23),
 kAudioUnitParameterFlag_NonRealTime = (1L << 24),
 kAudioUnitParameterFlag_CanRamp = (1L << 25),
 kAudioUnitParameterFlag_ExpertMode = (1L << 26),
 kAudioUnitParameterFlag_HasCFNameString = (1L << 27),
 kAudioUnitParameterFlag_IsGlobalMeta = (1L << 28),
 kAudioUnitParameterFlag_IsElementMeta = (1L << 29),
 kAudioUnitParameterFlag_IsReadable = (1L << 30),
 kAudioUnitParameterFlag_IsWritable = (1L << 31)
};





enum {
 kAudioUnitClumpID_System = 0
};
# 1286 "/var/include/AudioUnit/AudioUnitProperties.h"
       
# 1295 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {

 kAudioOutputUnitProperty_IsRunning = 2001
};

       
       
# 1841 "/var/include/AudioUnit/AudioUnitProperties.h"
       
       


       
# 1855 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAudioUnitProperty_SampleRateConverterComplexity = 3014
};
# 1867 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAudioUnitSampleRateConverterComplexity_Linear = 'line',
 kAudioUnitSampleRateConverterComplexity_Normal = 'norm',
 kAudioUnitSampleRateConverterComplexity_Mastering = 'bats'
};


       
# 1942 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAudioOutputUnitProperty_CurrentDevice = 2000,
 kAudioOutputUnitProperty_ChannelMap = 2002,
 kAudioOutputUnitProperty_EnableIO = 2003,
 kAudioOutputUnitProperty_StartTime = 2004,
 kAudioOutputUnitProperty_SetInputCallback = 2005,
 kAudioOutputUnitProperty_HasIO = 2006,
 kAudioOutputUnitProperty_StartTimestampsAtZero = 2007
};




typedef struct AudioOutputUnitStartAtTimeParams {

 AudioTimeStamp mTimestamp;
 UInt32 mFlags;
} AudioOutputUnitStartAtTimeParams;



       
# 1990 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAUVoiceIOProperty_BypassVoiceProcessing = 2100,
 kAUVoiceIOProperty_VoiceProcessingEnableAGC = 2101,
 kAUVoiceIOProperty_DuckNonVoiceAudio = 2102
};




       
# 2041 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {

 kAudioUnitProperty_MeteringMode = 3007,


 kAudioUnitProperty_MatrixLevels = 3006,
 kAudioUnitProperty_MatrixDimensions = 3009,
 kAudioUnitProperty_MeterClipping = 3011
};
# 2061 "/var/include/AudioUnit/AudioUnitProperties.h"
typedef struct AudioUnitMeterClipping
{
 Float32 peakValueSinceLastCall;
 Boolean sawInfinity;
 Boolean sawNotANumber;
} AudioUnitMeterClipping;


       
# 2139 "/var/include/AudioUnit/AudioUnitProperties.h"
enum {
 kAudioUnitProperty_3DMixerDistanceParams = 3010,
 kAudioUnitProperty_3DMixerAttenuationCurve = 3013,
 kAudioUnitProperty_SpatializationAlgorithm = 3000,
 kAudioUnitProperty_DopplerShift = 3002,
 kAudioUnitProperty_3DMixerRenderingFlags = 3003,
 kAudioUnitProperty_3DMixerDistanceAtten = 3004,
 kAudioUnitProperty_ReverbPreset = 3012
};




enum {
 k3DMixerAttenuationCurve_Power = 0,
    k3DMixerAttenuationCurve_Exponential = 1,
    k3DMixerAttenuationCurve_Inverse = 2,
    k3DMixerAttenuationCurve_Linear = 3
};




typedef struct MixerDistanceParams {
 Float32 mReferenceDistance;
 Float32 mMaxDistance;
 Float32 mMaxAttenuation;
} MixerDistanceParams;





enum {
 kSpatializationAlgorithm_EqualPowerPanning = 0,
 kSpatializationAlgorithm_SphericalHead = 1,
 kSpatializationAlgorithm_HRTF = 2,
 kSpatializationAlgorithm_SoundField = 3,
 kSpatializationAlgorithm_VectorBasedPanning = 4,
 kSpatializationAlgorithm_StereoPassThrough = 5
};




enum {
 k3DMixerRenderingFlags_InterAuralDelay = (1L << 0),
 k3DMixerRenderingFlags_DopplerShift = (1L << 1),
 k3DMixerRenderingFlags_DistanceAttenuation = (1L << 2),
 k3DMixerRenderingFlags_DistanceFilter = (1L << 3),
 k3DMixerRenderingFlags_DistanceDiffusion = (1L << 4),
 k3DMixerRenderingFlags_LinearDistanceAttenuation = (1L << 5),
 k3DMixerRenderingFlags_ConstantReverbBlend = (1L << 6)
};


       
       
# 2793 "/var/include/AudioUnit/AudioUnitProperties.h"
       
       
# 25 "/var/include/AudioUnit/AudioUnit.h" 2
# 1 "/var/include/AudioUnit/AudioUnitParameters.h" 1
# 18 "/var/include/AudioUnit/AudioUnitParameters.h"
       
# 82 "/var/include/AudioUnit/AudioUnitParameters.h"
       



enum {

    k3DMixerParam_Azimuth = 0,


    k3DMixerParam_Elevation = 1,


    k3DMixerParam_Distance = 2,


    k3DMixerParam_Gain = 3,


    k3DMixerParam_PlaybackRate = 4

};


enum {
 kMultiChannelMixerParam_Volume = 0,
 kMultiChannelMixerParam_Enable = 1,



 kMultiChannelMixerParam_PreAveragePower = 1000,
 kMultiChannelMixerParam_PrePeakHoldLevel = 2000,
 kMultiChannelMixerParam_PostAveragePower = 3000,
 kMultiChannelMixerParam_PostPeakHoldLevel = 4000
};



enum {

 kHALOutputParam_Volume = 14
};


enum {
 kTimePitchParam_Rate = 0,




};
# 162 "/var/include/AudioUnit/AudioUnitParameters.h"
       
# 26 "/var/include/AudioUnit/AudioUnit.h" 2
# 22 "/var/include/AudioToolbox/AUGraph.h" 2
# 71 "/var/include/AudioToolbox/AUGraph.h"
typedef struct OpaqueAUGraph *AUGraph;





typedef SInt32 AUNode;
# 102 "/var/include/AudioToolbox/AUGraph.h"
enum
{
 kAUGraphErr_NodeNotFound = -10860,
 kAUGraphErr_InvalidConnection = -10861,
 kAUGraphErr_OutputNodeErr = -10862,
 kAUGraphErr_CannotDoInCurrentContext = -10863,
 kAUGraphErr_InvalidAudioUnit = -10864
};

       






extern OSStatus
NewAUGraph( AUGraph *outGraph) ;







extern OSStatus
DisposeAUGraph( AUGraph inGraph) ;


       
       
# 146 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphAddNode( AUGraph inGraph,
     const AudioComponentDescription * inDescription,
     AUNode * outNode) ;
# 159 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphRemoveNode( AUGraph inGraph,
     AUNode inNode) ;
# 170 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetNodeCount(AUGraph inGraph,
     UInt32 *outNumberOfNodes) ;
# 183 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetIndNode( AUGraph inGraph,
     UInt32 inIndex,
     AUNode *outNode) ;
# 198 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphNodeInfo( AUGraph inGraph,
     AUNode inNode,
     AudioComponentDescription * outDescription,
     AudioUnit * outAudioUnit) ;
# 255 "/var/include/AudioToolbox/AUGraph.h"
       
       
# 271 "/var/include/AudioToolbox/AUGraph.h"
enum {
 kAUNodeInteraction_Connection = 1,
 kAUNodeInteraction_InputCallback = 2
};
# 284 "/var/include/AudioToolbox/AUGraph.h"
struct AudioUnitNodeConnection
{
 AUNode sourceNode;
 UInt32 sourceOutputNumber;
 AUNode destNode;
 UInt32 destInputNumber;
};
typedef struct AudioUnitNodeConnection AudioUnitNodeConnection;
typedef struct AudioUnitNodeConnection AUNodeConnection;
# 303 "/var/include/AudioToolbox/AUGraph.h"
struct AUNodeRenderCallback
{
 AUNode destNode;
 AudioUnitElement destInputNumber;
 AURenderCallbackStruct cback;
};
typedef struct AUNodeRenderCallback AUNodeRenderCallback;
# 331 "/var/include/AudioToolbox/AUGraph.h"
struct AUNodeInteraction
{
 UInt32 nodeInteractionType;

 union
 {
  AUNodeConnection connection;
  AUNodeRenderCallback inputCallback;

 } nodeInteraction;
};
typedef struct AUNodeInteraction AUNodeInteraction;
# 353 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphConnectNodeInput( AUGraph inGraph,
       AUNode inSourceNode,
       UInt32 inSourceOutputNumber,
       AUNode inDestNode,
       UInt32 inDestInputNumber) ;
# 368 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphSetNodeInputCallback (AUGraph inGraph,
       AUNode inDestNode,
       UInt32 inDestInputNumber,
       const AURenderCallbackStruct * inInputCallback)
                 ;
# 384 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphDisconnectNodeInput( AUGraph inGraph,
       AUNode inDestNode,
       UInt32 inDestInputNumber) ;







extern OSStatus
AUGraphClearConnections( AUGraph inGraph) ;
# 405 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetNumberOfInteractions( AUGraph inGraph,
        UInt32 * outNumInteractions) ;
# 422 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetInteractionInfo( AUGraph inGraph,
       UInt32 inInteractionIndex,
       AUNodeInteraction * outInteraction) ;
# 435 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphCountNodeInteractions( AUGraph inGraph,
        AUNode inNode,
        UInt32 * outNumInteractions) ;
# 451 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetNodeInteractions( AUGraph inGraph,
       AUNode inNode,
       UInt32 * ioNumInteractions,
       AUNodeInteraction * outInteractions) ;



       
# 504 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphUpdate( AUGraph inGraph,
     Boolean *outIsUpdated) ;

       
       
# 519 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphOpen( AUGraph inGraph) ;







extern OSStatus
AUGraphClose( AUGraph inGraph) ;
# 542 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphInitialize( AUGraph inGraph) ;







extern OSStatus
AUGraphUninitialize( AUGraph inGraph) ;
# 562 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphStart( AUGraph inGraph) ;







extern OSStatus
AUGraphStop( AUGraph inGraph) ;







extern OSStatus
AUGraphIsOpen( AUGraph inGraph,
      Boolean *outIsOpen) ;






extern OSStatus
AUGraphIsInitialized( AUGraph inGraph,
      Boolean *outIsInitialized) ;






extern OSStatus
AUGraphIsRunning( AUGraph inGraph,
      Boolean *outIsRunning) ;

       
       
# 614 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetCPULoad( AUGraph inGraph,
      Float32 *outAverageCPULoad) ;
# 625 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphGetMaxCPULoad( AUGraph inGraph,
      Float32 *outMaxLoad) ;
# 639 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphAddRenderNotify( AUGraph inGraph,
        AURenderCallback inCallback,
        void *inRefCon) ;
# 653 "/var/include/AudioToolbox/AUGraph.h"
extern OSStatus
AUGraphRemoveRenderNotify( AUGraph inGraph,
        AURenderCallback inCallback,
        void *inRefCon) ;

       
       
# 28 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 1 "/var/include/AudioToolbox/AudioConverter.h" 1
# 68 "/var/include/AudioToolbox/AudioConverter.h"
typedef struct OpaqueAudioConverter * AudioConverterRef;

typedef UInt32 AudioConverterPropertyID;
# 215 "/var/include/AudioToolbox/AudioConverter.h"
enum
{
 kAudioConverterPropertyMinimumInputBufferSize = 'mibs',
 kAudioConverterPropertyMinimumOutputBufferSize = 'mobs',
 kAudioConverterPropertyMaximumInputBufferSize = 'xibs',
 kAudioConverterPropertyMaximumInputPacketSize = 'xips',
 kAudioConverterPropertyMaximumOutputPacketSize = 'xops',
 kAudioConverterPropertyCalculateInputBufferSize = 'cibs',
 kAudioConverterPropertyCalculateOutputBufferSize = 'cobs',
 kAudioConverterPropertyInputCodecParameters = 'icdp',
 kAudioConverterPropertyOutputCodecParameters = 'ocdp',
 kAudioConverterSampleRateConverterAlgorithm = 'srci',
 kAudioConverterSampleRateConverterComplexity = 'srca',
 kAudioConverterSampleRateConverterQuality = 'srcq',
 kAudioConverterSampleRateConverterInitialPhase = 'srcp',
 kAudioConverterCodecQuality = 'cdqu',
 kAudioConverterPrimeMethod = 'prmm',
 kAudioConverterPrimeInfo = 'prim',
 kAudioConverterChannelMap = 'chmp',
 kAudioConverterDecompressionMagicCookie = 'dmgc',
 kAudioConverterCompressionMagicCookie = 'cmgc',
 kAudioConverterEncodeBitRate = 'brat',
 kAudioConverterEncodeAdjustableSampleRate = 'ajsr',
 kAudioConverterInputChannelLayout = 'icl ',
 kAudioConverterOutputChannelLayout = 'ocl ',
 kAudioConverterApplicableEncodeBitRates = 'aebr',
 kAudioConverterAvailableEncodeBitRates = 'vebr',
 kAudioConverterApplicableEncodeSampleRates = 'aesr',
 kAudioConverterAvailableEncodeSampleRates = 'vesr',
 kAudioConverterAvailableEncodeChannelLayoutTags = 'aecl',
 kAudioConverterCurrentOutputStreamDescription = 'acod',
 kAudioConverterCurrentInputStreamDescription = 'acid',
 kAudioConverterPropertySettings = 'acps',
 kAudioConverterPropertyBitDepthHint = 'acbd',
 kAudioConverterPropertyFormatList = 'flst'
};
# 263 "/var/include/AudioToolbox/AudioConverter.h"
enum
{
 kAudioConverterQuality_Max = 0x7F,
 kAudioConverterQuality_High = 0x60,
 kAudioConverterQuality_Medium = 0x40,
 kAudioConverterQuality_Low = 0x20,
 kAudioConverterQuality_Min = 0
};
# 282 "/var/include/AudioToolbox/AudioConverter.h"
enum {
 kAudioConverterSampleRateConverterComplexity_Linear = 'line',
 kAudioConverterSampleRateConverterComplexity_Normal = 'norm',
 kAudioConverterSampleRateConverterComplexity_Mastering = 'bats',
};
# 303 "/var/include/AudioToolbox/AudioConverter.h"
enum
{
 kConverterPrimeMethod_Pre = 0,
 kConverterPrimeMethod_Normal = 1,
 kConverterPrimeMethod_None = 2
};
# 365 "/var/include/AudioToolbox/AudioConverter.h"
struct AudioConverterPrimeInfo {
 UInt32 leadingFrames;
 UInt32 trailingFrames;
};
typedef struct AudioConverterPrimeInfo AudioConverterPrimeInfo;





enum
{
 kAudioConverterErr_FormatNotSupported = 'fmt?',
 kAudioConverterErr_OperationNotSupported = 0x6F703F3F,
 kAudioConverterErr_PropertyNotSupported = 'prop',
 kAudioConverterErr_InvalidInputSize = 'insz',
 kAudioConverterErr_InvalidOutputSize = 'otsz',

 kAudioConverterErr_UnspecifiedError = 'what',
 kAudioConverterErr_BadPropertySizeError = '!siz',
 kAudioConverterErr_RequiresPacketDescriptionsError = '!pkd',
 kAudioConverterErr_InputSampleRateOutOfRange = '!isr',
 kAudioConverterErr_OutputSampleRateOutOfRange = '!osr'
};
# 433 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterNew( const AudioStreamBasicDescription* inSourceFormat,
      const AudioStreamBasicDescription* inDestinationFormat,
      AudioConverterRef* outAudioConverter) ;
# 460 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterNewSpecific( const AudioStreamBasicDescription* inSourceFormat,
       const AudioStreamBasicDescription* inDestinationFormat,
       UInt32 inNumberClassDescriptions,
       AudioClassDescription* inClassDescriptions,
       AudioConverterRef* outAudioConverter)
                    ;
# 477 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterDispose( AudioConverterRef inAudioConverter) ;
# 495 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterReset( AudioConverterRef inAudioConverter) ;
# 513 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterGetPropertyInfo( AudioConverterRef inAudioConverter,
        AudioConverterPropertyID inPropertyID,
        UInt32* outSize,
        Boolean* outWritable) ;
# 535 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterGetProperty( AudioConverterRef inAudioConverter,
       AudioConverterPropertyID inPropertyID,
       UInt32* ioPropertyDataSize,
       void* outPropertyData) ;
# 556 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterSetProperty( AudioConverterRef inAudioConverter,
       AudioConverterPropertyID inPropertyID,
       UInt32 inPropertyDataSize,
       const void* inPropertyData) ;
# 601 "/var/include/AudioToolbox/AudioConverter.h"
typedef OSStatus
(*AudioConverterInputDataProc)( AudioConverterRef inAudioConverter,
        UInt32* ioDataSize,
        void** outData,
        void* inUserData);
# 669 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterConvertBuffer( AudioConverterRef inAudioConverter,
        UInt32 inInputDataSize,
        const void* inInputData,
        UInt32* ioOutputDataSize,
        void* outOutputData) ;
# 716 "/var/include/AudioToolbox/AudioConverter.h"
typedef OSStatus
(*AudioConverterComplexInputDataProc)( AudioConverterRef inAudioConverter,
          UInt32* ioNumberDataPackets,
          AudioBufferList* ioData,
          AudioStreamPacketDescription** outDataPacketDescription,
          void* inUserData);
# 753 "/var/include/AudioToolbox/AudioConverter.h"
extern OSStatus
AudioConverterFillComplexBuffer( AudioConverterRef inAudioConverter,
         AudioConverterComplexInputDataProc inInputDataProc,
         void* inInputDataProcUserData,
         UInt32* ioOutputDataPacketSize,
         AudioBufferList* outOutputData,
         AudioStreamPacketDescription* outPacketDescription)
                    ;
# 29 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 1 "/var/include/AudioToolbox/ExtendedAudioFile.h" 1
# 47 "/var/include/AudioToolbox/ExtendedAudioFile.h"
typedef struct OpaqueExtAudioFile * ExtAudioFileRef;
# 123 "/var/include/AudioToolbox/ExtendedAudioFile.h"
enum {
 kExtAudioFileProperty_FileDataFormat = 'ffmt',
 kExtAudioFileProperty_FileChannelLayout = 'fclo',
 kExtAudioFileProperty_ClientDataFormat = 'cfmt',
 kExtAudioFileProperty_ClientChannelLayout = 'cclo',


 kExtAudioFileProperty_AudioConverter = 'acnv',
 kExtAudioFileProperty_AudioFile = 'afil',
 kExtAudioFileProperty_FileMaxPacketSize = 'fmps',
 kExtAudioFileProperty_ClientMaxPacketSize = 'cmps',
 kExtAudioFileProperty_FileLengthFrames = '#frm',


 kExtAudioFileProperty_ConverterConfig = 'accf',
 kExtAudioFileProperty_IOBufferSizeBytes = 'iobs',
 kExtAudioFileProperty_IOBuffer = 'iobf'
};
typedef UInt32 ExtAudioFilePropertyID;


enum {
 kExtAudioFileError_InvalidProperty = -66561,
 kExtAudioFileError_InvalidPropertySize = -66562,
 kExtAudioFileError_NonPCMClientFormat = -66563,
 kExtAudioFileError_InvalidChannelMap = -66564,
 kExtAudioFileError_InvalidOperationOrder = -66565,
 kExtAudioFileError_InvalidDataFormat = -66566,
 kExtAudioFileError_MaxPacketSizeUnknown = -66567,
 kExtAudioFileError_InvalidSeek = -66568,
 kExtAudioFileError_AsyncWriteTooLarge = -66569,
 kExtAudioFileError_AsyncWriteBufferOverflow = -66570
};
# 177 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileOpenURL( CFURLRef inURL,
       ExtAudioFileRef * outExtAudioFile) __attribute__((weak_import));
# 200 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileWrapAudioFileID(AudioFileID inFileID,
       Boolean inForWriting,
       ExtAudioFileRef * outExtAudioFile)
                   __attribute__((weak_import));
# 235 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileCreateWithURL( CFURLRef inURL,
       AudioFileTypeID inFileType,
       const AudioStreamBasicDescription * inStreamDesc,
       const AudioChannelLayout * inChannelLayout,
                      UInt32 inFlags,
       ExtAudioFileRef * outExtAudioFile)
                   __attribute__((weak_import));
# 315 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileDispose( ExtAudioFileRef inExtAudioFile)
                   __attribute__((weak_import));
# 352 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileRead( ExtAudioFileRef inExtAudioFile,
       UInt32 * ioNumberFrames,
       AudioBufferList * ioData)
                   __attribute__((weak_import));
# 376 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileWrite( ExtAudioFileRef inExtAudioFile,
       UInt32 inNumberFrames,
       const AudioBufferList * ioData)
                   __attribute__((weak_import));
# 411 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileWriteAsync( ExtAudioFileRef inExtAudioFile,
       UInt32 inNumberFrames,
       const AudioBufferList * ioData)
                   __attribute__((weak_import));
# 437 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileSeek( ExtAudioFileRef inExtAudioFile,
       SInt64 inFrameOffset)
                   __attribute__((weak_import));
# 456 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileTell( ExtAudioFileRef inExtAudioFile,
       SInt64 * outFrameOffset)
                   __attribute__((weak_import));
# 483 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileGetPropertyInfo(ExtAudioFileRef inExtAudioFile,
       ExtAudioFilePropertyID inPropertyID,
       UInt32 * outSize,
       Boolean * outWritable)
                   __attribute__((weak_import));
# 507 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileGetProperty( ExtAudioFileRef inExtAudioFile,
       ExtAudioFilePropertyID inPropertyID,
       UInt32 * ioPropertyDataSize,
       void * outPropertyData)
                   __attribute__((weak_import));
# 530 "/var/include/AudioToolbox/ExtendedAudioFile.h"
extern OSStatus
ExtAudioFileSetProperty( ExtAudioFileRef inExtAudioFile,
       ExtAudioFilePropertyID inPropertyID,
       UInt32 inPropertyDataSize,
       const void * inPropertyData)
                   __attribute__((weak_import));
# 30 "/var/include/AudioToolbox/AudioToolbox.h" 2
# 64 "/var/include/AudioToolbox/AudioToolbox.h"
extern void CAShow (void* inObject)
           ;




extern void CAShowFile (void* inObject, FILE* inFile)
           ;
# 14 "test.c" 2
# 1 "/var/include/GraphicsServices/GraphicsServices.h" 1
# 14 "/var/include/GraphicsServices/GraphicsServices.h"
struct __GSEvent;
typedef struct __GSEvent GSEvent;
typedef GSEvent *GSEventRef;





int GSEventIsChordingHandEvent(GSEvent *ev);
int GSEventGetClickCount(GSEvent *ev);
CGPoint GSEventGetLocationInWindow(GSEvent *ev);
float GSEventGetDeltaX(GSEvent *ev);
float GSEventGetDeltaY(GSEvent *ev);
CGPoint GSEventGetInnerMostPathPosition(GSEvent *ev);
CGPoint GSEventGetOuterMostPathPosition(GSEvent *ev);
unsigned int GSEventGetSubType(GSEvent *ev);
unsigned int GSEventGetType(GSEvent *ev);
unsigned int GSEventDeviceOrientation(GSEvent *ev);
# 15 "test.c" 2
# 1 "/var/include/UIKit/UITransformAnimation.h" 1






# 1 "/var/include/UIKit/UIAnimation.h" 1
# 9 "/var/include/UIKit/UIAnimation.h"
typedef enum {
    kUIAnimationCurveEaseInEaseOut,
    kUIAnimationCurveEaseIn,
    kUIAnimationCurveEaseOut,
    kUIAnimationCurveLinear
} UIAnimationCurve;

@interface UIAnimation : NSObject {}

- (id)initWithTarget:(id)target;
- (id)target;

- (SEL)action;
- (void)setAction:(SEL)action;

- (void)setAnimationCurve:(UIAnimationCurve)animationCurve;

- (id)delegate;
- (void)setDelegate:(id)delegate;

- (float)progressForFraction:(float)fraction;
- (void)setProgress:(float)progress;

- (void)stopAnimation;

@end

@interface UIAnimation (Internal)
- (float)fractionForTime:(double)time;
- (void)markStart:(double)fp8;
- (void)markStop;
- (void)setDuration:(double)duration;
- (int)state;
- (BOOL)tvOutput;
@end
# 8 "/var/include/UIKit/UITransformAnimation.h" 2

@interface UITransformAnimation : UIAnimation
{
    struct CGAffineTransform _startTransform;
    struct CGAffineTransform _endTransform;
}

- (struct CGAffineTransform)_transformWithMultiplier:(float)fp8;
- (void)setEndTransform:(struct CGAffineTransform)fp8;
- (void)setProgress:(float)fp8;
- (void)setStartTransform:(struct CGAffineTransform)fp8;
- (struct CGAffineTransform)transformForFraction:(float)fp8;

@end
# 16 "test.c" 2
# 1 "/var/include/UIKit/UIAnimator.h" 1
# 9 "/var/include/UIKit/UIAnimator.h"
@interface UIAnimator : NSObject
{
    NSMutableArray *_animations;
    double _lastUpdateTime;
    struct __GSHeartbeat *_lcdHeartbeat;
    struct __GSHeartbeat *_tvHeartbeat;
    int _lcdCount;
    int _tvCount;
}

+ (void)disableAnimation;
+ (void)enableAnimation;
+ (id)sharedAnimator;
- (void)addAnimation:(id)fp8 withDuration:(double)fp12 start:(BOOL)fp20;
- (void)addAnimations:(id)fp8 withDuration:(double)fp12 start:(BOOL)fp20;
- (void)dealloc;
- (float)fractionForAnimation:(id)fp8;
- (void)removeAnimationsForTarget:(id)fp8;
- (void)removeAnimationsForTarget:(id)fp8 ofKind:(Class)fp12;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation:(id)fp8;

@end
# 17 "test.c" 2
# 1 "PhotoLibrary.h" 1







struct CPRecord;

struct CameraDevice;

struct CameraImageQueueHelper;


struct __CoreSurfaceBuffer;

struct __GSEvent;

struct __GSFont;

typedef struct {
    int _field1;
    int _field2;
    id _field3;
    id _field4;
    float _field5;
    int _field6;
    SEL _field7;
    id _field8;
} CDAnonymousStruct1234;



@class PLUIController;
@class PLCropOverlay;
@class PLImageTile;
@class PLPhotoLibrary;
@class CameraView;
@class BackgroundView;
@class CameraButtonBar;
@class PhotosNavigationItem;
@class MLPhotoAlbum;
@class DCFFileGroup;
@class MLPhotoAlbum;
@class MLPhoto;
@class CameraController;
@class CameraLoadingView;


@interface CameraController : NSObject
{

    struct CameraDevice *_camera;
    struct CameraImageQueueHelper *_cameraHelper;
    id _delegate;
    UIView *_previewView;
    BOOL _isPreviewing;
}

+ (id)sharedInstance;
- (id)init;
- (void)_setIsReady;
- (BOOL)isReady;
- (void)_tookPicture:(struct __CoreSurfaceBuffer *)fp8;
- (void)_tookPicture:(struct CGImage *)fp8 jpegData:(struct __CFData *)fp12 imageProperties:(struct __CFDictionary *)fp16;
- (struct CameraImageQueueHelper *)_cameraHelper;
- (BOOL)_setupCamera;
- (void)_tearDownCamera;
- (void)setDelegate:(id)fp8;
- (struct CGRect)_cameraFrame;
- (id)previewView;
- (void)startPreview;
- (void)stopPreview;
- (void)capturePhoto;

@end


@interface CameraLoadingView : UIView
{
    id _progressIndicator;
}

- (id)initWithFrame:(struct CGRect)fp8;
- (void)startAnimation;
- (void)stopAnimation;
- (void)drawRect:(struct CGRect)fp8;

@end

@interface CameraView : UIView
{

    int _availablePictureCount;
    int _captureOrientation;
    BOOL _manipulatingCrop;
    UIView *_fourByThreeBackstop;
    CameraController *_cameraController;
    UIView *_previewView;
    UIView *_animatedCaptureView;
    UIView *_irisView;
    UIView *_staticIrisView;
    int _pictureCapacity;
    BOOL _irisIsClosed;
    PLCropOverlay *_cropOverlay;
    PLImageTile *_imageTile;
    CameraLoadingView *_loadingView;
}

- (void)_playShutterSound;
- (void)_showCropOverlayWithTitle:(id)fp8 subtitle:(id)fp12 OKButtonTitle:(id)fp16 OKButtonColor:(int)fp20 OKButtonShowCamera:(BOOL)fp24 cancelButtonTitle:(id)fp28;
- (void)_updateStatusBar;
- (void)_addAdditionalEXIFPropertiesForCurrentState:(id)fp8 date:(id)fp12 toDictionary:(id)fp16;
- (int)_sensorOrientationForDeviceOrientation:(int)fp8;
- (void)setIsLoading:(BOOL)fp8;
- (void)cameraControllerReadyStateChanged:(id)fp8;
- (void)cameraController:(id)fp8 tookPicture:(id)fp12 withPreview:(id)fp16 jpegData:(struct __CFData *)fp20 imageProperties:(id)fp24;
- (void)setupAnimateCameraPreviewDown:(id)fp8;
- (void)animateCameraPreviewDown;
- (void)_storePictureAnimation:(id)fp8 finished:(id)fp12;
- (id)initWithFrame:(struct CGRect)fp8;
- (void)dealloc;
- (BOOL)shouldShowIris;
- (void)setCameraButtonBar:(id)fp8;
- (id)buttonBar;
- (void)takePictureOpenIrisAnimationFinished;
- (void)takePictureCloseIrisAnimationFinished;
- (void)cameraShutterClicked:(id)fp8;
- (void)viewWillBeDisplayed;
- (void)viewWasDisplayed;
- (void)viewWillBeRemoved;
- (void)cropOverlayWasCancelled:(id)fp8;
- (void)cropOverlayWasOKed:(id)fp8;
- (void)_backgroundSavePhoto;
- (void)_savePhotoFinished:(id)fp8;
- (void)willStartGesture:(int)fp8 inView:(id)fp12 forEvent:(struct __GSEvent *)fp16;
- (void)tearDownIris;
- (void)primeStaticClosedIris;
- (void)showStaticClosedIris;
- (void)hideStaticClosedIris;
- (BOOL)irisIsClosed;
- (void)closeIris:(BOOL)fp8 didFinishSelector:(SEL)fp12;
- (void)openIrisWithDidFinishSelector:(SEL)fp8;
- (void)closeOpenIris;
- (void)openIrisAnimationFinished;
- (void)closeIrisAnimationFinished;
- (void)closeOpenIrisAnimationFinished;

@end
# 18 "test.c" 2
# 1 "TiVoHTTPServer.h" 1




# 1 "HttpDelegate.h" 1





@protocol HttpDelegate
-(BOOL) WriteData: (char*)data size:(int) size;
-(BOOL) WriteString: (char*)str;
-(BOOL) WriteLine: (char*)data;
-(void) ReadLine: (char*)buf size:(int)size;
-(void) SetStatus: (int)status;
-(NSString *)GetHeader: (NSString*) name;
@end
# 6 "TiVoHTTPServer.h" 2
# 1 "DVRMobilePrefs.h" 1





# 1 "Beacon.h" 1






@class DVRMobilePrefs;

@interface TivoDevice: NSObject
{
@public
  NSString *address;
  NSString *swversion;
  NSString *identity;
  NSString *machine_name;
  NSString *platform;
  NSString *services;
  NSString *mak;
}
@end

@interface Beacon : NSObject
{
@public
  int UDPSock, TCPSock;

  NSMutableArray *services;
  DVRMobilePrefs *prefs;
  BOOL stopFlag;
  NSTimer *timer;
}

- (void)setDVRMobilePrefs: (DVRMobilePrefs*)p;
- (void)start;
- (void)stop;
- (void)listen;
- (BOOL)SendBeacon;
- (TivoDevice*)Scan:(int)timeout;
- (void)addService: (NSString*)service;
- (TivoDevice*)GetTivoDevice: (NSString*)address;
@end
# 7 "DVRMobilePrefs.h" 2

@class TivoDevice;


@interface DVRMobilePrefs : NSObject
{
  NSString *GUID;
  NSString *Name;
  NSString *NetworkBroadcast;
  NSString *NetworkPort;
  NSString *PhotosContainer;
  NSString *PhotosJPEGQuality;
  NSString *MusicContainer;
  NSString *VideoContainer;
  NSMutableArray *tivos;
  BOOL autoStart;

  BOOL dirty;
}

-(void)LoadPreferences;
-(void)SavePreferences;
-(NSMutableArray*)GetTivos;
-(NSString *)GetGUID;
-(NSString *)GetName;
-(void)SetName:(NSString*)n;
-(NSString *)GetNetworkBroadcast;
-(void)SetNetworkBroadcast:(NSString*)n;
-(NSString *)GetNetworkPort;
-(void)SetNetworkPort:(NSString*)n;
-(NSString *)GetPhotosJPEGQuality;
-(void)SetPhotosJPEGQuality:(NSString*)n;
-(NSString*)GetPhotosJPEGQuality;
-(void)SetPhotosContainer:(NSString*)c;
-(NSString*)GetPhotosContainer;
-(void)SetMusicContainer:(NSString*)c;
-(NSString*)GetMusicContainer;
-(void)SetVideoContainer:(NSString*)c;
-(NSString*)GetVideoContainer;
-(void)SetAutoStart:(BOOL)b;
-(BOOL)GetAutoStart;
-(void)AddTivoDevice:(TivoDevice*)tivo;
-(void)SetDirty:(BOOL)dirty;
-(void)DefaultSettings;
@end;
# 7 "TiVoHTTPServer.h" 2

# 1 "Photos.h" 1




# 1 "Cache.h" 1




@interface CacheEntry : NSObject
{
@public
  id value;
  NSString *lastAccess;
}
@end

@interface Cache : NSObject
{
}
-(void)initialize;
-(id)getEntry: (id)key;
-(void)addEntry: (id)key withValue:(id)value;
@end
# 6 "Photos.h" 2


@interface FileEntry : NSObject
{
@public
  NSString *name;
  NSString *path;
  int type;
  NSString *createDate;
  NSString *modifyDate;
  NSMutableArray *children;
}
@end

@interface Photos : NSObject
{
  BOOL stopFlag;
  id graphicsLock;
  Cache *resourceCache;
  float jpegQuality;
  NSMutableArray *fileEntries;
  NSMutableArray *allFileEntries;
  NSMutableArray *fileSystemEntries;
  NSMutableArray *allFileSystemEntries;
  NSMutableArray *photoLibEntries;

  NSString *ROOT_CONTAINER;
  NSString *_ROOT_CONTAINER;
  NSString *CAMERAROLL_PATH;
  NSString *_CAMERAROLL_PATH;
  NSString *PHOTOLIB_PATH;
  NSString *PHOTO_PATH;

}
-(void)setRootContainer:(NSString*)root;
-(void)setGraphicsLock: (id)lock;
-(void)setResourceCache: (Cache*)cache;
-(void)setJPEGQuality: (float)j;
-(void)LoadPhotoEntries;
-(void)QueryItem: (NSString*)url;
-(void)QueryContainer: (NSString*)symbolicPath withItemCount:(int)itemCount
         withAnchorItem:(NSString*)anchor withAnchorOffset:(int)anchorOffset
         recursive:(BOOL)recurse sortOrder:(NSString*)sortOrder
         randomSeed:(int)randomSeed randomStart:(NSString*)randomStart
         filter:(NSString*)filter httpDelegate:(id)delegate;
-(NSMutableArray*)ListPhotoAlbum: (NSString *)path;
-(BOOL)isPhotoFilePrefix:(NSString*)path;
-(void)SendFile: (NSString *)path width:(int)w height:(int)h rotation:(int)r httpDelegate:(id)delegate;
-(NSString*)TranslateSymbolicPath: (NSString*)symbolicPath;

@end
# 9 "TiVoHTTPServer.h" 2
# 1 "Music.h" 1







@interface MusicFileEntry: NSObject
{
@public
  NSString *name;
  NSString *title;
  NSString *album;
  NSString *artist;
  NSString *year;
  NSString *genre;
  NSString *path;
  int duration;
  NSMutableArray *trackEntries;
  NSMutableArray *albumEntries;
  NSMutableArray *children;
  int type;
}
@end

@interface Music: NSObject
{
  BOOL stopFlag;
  Cache *resourceCache;
  NSMutableArray *trackEntries, *albumEntries, *artistEntries;
  NSMutableArray *downloadEntries, *allDownloadEntries;
  NSMutableArray *playlistsEntries;

  NSString *ROOT_CONTAINER;
  NSString *_ROOT_CONTAINER;
  NSString *_DOWNLOADS;
  NSString *DOWNLOADS;
  NSString *_PLAYLISTS;
  NSString *PLAYLISTS;
  NSString *DOWNLOADS_PATH;
  NSString *PLAYLISTS_PATH;
  NSString *ITUNES_PATH;
  NSString *ITUNES_ALBUM_PATH;
  NSString *ITUNES_ARTIST_PATH;
  NSString *ITUNES_SONG_PATH;
  NSString *ITUNES_PLAYLIST_PATH;
  NSString *ITUNES_FS_PATH;
  NSString *PWNPLAYER_PATH;
}
-(void)setRootContainer:(NSString*)root;
-(void)setResourceCache: (Cache*)cache;
-(void)LoadMusicEntries;
-(void)QueryItem: (NSString*)url;
-(void)QueryContainer: (NSString*)symbolicPath itemCount:(int)itemCount
         anchorItem:(NSString*)anchor anchorOffset:(int)anchorOffset
         recursive:(BOOL)recurse sortOrder:(NSString*)sortOrder
         randomSeed:(int)randomSeed randomStart:(NSString*)randomStart
         filter:(NSString*)filter httpDelegate:(id)delegate;
-(BOOL)isMusicFilePrefix:(NSString*)path;
-(void)SendFile: (NSString *)path httpDelegate:(id)delegate;
-(NSString*)TranslateSymbolicPath: (NSString*)symbolicPath;
-(NSMutableArray*)ListDownloads: (NSString*)path recursive:(BOOL)recurse;
@end
# 10 "TiVoHTTPServer.h" 2
# 1 "Video.h" 1







@interface VideoFileEntry: NSObject
{
@public
  NSString *name;
  NSString *title;
  NSString *year;
  NSString *path;
  int duration;
  NSMutableArray *children;
  int type;
}
@end

@interface Video: NSObject
{
  BOOL stopFlag;
  Cache *resourceCache;
  NSMutableArray *podcastEntries;
  NSMutableArray *downloadEntries, *allDownloadEntries;

  NSString *ROOT_CONTAINER;
  NSString *_ROOT_CONTAINER;
  NSString *PODCASTS_PATH, *MXTUBE_PATH, *CYCORDER_PATH, *DOWNLOADS_PATH;
  NSString *PODCASTS, *MXTUBE, *CYCORDER, *DOWNLOADS;
  NSString *_PODCASTS, *_MXTUBE, *_CYCORDER, *_DOWNLOADS;
}
-(void)setRootContainer:(NSString*)root;
-(void)setResourceCache: (Cache*)cache;
-(void)LoadVideoEntries;
-(void)QueryItem: (NSString*)url;
-(void)QueryContainer: (NSString*)symbolicPath itemCount:(int)itemCount
         anchorItem:(NSString*)anchor anchorOffset:(int)anchorOffset
         recursive:(BOOL)recurse sortOrder:(NSString*)sortOrder
         randomSeed:(int)randomSeed randomStart:(NSString*)randomStart
         filter:(NSString*)filter httpDelegate:(id)delegate;
-(BOOL)isVideoFilePrefix:(NSString*)path;
-(void)SendFile: (NSString *)path httpDelegate:(id)delegate;
-(NSString*)TranslateSymbolicPath: (NSString*)symbolicPath;
-(NSMutableArray*)ListDownloads: (NSString*)path recursive:(BOOL)recurse;
@end
# 11 "TiVoHTTPServer.h" 2

@interface TiVoHTTPServer: NSObject
{
  Beacon *beacon;
  int sock, clientSock;
  id graphicsLock;
  Cache *resourceCache;
@public
  BOOL stopFlag, isStopped, isStarted, isRunning;
  DVRMobilePrefs *prefs;
  NSMutableArray *tivos;
  Photos *photos;
  Music *music;
  Video *video;
}
-(void)initialize;
-(void)setBeacon: (Beacon*)beacon;
-(void)ServeForever;
-(void)stop;
-(BOOL)isStarted;
-(BOOL)isRunning;
-(BOOL)isStopped;
-(void)setDVRMobilePrefs: (DVRMobilePrefs*)p;
@end

@interface TiVoHTTPHandler: NSObject <HttpDelegate>
{
  BOOL stopFlag;
  int clientSock;
  id graphicsLock;
  Cache *resourceCache;
  Beacon *beacon;
  NSString *cmd;
  NSString *uri;
  NSString *version;
  NSString *address;
  NSMutableArray *headerNames;
  NSMutableArray *headerValues;
  NSMutableArray *tivos;
  DVRMobilePrefs *prefs;
  Photos *photos;
  Music *music;
  Video *video;
}
-(void)setDVRMobilePrefs: (DVRMobilePrefs*)p;
-(void)initialize;
-(void)ReadLine: (char*)buf size:(int)size;
-(void)ProcessRequest;
-(void)ParseRequest;
-(void)setBeacon: (Beacon*)beacon;
-(void)setClientSock: (int)clientSock;
-(void)setGraphicsLock: (id)lock;
-(void)setResourceCache: (Cache *)cache;
-(void)setDVRMobilePrefs: (DVRMobilePrefs*)p;
-(void)setPhotos: (Photos*)p;
-(void)setMusic: (Music*)m;
-(void)setVideo: (Video*)v;
-(void)AddTivoDevice:(TivoDevice*)tivo;
-(NSString*)GetTivoName:(NSString*)identifier;
-(void)doGET;
-(void)QueryContainer: (NSArray*)attrs;
-(void)QueryItem: (NSArray*)attrs;
-(void)RootContainer;
@end
# 19 "test.c" 2
# 1 "HttpClient.h" 1




# 1 "/usr/include/openssl/ssl.h" 1 3 4
# 173 "/usr/include/openssl/ssl.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 174 "/usr/include/openssl/ssl.h" 2 3 4


# 1 "/usr/include/openssl/comp.h" 1 3 4




# 1 "/usr/include/openssl/crypto.h" 1 3 4
# 122 "/usr/include/openssl/crypto.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 123 "/usr/include/openssl/crypto.h" 2 3 4





# 1 "/usr/include/openssl/stack.h" 1 3 4
# 66 "/usr/include/openssl/stack.h" 3 4
typedef struct stack_st
 {
 int num;
 char **data;
 int sorted;

 int num_alloc;
 int (*comp)(const char * const *, const char * const *);
 } STACK;




int sk_num(const STACK *);
char *sk_value(const STACK *, int);

char *sk_set(STACK *, int, char *);

STACK *sk_new(int (*cmp)(const char * const *, const char * const *));
STACK *sk_new_null(void);
void sk_free(STACK *);
void sk_pop_free(STACK *st, void (*func)(void *));
int sk_insert(STACK *sk,char *data,int where);
char *sk_delete(STACK *st,int loc);
char *sk_delete_ptr(STACK *st, char *p);
int sk_find(STACK *st,char *data);
int sk_find_ex(STACK *st,char *data);
int sk_push(STACK *st,char *data);
int sk_unshift(STACK *st,char *data);
char *sk_shift(STACK *st);
char *sk_pop(STACK *st);
void sk_zero(STACK *st);
int (*sk_set_cmp_func(STACK *sk, int (*c)(const char * const *,
   const char * const *)))
   (const char * const *, const char * const *);
STACK *sk_dup(STACK *st);
void sk_sort(STACK *st);
int sk_is_sorted(const STACK *st);
# 129 "/usr/include/openssl/crypto.h" 2 3 4
# 1 "/usr/include/openssl/safestack.h" 1 3 4
# 130 "/usr/include/openssl/crypto.h" 2 3 4
# 1 "/usr/include/openssl/opensslv.h" 1 3 4
# 131 "/usr/include/openssl/crypto.h" 2 3 4
# 1 "/usr/include/openssl/ossl_typ.h" 1 3 4
# 58 "/usr/include/openssl/ossl_typ.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 59 "/usr/include/openssl/ossl_typ.h" 2 3 4
# 79 "/usr/include/openssl/ossl_typ.h" 3 4
typedef struct asn1_string_st ASN1_INTEGER;
typedef struct asn1_string_st ASN1_ENUMERATED;
typedef struct asn1_string_st ASN1_BIT_STRING;
typedef struct asn1_string_st ASN1_OCTET_STRING;
typedef struct asn1_string_st ASN1_PRINTABLESTRING;
typedef struct asn1_string_st ASN1_T61STRING;
typedef struct asn1_string_st ASN1_IA5STRING;
typedef struct asn1_string_st ASN1_GENERALSTRING;
typedef struct asn1_string_st ASN1_UNIVERSALSTRING;
typedef struct asn1_string_st ASN1_BMPSTRING;
typedef struct asn1_string_st ASN1_UTCTIME;
typedef struct asn1_string_st ASN1_TIME;
typedef struct asn1_string_st ASN1_GENERALIZEDTIME;
typedef struct asn1_string_st ASN1_VISIBLESTRING;
typedef struct asn1_string_st ASN1_UTF8STRING;
typedef int ASN1_BOOLEAN;
typedef int ASN1_NULL;
# 110 "/usr/include/openssl/ossl_typ.h" 3 4
typedef struct bignum_st BIGNUM;
typedef struct bignum_ctx BN_CTX;
typedef struct bn_blinding_st BN_BLINDING;
typedef struct bn_mont_ctx_st BN_MONT_CTX;
typedef struct bn_recp_ctx_st BN_RECP_CTX;
typedef struct bn_gencb_st BN_GENCB;

typedef struct buf_mem_st BUF_MEM;

typedef struct evp_cipher_st EVP_CIPHER;
typedef struct evp_cipher_ctx_st EVP_CIPHER_CTX;
typedef struct env_md_st EVP_MD;
typedef struct env_md_ctx_st EVP_MD_CTX;
typedef struct evp_pkey_st EVP_PKEY;

typedef struct dh_st DH;
typedef struct dh_method DH_METHOD;

typedef struct dsa_st DSA;
typedef struct dsa_method DSA_METHOD;

typedef struct rsa_st RSA;
typedef struct rsa_meth_st RSA_METHOD;

typedef struct rand_meth_st RAND_METHOD;

typedef struct ecdh_method ECDH_METHOD;
typedef struct ecdsa_method ECDSA_METHOD;

typedef struct x509_st X509;
typedef struct X509_algor_st X509_ALGOR;
typedef struct X509_crl_st X509_CRL;
typedef struct X509_name_st X509_NAME;
typedef struct x509_store_st X509_STORE;
typedef struct x509_store_ctx_st X509_STORE_CTX;
typedef struct ssl_st SSL;
typedef struct ssl_ctx_st SSL_CTX;

typedef struct v3_ext_ctx X509V3_CTX;
typedef struct conf_st CONF;

typedef struct store_st STORE;
typedef struct store_method_st STORE_METHOD;

typedef struct ui_st UI;
typedef struct ui_method_st UI_METHOD;

typedef struct st_ERR_FNS ERR_FNS;

typedef struct engine_st ENGINE;

typedef struct X509_POLICY_NODE_st X509_POLICY_NODE;
typedef struct X509_POLICY_LEVEL_st X509_POLICY_LEVEL;
typedef struct X509_POLICY_TREE_st X509_POLICY_TREE;
typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE;





typedef struct crypto_ex_data_st CRYPTO_EX_DATA;

typedef int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
     int idx, long argl, void *argp);
typedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
     int idx, long argl, void *argp);
typedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d,
     int idx, long argl, void *argp);

typedef struct ocsp_req_ctx_st OCSP_REQ_CTX;
typedef struct ocsp_response_st OCSP_RESPONSE;
typedef struct ocsp_responder_id_st OCSP_RESPID;
# 132 "/usr/include/openssl/crypto.h" 2 3 4







# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 58 "/usr/include/openssl/symhacks.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 59 "/usr/include/openssl/symhacks.h" 2 3 4
# 140 "/usr/include/openssl/crypto.h" 2 3 4
# 171 "/usr/include/openssl/crypto.h" 3 4
typedef struct openssl_item_st
 {
 int code;
 void *value;
 size_t value_size;
 size_t *value_length;
 } OPENSSL_ITEM;
# 260 "/usr/include/openssl/crypto.h" 3 4
typedef struct
 {
 int references;
 struct CRYPTO_dynlock_value *data;
 } CRYPTO_dynlock;
# 287 "/usr/include/openssl/crypto.h" 3 4
typedef struct bio_st BIO_dummy;

struct crypto_ex_data_st
 {
 STACK *sk;
 int dummy;
 };




typedef struct crypto_ex_data_func_st
 {
 long argl;
 void *argp;
 CRYPTO_EX_new *new_func;
 CRYPTO_EX_free *free_func;
 CRYPTO_EX_dup *dup_func;
 } CRYPTO_EX_DATA_FUNCS;


# 350 "/usr/include/openssl/crypto.h" 3 4
void CRYPTO_malloc_debug_init(void);

int CRYPTO_mem_ctrl(int mode);
int CRYPTO_is_mem_check_on(void);
# 380 "/usr/include/openssl/crypto.h" 3 4
const char *SSLeay_version(int type);
unsigned long SSLeay(void);

int OPENSSL_issetugid(void);


typedef struct st_CRYPTO_EX_DATA_IMPL CRYPTO_EX_DATA_IMPL;

const CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation(void);

int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL *i);

int CRYPTO_ex_data_new_class(void);

int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
  CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
  CRYPTO_EX_free *free_func);


int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
  CRYPTO_EX_DATA *from);
void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);


int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad,int idx);


void CRYPTO_cleanup_all_ex_data(void);

int CRYPTO_get_new_lockid(char *name);

int CRYPTO_num_locks(void);
void CRYPTO_lock(int mode, int type,const char *file,int line);
void CRYPTO_set_locking_callback(void (*func)(int mode,int type,
           const char *file,int line));
void (*CRYPTO_get_locking_callback(void))(int mode,int type,const char *file,
  int line);
void CRYPTO_set_add_lock_callback(int (*func)(int *num,int mount,int type,
           const char *file, int line));
int (*CRYPTO_get_add_lock_callback(void))(int *num,int mount,int type,
       const char *file,int line);
void CRYPTO_set_id_callback(unsigned long (*func)(void));
unsigned long (*CRYPTO_get_id_callback(void))(void);
unsigned long CRYPTO_thread_id(void);
const char *CRYPTO_get_lock_name(int type);
int CRYPTO_add_lock(int *pointer,int amount,int type, const char *file,
      int line);

void int_CRYPTO_set_do_dynlock_callback(
 void (*do_dynlock_cb)(int mode, int type, const char *file, int line));

int CRYPTO_get_new_dynlockid(void);
void CRYPTO_destroy_dynlockid(int i);
struct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i);
void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(*dyn_create_function)(const char *file, int line));
void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line));
void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line));
struct CRYPTO_dynlock_value *(*CRYPTO_get_dynlock_create_callback(void))(const char *file,int line);
void (*CRYPTO_get_dynlock_lock_callback(void))(int mode, struct CRYPTO_dynlock_value *l, const char *file,int line);
void (*CRYPTO_get_dynlock_destroy_callback(void))(struct CRYPTO_dynlock_value *l, const char *file,int line);



int CRYPTO_set_mem_functions(void *(*m)(size_t),void *(*r)(void *,size_t), void (*f)(void *));
int CRYPTO_set_locked_mem_functions(void *(*m)(size_t), void (*free_func)(void *));
int CRYPTO_set_mem_ex_functions(void *(*m)(size_t,const char *,int),
                                void *(*r)(void *,size_t,const char *,int),
                                void (*f)(void *));
int CRYPTO_set_locked_mem_ex_functions(void *(*m)(size_t,const char *,int),
                                       void (*free_func)(void *));
int CRYPTO_set_mem_debug_functions(void (*m)(void *,int,const char *,int,int),
       void (*r)(void *,void *,int,const char *,int,int),
       void (*f)(void *,int),
       void (*so)(long),
       long (*go)(void));
void CRYPTO_set_mem_info_functions(
 int (*push_info_fn)(const char *info, const char *file, int line),
 int (*pop_info_fn)(void),
 int (*remove_all_info_fn)(void));
void CRYPTO_get_mem_functions(void *(**m)(size_t),void *(**r)(void *, size_t), void (**f)(void *));
void CRYPTO_get_locked_mem_functions(void *(**m)(size_t), void (**f)(void *));
void CRYPTO_get_mem_ex_functions(void *(**m)(size_t,const char *,int),
                                 void *(**r)(void *, size_t,const char *,int),
                                 void (**f)(void *));
void CRYPTO_get_locked_mem_ex_functions(void *(**m)(size_t,const char *,int),
                                        void (**f)(void *));
void CRYPTO_get_mem_debug_functions(void (**m)(void *,int,const char *,int,int),
        void (**r)(void *,void *,int,const char *,int,int),
        void (**f)(void *,int),
        void (**so)(long),
        long (**go)(void));

void *CRYPTO_malloc_locked(int num, const char *file, int line);
void CRYPTO_free_locked(void *);
void *CRYPTO_malloc(int num, const char *file, int line);
char *CRYPTO_strdup(const char *str, const char *file, int line);
void CRYPTO_free(void *);
void *CRYPTO_realloc(void *addr,int num, const char *file, int line);
void *CRYPTO_realloc_clean(void *addr,int old_num,int num,const char *file,
      int line);
void *CRYPTO_remalloc(void *addr,int num, const char *file, int line);

void OPENSSL_cleanse(void *ptr, size_t len);

void CRYPTO_set_mem_debug_options(long bits);
long CRYPTO_get_mem_debug_options(void);



int CRYPTO_push_info_(const char *info, const char *file, int line);
int CRYPTO_pop_info(void);
int CRYPTO_remove_all_info(void);
# 503 "/usr/include/openssl/crypto.h" 3 4
void CRYPTO_dbg_malloc(void *addr,int num,const char *file,int line,int before_p);
void CRYPTO_dbg_realloc(void *addr1,void *addr2,int num,const char *file,int line,int before_p);
void CRYPTO_dbg_free(void *addr,int before_p);
# 514 "/usr/include/openssl/crypto.h" 3 4
void CRYPTO_dbg_set_options(long bits);
long CRYPTO_dbg_get_options(void);

int CRYPTO_dbg_push_info(const char *info, const char *file, int line);
int CRYPTO_dbg_pop_info(void);
int CRYPTO_dbg_remove_all_info(void);


void CRYPTO_mem_leaks_fp(FILE *);

void CRYPTO_mem_leaks(struct bio_st *bio);

typedef void *CRYPTO_MEM_LEAK_CB(unsigned long, const char *, int, int, void *);
void CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb);


void OpenSSLDie(const char *file,int line,const char *assertion);


unsigned long *OPENSSL_ia32cap_loc(void);

int OPENSSL_isservice(void);
# 595 "/usr/include/openssl/crypto.h" 3 4
void ERR_load_CRYPTO_strings(void);


void OPENSSL_init(void);
# 6 "/usr/include/openssl/comp.h" 2 3 4





typedef struct comp_ctx_st COMP_CTX;

typedef struct comp_method_st
 {
 int type;
 const char *name;
 int (*init)(COMP_CTX *ctx);
 void (*finish)(COMP_CTX *ctx);
 int (*compress)(COMP_CTX *ctx,
   unsigned char *out, unsigned int olen,
   unsigned char *in, unsigned int ilen);
 int (*expand)(COMP_CTX *ctx,
        unsigned char *out, unsigned int olen,
        unsigned char *in, unsigned int ilen);

 long (*ctrl)(void);
 long (*callback_ctrl)(void);
 } COMP_METHOD;

struct comp_ctx_st
 {
 COMP_METHOD *meth;
 unsigned long compress_in;
 unsigned long compress_out;
 unsigned long expand_in;
 unsigned long expand_out;

 CRYPTO_EX_DATA ex_data;
 };


COMP_CTX *COMP_CTX_new(COMP_METHOD *meth);
void COMP_CTX_free(COMP_CTX *ctx);
int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
 unsigned char *in, int ilen);
int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
 unsigned char *in, int ilen);
COMP_METHOD *COMP_rle(void );
COMP_METHOD *COMP_zlib(void );
void COMP_zlib_cleanup(void);
# 62 "/usr/include/openssl/comp.h" 3 4
void ERR_load_COMP_strings(void);
# 177 "/usr/include/openssl/ssl.h" 2 3 4


# 1 "/usr/include/openssl/bio.h" 1 3 4
# 62 "/usr/include/openssl/bio.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 63 "/usr/include/openssl/bio.h" 2 3 4
# 200 "/usr/include/openssl/bio.h" 3 4
typedef struct bio_st BIO;

void BIO_set_flags(BIO *b, int flags);
int BIO_test_flags(const BIO *b, int flags);
void BIO_clear_flags(BIO *b, int flags);
# 254 "/usr/include/openssl/bio.h" 3 4
long (*BIO_get_callback(const BIO *b)) (struct bio_st *,int,const char *,int, long,long);
void BIO_set_callback(BIO *b,
 long (*callback)(struct bio_st *,int,const char *,int, long,long));
char *BIO_get_callback_arg(const BIO *b);
void BIO_set_callback_arg(BIO *b, char *arg);

const char * BIO_method_name(const BIO *b);
int BIO_method_type(const BIO *b);

typedef void bio_info_cb(struct bio_st *, int, const char *, int, long, long);


typedef struct bio_method_st
 {
 int type;
 const char *name;
 int (*bwrite)(BIO *, const char *, int);
 int (*bread)(BIO *, char *, int);
 int (*bputs)(BIO *, const char *);
 int (*bgets)(BIO *, char *, int);
 long (*ctrl)(BIO *, int, long, void *);
 int (*create)(BIO *);
 int (*destroy)(BIO *);
        long (*callback_ctrl)(BIO *, int, bio_info_cb *);
 } BIO_METHOD;
# 295 "/usr/include/openssl/bio.h" 3 4
struct bio_st
 {
 BIO_METHOD *method;

 long (*callback)(struct bio_st *,int,const char *,int, long,long);
 char *cb_arg;

 int init;
 int shutdown;
 int flags;
 int retry_reason;
 int num;
 void *ptr;
 struct bio_st *next_bio;
 struct bio_st *prev_bio;
 int references;
 unsigned long num_read;
 unsigned long num_write;

 CRYPTO_EX_DATA ex_data;
 };



typedef struct bio_f_buffer_ctx_struct
 {

 int ibuf_size;
 int obuf_size;

 char *ibuf;
 int ibuf_len;
 int ibuf_off;

 char *obuf;
 int obuf_len;
 int obuf_off;
 } BIO_F_BUFFER_CTX;
# 512 "/usr/include/openssl/bio.h" 3 4
size_t BIO_ctrl_pending(BIO *b);
size_t BIO_ctrl_wpending(BIO *b);
# 531 "/usr/include/openssl/bio.h" 3 4
size_t BIO_ctrl_get_write_guarantee(BIO *b);
size_t BIO_ctrl_get_read_request(BIO *b);
int BIO_ctrl_reset_read_request(BIO *b);
# 550 "/usr/include/openssl/bio.h" 3 4
int BIO_set_ex_data(BIO *bio,int idx,void *data);
void *BIO_get_ex_data(BIO *bio,int idx);
int BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
unsigned long BIO_number_read(BIO *bio);
unsigned long BIO_number_written(BIO *bio);
# 566 "/usr/include/openssl/bio.h" 3 4
BIO_METHOD *BIO_s_file(void );
BIO *BIO_new_file(const char *filename, const char *mode);
BIO *BIO_new_fp(FILE *stream, int close_flag);





BIO * BIO_new(BIO_METHOD *type);
int BIO_set(BIO *a,BIO_METHOD *type);
int BIO_free(BIO *a);
void BIO_vfree(BIO *a);
int BIO_read(BIO *b, void *data, int len);
int BIO_gets(BIO *bp,char *buf, int size);
int BIO_write(BIO *b, const void *data, int len);
int BIO_puts(BIO *bp,const char *buf);
int BIO_indent(BIO *b,int indent,int max);
long BIO_ctrl(BIO *bp,int cmd,long larg,void *parg);
long BIO_callback_ctrl(BIO *b, int cmd, void (*fp)(struct bio_st *, int, const char *, int, long, long));
char * BIO_ptr_ctrl(BIO *bp,int cmd,long larg);
long BIO_int_ctrl(BIO *bp,int cmd,long larg,int iarg);
BIO * BIO_push(BIO *b,BIO *append);
BIO * BIO_pop(BIO *b);
void BIO_free_all(BIO *a);
BIO * BIO_find_type(BIO *b,int bio_type);
BIO * BIO_next(BIO *b);
BIO * BIO_get_retry_BIO(BIO *bio, int *reason);
int BIO_get_retry_reason(BIO *bio);
BIO * BIO_dup_chain(BIO *in);

int BIO_nread0(BIO *bio, char **buf);
int BIO_nread(BIO *bio, char **buf, int num);
int BIO_nwrite0(BIO *bio, char **buf);
int BIO_nwrite(BIO *bio, char **buf, int num);


long BIO_debug_callback(BIO *bio,int cmd,const char *argp,int argi,
 long argl,long ret);





BIO_METHOD *BIO_s_mem(void);
BIO *BIO_new_mem_buf(void *buf, int len);
BIO_METHOD *BIO_s_socket(void);
BIO_METHOD *BIO_s_connect(void);
BIO_METHOD *BIO_s_accept(void);
BIO_METHOD *BIO_s_fd(void);

BIO_METHOD *BIO_s_log(void);

BIO_METHOD *BIO_s_bio(void);
BIO_METHOD *BIO_s_null(void);
BIO_METHOD *BIO_f_null(void);
BIO_METHOD *BIO_f_buffer(void);



BIO_METHOD *BIO_f_nbio_test(void);

BIO_METHOD *BIO_s_datagram(void);




int BIO_sock_should_retry(int i);
int BIO_sock_non_fatal_error(int error);
int BIO_dgram_non_fatal_error(int error);

int BIO_fd_should_retry(int i);
int BIO_fd_non_fatal_error(int error);
int BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u),
  void *u, const char *s, int len);
int BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u),
         void *u, const char *s, int len, int indent);
int BIO_dump(BIO *b,const char *bytes,int len);
int BIO_dump_indent(BIO *b,const char *bytes,int len,int indent);

int BIO_dump_fp(FILE *fp, const char *s, int len);
int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);

struct hostent *BIO_gethostbyname(const char *name);
# 657 "/usr/include/openssl/bio.h" 3 4
int BIO_sock_error(int sock);
int BIO_socket_ioctl(int fd, long type, void *arg);
int BIO_socket_nbio(int fd,int mode);
int BIO_get_port(const char *str, unsigned short *port_ptr);
int BIO_get_host_ip(const char *str, unsigned char *ip);
int BIO_get_accept_socket(char *host_port,int mode);
int BIO_accept(int sock,char **ip_port);
int BIO_sock_init(void );
void BIO_sock_cleanup(void);
int BIO_set_tcp_ndelay(int sock,int turn_on);

BIO *BIO_new_socket(int sock, int close_flag);
BIO *BIO_new_dgram(int fd, int close_flag);
BIO *BIO_new_fd(int fd, int close_flag);
BIO *BIO_new_connect(char *host_port);
BIO *BIO_new_accept(char *host_port);

int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
 BIO **bio2, size_t writebuf2);





void BIO_copy_next_retry(BIO *b);
# 690 "/usr/include/openssl/bio.h" 3 4
int BIO_printf(BIO *bio, const char *format, ...)
 __attribute__((__format__(__printf__,2,3)));
int BIO_vprintf(BIO *bio, const char *format, va_list args)
 __attribute__((__format__(__printf__,2,0)));
int BIO_snprintf(char *buf, size_t n, const char *format, ...)
 __attribute__((__format__(__printf__,3,4)));
int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
 __attribute__((__format__(__printf__,3,0)));






void ERR_load_BIO_strings(void);
# 180 "/usr/include/openssl/ssl.h" 2 3 4



# 1 "/usr/include/openssl/x509.h" 1 3 4
# 67 "/usr/include/openssl/x509.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 68 "/usr/include/openssl/x509.h" 2 3 4
# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 69 "/usr/include/openssl/x509.h" 2 3 4

# 1 "/usr/include/openssl/buffer.h" 1 3 4
# 68 "/usr/include/openssl/buffer.h" 3 4
# 1 "/var/include/stddef.h" 1 3 4
# 69 "/usr/include/openssl/buffer.h" 2 3 4
# 77 "/usr/include/openssl/buffer.h" 3 4
struct buf_mem_st
 {
 int length;
 char *data;
 int max;
 };

BUF_MEM *BUF_MEM_new(void);
void BUF_MEM_free(BUF_MEM *a);
int BUF_MEM_grow(BUF_MEM *str, int len);
int BUF_MEM_grow_clean(BUF_MEM *str, int len);
char * BUF_strdup(const char *str);
char * BUF_strndup(const char *str, size_t siz);
void * BUF_memdup(const void *data, size_t siz);


size_t BUF_strlcpy(char *dst,const char *src,size_t siz);
size_t BUF_strlcat(char *dst,const char *src,size_t siz);






void ERR_load_BUF_strings(void);
# 71 "/usr/include/openssl/x509.h" 2 3 4


# 1 "/usr/include/openssl/evp.h" 1 3 4
# 66 "/usr/include/openssl/evp.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 67 "/usr/include/openssl/evp.h" 2 3 4





# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 73 "/usr/include/openssl/evp.h" 2 3 4
# 98 "/usr/include/openssl/evp.h" 3 4
# 1 "/usr/include/openssl/objects.h" 1 3 4
# 65 "/usr/include/openssl/objects.h" 3 4
# 1 "/usr/include/openssl/obj_mac.h" 1 3 4
# 66 "/usr/include/openssl/objects.h" 2 3 4
# 960 "/usr/include/openssl/objects.h" 3 4
# 1 "/usr/include/openssl/asn1.h" 1 3 4
# 63 "/usr/include/openssl/asn1.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 64 "/usr/include/openssl/asn1.h" 2 3 4






# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 71 "/usr/include/openssl/asn1.h" 2 3 4



# 1 "/usr/include/openssl/bn.h" 1 3 4
# 75 "/usr/include/openssl/bn.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 76 "/usr/include/openssl/bn.h" 2 3 4
# 288 "/usr/include/openssl/bn.h" 3 4
struct bignum_st
 {
 unsigned long *d;
 int top;

 int dmax;
 int neg;
 int flags;
 };


struct bn_mont_ctx_st
 {
 int ri;
 BIGNUM RR;
 BIGNUM N;
 BIGNUM Ni;





 unsigned long n0;

 int flags;
 };




struct bn_recp_ctx_st
 {
 BIGNUM N;
 BIGNUM Nr;
 int num_bits;
 int shift;
 int flags;
 };


struct bn_gencb_st
 {
 unsigned int ver;
 void *arg;
 union
  {

  void (*cb_1)(int, int, void *);

  int (*cb_2)(int, int, BN_GENCB *);
  } cb;
 };

int BN_GENCB_call(BN_GENCB *cb, int a, int b);
# 399 "/usr/include/openssl/bn.h" 3 4
const BIGNUM *BN_value_one(void);
char * BN_options(void);
BN_CTX *BN_CTX_new(void);

void BN_CTX_init(BN_CTX *c);

void BN_CTX_free(BN_CTX *c);
void BN_CTX_start(BN_CTX *ctx);
BIGNUM *BN_CTX_get(BN_CTX *ctx);
void BN_CTX_end(BN_CTX *ctx);
int BN_rand(BIGNUM *rnd, int bits, int top,int bottom);
int BN_pseudo_rand(BIGNUM *rnd, int bits, int top,int bottom);
int BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
int BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
int BN_num_bits(const BIGNUM *a);
int BN_num_bits_word(unsigned long);
BIGNUM *BN_new(void);
void BN_init(BIGNUM *);
void BN_clear_free(BIGNUM *a);
BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b);
void BN_swap(BIGNUM *a, BIGNUM *b);
BIGNUM *BN_bin2bn(const unsigned char *s,int len,BIGNUM *ret);
int BN_bn2bin(const BIGNUM *a, unsigned char *to);
BIGNUM *BN_mpi2bn(const unsigned char *s,int len,BIGNUM *ret);
int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
int BN_sqr(BIGNUM *r, const BIGNUM *a,BN_CTX *ctx);




void BN_set_negative(BIGNUM *b, int n);






int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
 BN_CTX *ctx);

int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const BIGNUM *m, BN_CTX *ctx);
int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m, BN_CTX *ctx);
int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);

unsigned long BN_mod_word(const BIGNUM *a, unsigned long w);
unsigned long BN_div_word(BIGNUM *a, unsigned long w);
int BN_mul_word(BIGNUM *a, unsigned long w);
int BN_add_word(BIGNUM *a, unsigned long w);
int BN_sub_word(BIGNUM *a, unsigned long w);
int BN_set_word(BIGNUM *a, unsigned long w);
unsigned long BN_get_word(const BIGNUM *a);

int BN_cmp(const BIGNUM *a, const BIGNUM *b);
void BN_free(BIGNUM *a);
int BN_is_bit_set(const BIGNUM *a, int n);
int BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
int BN_lshift1(BIGNUM *r, const BIGNUM *a);
int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,BN_CTX *ctx);

int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 const BIGNUM *m,BN_CTX *ctx);
int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
 const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
int BN_mod_exp_mont_word(BIGNUM *r, unsigned long a, const BIGNUM *p,
 const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,
 const BIGNUM *a2, const BIGNUM *p2,const BIGNUM *m,
 BN_CTX *ctx,BN_MONT_CTX *m_ctx);
int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 const BIGNUM *m,BN_CTX *ctx);

int BN_mask_bits(BIGNUM *a,int n);

int BN_print_fp(FILE *fp, const BIGNUM *a);


int BN_print(BIO *fp, const BIGNUM *a);



int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
int BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
int BN_rshift1(BIGNUM *r, const BIGNUM *a);
void BN_clear(BIGNUM *a);
BIGNUM *BN_dup(const BIGNUM *a);
int BN_ucmp(const BIGNUM *a, const BIGNUM *b);
int BN_set_bit(BIGNUM *a, int n);
int BN_clear_bit(BIGNUM *a, int n);
char * BN_bn2hex(const BIGNUM *a);
char * BN_bn2dec(const BIGNUM *a);
int BN_hex2bn(BIGNUM **a, const char *str);
int BN_dec2bn(BIGNUM **a, const char *str);
int BN_gcd(BIGNUM *r,const BIGNUM *a,const BIGNUM *b,BN_CTX *ctx);
int BN_kronecker(const BIGNUM *a,const BIGNUM *b,BN_CTX *ctx);
BIGNUM *BN_mod_inverse(BIGNUM *ret,
 const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);
BIGNUM *BN_mod_sqrt(BIGNUM *ret,
 const BIGNUM *a, const BIGNUM *n,BN_CTX *ctx);



BIGNUM *BN_generate_prime(BIGNUM *ret,int bits,int safe,
 const BIGNUM *add, const BIGNUM *rem,
 void (*callback)(int,int,void *),void *cb_arg);
int BN_is_prime(const BIGNUM *p,int nchecks,
 void (*callback)(int,int,void *),
 BN_CTX *ctx,void *cb_arg);
int BN_is_prime_fasttest(const BIGNUM *p,int nchecks,
 void (*callback)(int,int,void *),BN_CTX *ctx,void *cb_arg,
 int do_trial_division);



int BN_generate_prime_ex(BIGNUM *ret,int bits,int safe, const BIGNUM *add,
  const BIGNUM *rem, BN_GENCB *cb);
int BN_is_prime_ex(const BIGNUM *p,int nchecks, BN_CTX *ctx, BN_GENCB *cb);
int BN_is_prime_fasttest_ex(const BIGNUM *p,int nchecks, BN_CTX *ctx,
  int do_trial_division, BN_GENCB *cb);

int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);

int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
   const BIGNUM *Xp, const BIGNUM *Xp1, const BIGNUM *Xp2,
   const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
   BIGNUM *Xp1, BIGNUM *Xp2,
   const BIGNUM *Xp,
   const BIGNUM *e, BN_CTX *ctx,
   BN_GENCB *cb);

BN_MONT_CTX *BN_MONT_CTX_new(void );
void BN_MONT_CTX_init(BN_MONT_CTX *ctx);
int BN_mod_mul_montgomery(BIGNUM *r,const BIGNUM *a,const BIGNUM *b,
 BN_MONT_CTX *mont, BN_CTX *ctx);


int BN_from_montgomery(BIGNUM *r,const BIGNUM *a,
 BN_MONT_CTX *mont, BN_CTX *ctx);
void BN_MONT_CTX_free(BN_MONT_CTX *mont);
int BN_MONT_CTX_set(BN_MONT_CTX *mont,const BIGNUM *mod,BN_CTX *ctx);
BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to,BN_MONT_CTX *from);
BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, int lock,
     const BIGNUM *mod, BN_CTX *ctx);





BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
void BN_BLINDING_free(BN_BLINDING *b);
int BN_BLINDING_update(BN_BLINDING *b,BN_CTX *ctx);
int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *);
unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING *);
void BN_BLINDING_set_thread_id(BN_BLINDING *, unsigned long);
unsigned long BN_BLINDING_get_flags(const BN_BLINDING *);
void BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
 const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
 int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx),
 BN_MONT_CTX *m_ctx);


void BN_set_params(int mul,int high,int low,int mont);
int BN_get_params(int which);


void BN_RECP_CTX_init(BN_RECP_CTX *recp);
BN_RECP_CTX *BN_RECP_CTX_new(void);
void BN_RECP_CTX_free(BN_RECP_CTX *recp);
int BN_RECP_CTX_set(BN_RECP_CTX *recp,const BIGNUM *rdiv,BN_CTX *ctx);
int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
 BN_RECP_CTX *recp,BN_CTX *ctx);
int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 const BIGNUM *m, BN_CTX *ctx);
int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
 BN_RECP_CTX *recp, BN_CTX *ctx);
# 605 "/usr/include/openssl/bn.h" 3 4
int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);

int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const BIGNUM *p, BN_CTX *ctx);
int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 BN_CTX *ctx);
int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p,
 BN_CTX *ctx);
int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const BIGNUM *p, BN_CTX *ctx);
int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const BIGNUM *p, BN_CTX *ctx);
int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 BN_CTX *ctx);
int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
 BN_CTX *ctx);






int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[]);

int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const unsigned int p[], BN_CTX *ctx);
int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[],
 BN_CTX *ctx);
int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const unsigned int p[],
 BN_CTX *ctx);
int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const unsigned int p[], BN_CTX *ctx);
int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 const unsigned int p[], BN_CTX *ctx);
int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,
 const unsigned int p[], BN_CTX *ctx);
int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,
 const unsigned int p[], BN_CTX *ctx);
int BN_GF2m_poly2arr(const BIGNUM *a, unsigned int p[], int max);
int BN_GF2m_arr2poly(const unsigned int p[], BIGNUM *a);



int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);

const BIGNUM *BN_get0_nist_prime_192(void);
const BIGNUM *BN_get0_nist_prime_224(void);
const BIGNUM *BN_get0_nist_prime_256(void);
const BIGNUM *BN_get0_nist_prime_384(void);
const BIGNUM *BN_get0_nist_prime_521(void);






BIGNUM *bn_expand2(BIGNUM *a, int words);

BIGNUM *bn_dup_expand(const BIGNUM *a, int words);
# 762 "/usr/include/openssl/bn.h" 3 4
unsigned long bn_mul_add_words(unsigned long *rp, const unsigned long *ap, int num, unsigned long w);
unsigned long bn_mul_words(unsigned long *rp, const unsigned long *ap, int num, unsigned long w);
void bn_sqr_words(unsigned long *rp, const unsigned long *ap, int num);
unsigned long bn_div_words(unsigned long h, unsigned long l, unsigned long d);
unsigned long bn_add_words(unsigned long *rp, const unsigned long *ap, const unsigned long *bp,int num);
unsigned long bn_sub_words(unsigned long *rp, const unsigned long *ap, const unsigned long *bp,int num);


BIGNUM *get_rfc2409_prime_768(BIGNUM *bn);
BIGNUM *get_rfc2409_prime_1024(BIGNUM *bn);


BIGNUM *get_rfc3526_prime_1536(BIGNUM *bn);
BIGNUM *get_rfc3526_prime_2048(BIGNUM *bn);
BIGNUM *get_rfc3526_prime_3072(BIGNUM *bn);
BIGNUM *get_rfc3526_prime_4096(BIGNUM *bn);
BIGNUM *get_rfc3526_prime_6144(BIGNUM *bn);
BIGNUM *get_rfc3526_prime_8192(BIGNUM *bn);

int BN_bntest_rand(BIGNUM *rnd, int bits, int top,int bottom);





void ERR_load_BN_strings(void);
# 75 "/usr/include/openssl/asn1.h" 2 3 4
# 165 "/usr/include/openssl/asn1.h" 3 4
struct X509_algor_st;

# 175 "/usr/include/openssl/asn1.h" 3 4
typedef struct asn1_ctx_st
 {
 unsigned char *p;
 int eos;
 int error;
 int inf;
 int tag;
 int xclass;
 long slen;
 unsigned char *max;
 unsigned char *q;
 unsigned char **pp;
 int line;
 } ASN1_CTX;

typedef struct asn1_const_ctx_st
 {
 const unsigned char *p;
 int eos;
 int error;
 int inf;
 int tag;
 int xclass;
 long slen;
 const unsigned char *max;
 const unsigned char *q;
 const unsigned char **pp;
 int line;
 } ASN1_const_CTX;







typedef struct asn1_object_st
 {
 const char *sn,*ln;
 int nid;
 int length;
 unsigned char *data;
 int flags;
 } ASN1_OBJECT;
# 234 "/usr/include/openssl/asn1.h" 3 4
typedef struct asn1_string_st
 {
 int length;
 int type;
 unsigned char *data;




 long flags;
 } ASN1_STRING;






typedef struct ASN1_ENCODING_st
 {
 unsigned char *enc;
 long len;
 int modified;
 } ASN1_ENCODING;
# 267 "/usr/include/openssl/asn1.h" 3 4
typedef struct asn1_string_table_st {
 int nid;
 long minsize;
 long maxsize;
 unsigned long mask;
 unsigned long flags;
} ASN1_STRING_TABLE;


# 291 "/usr/include/openssl/asn1.h" 3 4
typedef struct ASN1_TEMPLATE_st ASN1_TEMPLATE;
typedef struct ASN1_ITEM_st ASN1_ITEM;
typedef struct ASN1_TLC_st ASN1_TLC;

typedef struct ASN1_VALUE_st ASN1_VALUE;
# 352 "/usr/include/openssl/asn1.h" 3 4
typedef void *d2i_of_void(void **,const unsigned char **,long); typedef int i2d_of_void(void *,unsigned char **);
# 392 "/usr/include/openssl/asn1.h" 3 4
typedef const ASN1_ITEM ASN1_ITEM_EXP;
# 506 "/usr/include/openssl/asn1.h" 3 4





typedef struct asn1_type_st
 {
 int type;
 union {
  char *ptr;
  ASN1_BOOLEAN boolean;
  ASN1_STRING * asn1_string;
  ASN1_OBJECT * object;
  ASN1_INTEGER * integer;
  ASN1_ENUMERATED * enumerated;
  ASN1_BIT_STRING * bit_string;
  ASN1_OCTET_STRING * octet_string;
  ASN1_PRINTABLESTRING * printablestring;
  ASN1_T61STRING * t61string;
  ASN1_IA5STRING * ia5string;
  ASN1_GENERALSTRING * generalstring;
  ASN1_BMPSTRING * bmpstring;
  ASN1_UNIVERSALSTRING * universalstring;
  ASN1_UTCTIME * utctime;
  ASN1_GENERALIZEDTIME * generalizedtime;
  ASN1_VISIBLESTRING * visiblestring;
  ASN1_UTF8STRING * utf8string;


  ASN1_STRING * set;
  ASN1_STRING * sequence;
  ASN1_VALUE * asn1_value;
  } value;
 } ASN1_TYPE;




typedef struct asn1_method_st
 {
 i2d_of_void *i2d;
 d2i_of_void *d2i;
 void *(*create)(void);
 void (*destroy)(void *);
 } ASN1_METHOD;


typedef struct asn1_header_st
 {
 ASN1_OCTET_STRING *header;
 void *data;
 ASN1_METHOD *meth;
 } ASN1_HEADER;


typedef struct BIT_STRING_BITNAME_st {
 int bitnum;
 const char *lname;
 const char *sname;
} BIT_STRING_BITNAME;
# 765 "/usr/include/openssl/asn1.h" 3 4
ASN1_TYPE *ASN1_TYPE_new(void); void ASN1_TYPE_free(ASN1_TYPE *a); ASN1_TYPE *d2i_ASN1_TYPE(ASN1_TYPE **a, const unsigned char **in, long len); int i2d_ASN1_TYPE(ASN1_TYPE *a, unsigned char **out); extern const ASN1_ITEM ASN1_ANY_it;

int ASN1_TYPE_get(ASN1_TYPE *a);
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);

ASN1_OBJECT * ASN1_OBJECT_new(void );
void ASN1_OBJECT_free(ASN1_OBJECT *a);
int i2d_ASN1_OBJECT(ASN1_OBJECT *a,unsigned char **pp);
ASN1_OBJECT * c2i_ASN1_OBJECT(ASN1_OBJECT **a,const unsigned char **pp,
   long length);
ASN1_OBJECT * d2i_ASN1_OBJECT(ASN1_OBJECT **a,const unsigned char **pp,
   long length);

extern const ASN1_ITEM ASN1_OBJECT_it;




ASN1_STRING * ASN1_STRING_new(void);
void ASN1_STRING_free(ASN1_STRING *a);
ASN1_STRING * ASN1_STRING_dup(ASN1_STRING *a);
ASN1_STRING * ASN1_STRING_type_new(int type );
int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b);


int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
int ASN1_STRING_length(ASN1_STRING *x);
void ASN1_STRING_length_set(ASN1_STRING *x, int n);
int ASN1_STRING_type(ASN1_STRING *x);
unsigned char * ASN1_STRING_data(ASN1_STRING *x);

ASN1_BIT_STRING *ASN1_BIT_STRING_new(void); void ASN1_BIT_STRING_free(ASN1_BIT_STRING *a); ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned char **in, long len); int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_BIT_STRING_it;
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a,unsigned char **pp);
ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,const unsigned char **pp,
   long length);
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d,
   int length );
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n);


int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
    BIT_STRING_BITNAME *tbl, int indent);

int ASN1_BIT_STRING_num_asc(char *name, BIT_STRING_BITNAME *tbl);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, char *name, int value,
    BIT_STRING_BITNAME *tbl);

int i2d_ASN1_BOOLEAN(int a,unsigned char **pp);
int d2i_ASN1_BOOLEAN(int *a,const unsigned char **pp,long length);

ASN1_INTEGER *ASN1_INTEGER_new(void); void ASN1_INTEGER_free(ASN1_INTEGER *a); ASN1_INTEGER *d2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **in, long len); int i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **out); extern const ASN1_ITEM ASN1_INTEGER_it;
int i2c_ASN1_INTEGER(ASN1_INTEGER *a,unsigned char **pp);
ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a,const unsigned char **pp,
   long length);
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a,const unsigned char **pp,
   long length);
ASN1_INTEGER * ASN1_INTEGER_dup(ASN1_INTEGER *x);
int ASN1_INTEGER_cmp(ASN1_INTEGER *x, ASN1_INTEGER *y);

ASN1_ENUMERATED *ASN1_ENUMERATED_new(void); void ASN1_ENUMERATED_free(ASN1_ENUMERATED *a); ASN1_ENUMERATED *d2i_ASN1_ENUMERATED(ASN1_ENUMERATED **a, const unsigned char **in, long len); int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned char **out); extern const ASN1_ITEM ASN1_ENUMERATED_it;

int ASN1_UTCTIME_check(ASN1_UTCTIME *a);
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s,time_t t);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);




int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *a);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,time_t t);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);

ASN1_OCTET_STRING *ASN1_OCTET_STRING_new(void); void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *a); ASN1_OCTET_STRING *d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING **a, const unsigned char **in, long len); int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_OCTET_STRING_it;
ASN1_OCTET_STRING * ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING *a);
int ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING *a, ASN1_OCTET_STRING *b);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data, int len);

ASN1_VISIBLESTRING *ASN1_VISIBLESTRING_new(void); void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING *a); ASN1_VISIBLESTRING *d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING **a, const unsigned char **in, long len); int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_VISIBLESTRING_it;
ASN1_UNIVERSALSTRING *ASN1_UNIVERSALSTRING_new(void); void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING *a); ASN1_UNIVERSALSTRING *d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING **a, const unsigned char **in, long len); int i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_UNIVERSALSTRING_it;
ASN1_UTF8STRING *ASN1_UTF8STRING_new(void); void ASN1_UTF8STRING_free(ASN1_UTF8STRING *a); ASN1_UTF8STRING *d2i_ASN1_UTF8STRING(ASN1_UTF8STRING **a, const unsigned char **in, long len); int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_UTF8STRING_it;
ASN1_NULL *ASN1_NULL_new(void); void ASN1_NULL_free(ASN1_NULL *a); ASN1_NULL *d2i_ASN1_NULL(ASN1_NULL **a, const unsigned char **in, long len); int i2d_ASN1_NULL(ASN1_NULL *a, unsigned char **out); extern const ASN1_ITEM ASN1_NULL_it;
ASN1_BMPSTRING *ASN1_BMPSTRING_new(void); void ASN1_BMPSTRING_free(ASN1_BMPSTRING *a); ASN1_BMPSTRING *d2i_ASN1_BMPSTRING(ASN1_BMPSTRING **a, const unsigned char **in, long len); int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_BMPSTRING_it;

int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
int UTF8_putc(unsigned char *str, int len, unsigned long value);

ASN1_STRING *ASN1_PRINTABLE_new(void); void ASN1_PRINTABLE_free(ASN1_STRING *a); ASN1_STRING *d2i_ASN1_PRINTABLE(ASN1_STRING **a, const unsigned char **in, long len); int i2d_ASN1_PRINTABLE(ASN1_STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_PRINTABLE_it;

ASN1_STRING *DIRECTORYSTRING_new(void); void DIRECTORYSTRING_free(ASN1_STRING *a); ASN1_STRING *d2i_DIRECTORYSTRING(ASN1_STRING **a, const unsigned char **in, long len); int i2d_DIRECTORYSTRING(ASN1_STRING *a, unsigned char **out); extern const ASN1_ITEM DIRECTORYSTRING_it;
ASN1_STRING *DISPLAYTEXT_new(void); void DISPLAYTEXT_free(ASN1_STRING *a); ASN1_STRING *d2i_DISPLAYTEXT(ASN1_STRING **a, const unsigned char **in, long len); int i2d_DISPLAYTEXT(ASN1_STRING *a, unsigned char **out); extern const ASN1_ITEM DISPLAYTEXT_it;
ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new(void); void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *a); ASN1_PRINTABLESTRING *d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING **a, const unsigned char **in, long len); int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_PRINTABLESTRING_it;
ASN1_T61STRING *ASN1_T61STRING_new(void); void ASN1_T61STRING_free(ASN1_T61STRING *a); ASN1_T61STRING *d2i_ASN1_T61STRING(ASN1_T61STRING **a, const unsigned char **in, long len); int i2d_ASN1_T61STRING(ASN1_T61STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_T61STRING_it;
ASN1_IA5STRING *ASN1_IA5STRING_new(void); void ASN1_IA5STRING_free(ASN1_IA5STRING *a); ASN1_IA5STRING *d2i_ASN1_IA5STRING(ASN1_IA5STRING **a, const unsigned char **in, long len); int i2d_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_IA5STRING_it;
ASN1_GENERALSTRING *ASN1_GENERALSTRING_new(void); void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING *a); ASN1_GENERALSTRING *d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING **a, const unsigned char **in, long len); int i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING *a, unsigned char **out); extern const ASN1_ITEM ASN1_GENERALSTRING_it;
ASN1_UTCTIME *ASN1_UTCTIME_new(void); void ASN1_UTCTIME_free(ASN1_UTCTIME *a); ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, const unsigned char **in, long len); int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **out); extern const ASN1_ITEM ASN1_UTCTIME_it;
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_new(void); void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME *a); ASN1_GENERALIZEDTIME *d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a, const unsigned char **in, long len); int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned char **out); extern const ASN1_ITEM ASN1_GENERALIZEDTIME_it;
ASN1_TIME *ASN1_TIME_new(void); void ASN1_TIME_free(ASN1_TIME *a); ASN1_TIME *d2i_ASN1_TIME(ASN1_TIME **a, const unsigned char **in, long len); int i2d_ASN1_TIME(ASN1_TIME *a, unsigned char **out); extern const ASN1_ITEM ASN1_TIME_it;

extern const ASN1_ITEM ASN1_OCTET_STRING_NDEF_it;

ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s,time_t t);
int ASN1_TIME_check(ASN1_TIME *t);
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out);

int i2d_ASN1_SET(STACK *a, unsigned char **pp,
   i2d_of_void *i2d, int ex_tag, int ex_class, int is_set);
STACK * d2i_ASN1_SET(STACK **a, const unsigned char **pp, long length,
       d2i_of_void *d2i, void (*free_func)(void *),
       int ex_tag, int ex_class);


int i2a_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *a);
int a2i_ASN1_INTEGER(BIO *bp,ASN1_INTEGER *bs,char *buf,int size);
int i2a_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *a);
int a2i_ASN1_ENUMERATED(BIO *bp,ASN1_ENUMERATED *bs,char *buf,int size);
int i2a_ASN1_OBJECT(BIO *bp,ASN1_OBJECT *a);
int a2i_ASN1_STRING(BIO *bp,ASN1_STRING *bs,char *buf,int size);
int i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type);

int i2t_ASN1_OBJECT(char *buf,int buf_len,ASN1_OBJECT *a);

int a2d_ASN1_OBJECT(unsigned char *out,int olen, const char *buf, int num);
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data,int len,
 const char *sn, const char *ln);

int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
long ASN1_INTEGER_get(ASN1_INTEGER *a);
ASN1_INTEGER *BN_to_ASN1_INTEGER(BIGNUM *bn, ASN1_INTEGER *ai);
BIGNUM *ASN1_INTEGER_to_BN(ASN1_INTEGER *ai,BIGNUM *bn);

int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
long ASN1_ENUMERATED_get(ASN1_ENUMERATED *a);
ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai);
BIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai,BIGNUM *bn);



int ASN1_PRINTABLE_type(const unsigned char *s, int max);

int i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass);
ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,
 long length, int Ptag, int Pclass);
unsigned long ASN1_tag2bit(int tag);

ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a,const unsigned char **pp,
  long length,int type);


int asn1_Finish(ASN1_CTX *c);
int asn1_const_Finish(ASN1_const_CTX *c);


int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
 int *pclass, long omax);
int ASN1_check_infinite_end(unsigned char **p,long len);
int ASN1_const_check_infinite_end(const unsigned char **p,long len);
void ASN1_put_object(unsigned char **pp, int constructed, int length,
 int tag, int xclass);
int ASN1_put_eoc(unsigned char **pp);
int ASN1_object_size(int constructed, int length, int tag);


void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, char *x);
# 943 "/usr/include/openssl/asn1.h" 3 4
void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
# 952 "/usr/include/openssl/asn1.h" 3 4
void *ASN1_d2i_fp(void *(*xnew)(void), d2i_of_void *d2i, FILE *in, void **x);







void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
int ASN1_i2d_fp(i2d_of_void *i2d,FILE *out,void *x);
# 973 "/usr/include/openssl/asn1.h" 3 4
int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned long flags);


int ASN1_STRING_to_UTF8(unsigned char **out, ASN1_STRING *in);


void *ASN1_d2i_bio(void *(*xnew)(void), d2i_of_void *d2i, BIO *in, void **x);







void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
int ASN1_i2d_bio(i2d_of_void *i2d,BIO *out, unsigned char *x);
# 1001 "/usr/include/openssl/asn1.h" 3 4
int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
int ASN1_UTCTIME_print(BIO *fp,ASN1_UTCTIME *a);
int ASN1_GENERALIZEDTIME_print(BIO *fp,ASN1_GENERALIZEDTIME *a);
int ASN1_TIME_print(BIO *fp,ASN1_TIME *a);
int ASN1_STRING_print(BIO *bp,ASN1_STRING *v);
int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned long flags);
int ASN1_parse(BIO *bp,const unsigned char *pp,long len,int indent);
int ASN1_parse_dump(BIO *bp,const unsigned char *pp,long len,int indent,int dump);

const char *ASN1_tag2str(int tag);


int i2d_ASN1_HEADER(ASN1_HEADER *a,unsigned char **pp);
ASN1_HEADER *d2i_ASN1_HEADER(ASN1_HEADER **a,const unsigned char **pp, long length);
ASN1_HEADER *ASN1_HEADER_new(void );
void ASN1_HEADER_free(ASN1_HEADER *a);

int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);


ASN1_METHOD *X509_asn1_meth(void);
ASN1_METHOD *RSAPrivateKey_asn1_meth(void);
ASN1_METHOD *ASN1_IA5STRING_asn1_meth(void);
ASN1_METHOD *ASN1_BIT_STRING_asn1_meth(void);

int ASN1_TYPE_set_octetstring(ASN1_TYPE *a,
 unsigned char *data, int len);
int ASN1_TYPE_get_octetstring(ASN1_TYPE *a,
 unsigned char *data, int max_len);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
 unsigned char *data, int len);
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a,long *num,
 unsigned char *data, int max_len);

STACK *ASN1_seq_unpack(const unsigned char *buf, int len,
         d2i_of_void *d2i, void (*free_func)(void *));
unsigned char *ASN1_seq_pack(STACK *safes, i2d_of_void *i2d,
        unsigned char **buf, int *len );
void *ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i);
void *ASN1_item_unpack(ASN1_STRING *oct, const ASN1_ITEM *it);
ASN1_STRING *ASN1_pack_string(void *obj, i2d_of_void *i2d,
         ASN1_OCTET_STRING **oct);






ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_OCTET_STRING **oct);

void ASN1_STRING_set_default_mask(unsigned long mask);
int ASN1_STRING_set_default_mask_asc(char *p);
unsigned long ASN1_STRING_get_default_mask(void);
int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
     int inform, unsigned long mask);
int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
     int inform, unsigned long mask,
     long minsize, long maxsize);

ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
  const unsigned char *in, int inlen, int inform, int nid);
ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void ASN1_STRING_TABLE_cleanup(void);




ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
ASN1_VALUE * ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in, long len, const ASN1_ITEM *it);
int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);

void ASN1_add_oid_module(void);

ASN1_TYPE *ASN1_generate_nconf(char *str, CONF *nconf);
ASN1_TYPE *ASN1_generate_v3(char *str, X509V3_CTX *cnf);

typedef int asn1_output_data_fn(BIO *out, BIO *data, ASN1_VALUE *val, int flags,
     const ASN1_ITEM *it);

int int_smime_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
    int ctype_nid, int econt_nid,
    STACK *mdalgs,
    asn1_output_data_fn *data_fn,
    const ASN1_ITEM *it);
ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);





void ERR_load_ASN1_strings(void);
# 961 "/usr/include/openssl/objects.h" 2 3 4
# 979 "/usr/include/openssl/objects.h" 3 4
typedef struct obj_name_st
 {
 int type;
 int alias;
 const char *name;
 const char *data;
 } OBJ_NAME;




int OBJ_NAME_init(void);
int OBJ_NAME_new_index(unsigned long (*hash_func)(const char *),
         int (*cmp_func)(const char *, const char *),
         void (*free_func)(const char *, int, const char *));
const char *OBJ_NAME_get(const char *name,int type);
int OBJ_NAME_add(const char *name,int type,const char *data);
int OBJ_NAME_remove(const char *name,int type);
void OBJ_NAME_cleanup(int type);
void OBJ_NAME_do_all(int type,void (*fn)(const OBJ_NAME *,void *arg),
       void *arg);
void OBJ_NAME_do_all_sorted(int type,void (*fn)(const OBJ_NAME *,void *arg),
       void *arg);

ASN1_OBJECT * OBJ_dup(const ASN1_OBJECT *o);
ASN1_OBJECT * OBJ_nid2obj(int n);
const char * OBJ_nid2ln(int n);
const char * OBJ_nid2sn(int n);
int OBJ_obj2nid(const ASN1_OBJECT *o);
ASN1_OBJECT * OBJ_txt2obj(const char *s, int no_name);
int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
int OBJ_txt2nid(const char *s);
int OBJ_ln2nid(const char *s);
int OBJ_sn2nid(const char *s);
int OBJ_cmp(const ASN1_OBJECT *a,const ASN1_OBJECT *b);
const char * OBJ_bsearch(const char *key,const char *base,int num,int size,
 int (*cmp)(const void *, const void *));
const char * OBJ_bsearch_ex(const char *key,const char *base,int num,
 int size, int (*cmp)(const void *, const void *), int flags);

int OBJ_new_nid(int num);
int OBJ_add_object(const ASN1_OBJECT *obj);
int OBJ_create(const char *oid,const char *sn,const char *ln);
void OBJ_cleanup(void );
int OBJ_create_objects(BIO *in);





void ERR_load_OBJ_strings(void);
# 99 "/usr/include/openssl/evp.h" 2 3 4
# 130 "/usr/include/openssl/evp.h" 3 4
struct evp_pkey_st
 {
 int type;
 int save_type;
 int references;
 union {
  char *ptr;

  struct rsa_st *rsa;


  struct dsa_st *dsa;


  struct dh_st *dh;


  struct ec_key_st *ec;

  } pkey;
 int save_parameters;
 STACK *attributes;
 } ;
# 227 "/usr/include/openssl/evp.h" 3 4
struct env_md_st
 {
 int type;
 int pkey_type;
 int md_size;
 unsigned long flags;
 int (*init)(EVP_MD_CTX *ctx);
 int (*update)(EVP_MD_CTX *ctx,const void *data,size_t count);
 int (*final)(EVP_MD_CTX *ctx,unsigned char *md);
 int (*copy)(EVP_MD_CTX *to,const EVP_MD_CTX *from);
 int (*cleanup)(EVP_MD_CTX *ctx);


 int (*sign)(int type, const unsigned char *m, unsigned int m_length,
      unsigned char *sigret, unsigned int *siglen, void *key);
 int (*verify)(int type, const unsigned char *m, unsigned int m_length,
        const unsigned char *sigbuf, unsigned int siglen,
        void *key);
 int required_pkey_type[5];
 int block_size;
 int ctx_size;
 } ;

typedef int evp_sign_method(int type,const unsigned char *m,
       unsigned int m_length,unsigned char *sigret,
       unsigned int *siglen, void *key);
typedef int evp_verify_method(int type,const unsigned char *m,
       unsigned int m_length,const unsigned char *sigbuf,
       unsigned int siglen, void *key);

typedef struct
 {
 EVP_MD_CTX *mctx;
 void *key;
 } EVP_MD_SVCTX;
# 304 "/usr/include/openssl/evp.h" 3 4
struct env_md_ctx_st
 {
 const EVP_MD *digest;
 ENGINE *engine;
 unsigned long flags;
 void *md_data;
 } ;
# 332 "/usr/include/openssl/evp.h" 3 4
struct evp_cipher_st
 {
 int nid;
 int block_size;
 int key_len;
 int iv_len;
 unsigned long flags;
 int (*init)(EVP_CIPHER_CTX *ctx, const unsigned char *key,
      const unsigned char *iv, int enc);
 int (*do_cipher)(EVP_CIPHER_CTX *ctx, unsigned char *out,
    const unsigned char *in, unsigned int inl);
 int (*cleanup)(EVP_CIPHER_CTX *);
 int ctx_size;
 int (*set_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *);
 int (*get_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *);
 int (*ctrl)(EVP_CIPHER_CTX *, int type, int arg, void *ptr);
 void *app_data;
 } ;
# 394 "/usr/include/openssl/evp.h" 3 4
typedef struct evp_cipher_info_st
 {
 const EVP_CIPHER *cipher;
 unsigned char iv[16];
 } EVP_CIPHER_INFO;

struct evp_cipher_ctx_st
 {
 const EVP_CIPHER *cipher;
 ENGINE *engine;
 int encrypt;
 int buf_len;

 unsigned char oiv[16];
 unsigned char iv[16];
 unsigned char buf[32];
 int num;

 void *app_data;
 int key_len;
 unsigned long flags;
 void *cipher_data;
 int final_used;
 int block_mask;
 unsigned char final[32];
 } ;

typedef struct evp_Encode_Ctx_st
 {
 int num;
 int length;




 unsigned char enc_data[80];
 int line_num;
 int expect_nl;
 } EVP_ENCODE_CTX;


typedef int (EVP_PBE_KEYGEN)(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
  ASN1_TYPE *param, const EVP_CIPHER *cipher,
                const EVP_MD *md, int en_de);
# 477 "/usr/include/openssl/evp.h" 3 4
int EVP_MD_type(const EVP_MD *md);


int EVP_MD_pkey_type(const EVP_MD *md);
int EVP_MD_size(const EVP_MD *md);
int EVP_MD_block_size(const EVP_MD *md);

const EVP_MD * EVP_MD_CTX_md(const EVP_MD_CTX *ctx);




int EVP_CIPHER_nid(const EVP_CIPHER *cipher);

int EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
int EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher);


const EVP_CIPHER * EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);
int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);
void * EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data);

unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx);
# 531 "/usr/include/openssl/evp.h" 3 4
int EVP_Cipher(EVP_CIPHER_CTX *c,
  unsigned char *out,
  const unsigned char *in,
  unsigned int inl);
# 545 "/usr/include/openssl/evp.h" 3 4
void EVP_MD_CTX_init(EVP_MD_CTX *ctx);
int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
EVP_MD_CTX *EVP_MD_CTX_create(void);
void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);
int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out,const EVP_MD_CTX *in);
void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);
int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx,int flags);
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
int EVP_DigestUpdate(EVP_MD_CTX *ctx,const void *d,
    size_t cnt);
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx,unsigned char *md,unsigned int *s);
int EVP_Digest(const void *data, size_t count,
  unsigned char *md, unsigned int *size, const EVP_MD *type, ENGINE *impl);

int EVP_MD_CTX_copy(EVP_MD_CTX *out,const EVP_MD_CTX *in);
int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
int EVP_DigestFinal(EVP_MD_CTX *ctx,unsigned char *md,unsigned int *s);

int EVP_read_pw_string(char *buf,int length,const char *prompt,int verify);
void EVP_set_pw_prompt(const char *prompt);
char * EVP_get_pw_prompt(void);

int EVP_BytesToKey(const EVP_CIPHER *type,const EVP_MD *md,
  const unsigned char *salt, const unsigned char *data,
  int datal, int count, unsigned char *key,unsigned char *iv);

void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags);
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx,int flags);

int EVP_EncryptInit(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher,
  const unsigned char *key, const unsigned char *iv);
int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher, ENGINE *impl,
  const unsigned char *key, const unsigned char *iv);
int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
  int *outl, const unsigned char *in, int inl);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);

int EVP_DecryptInit(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher,
  const unsigned char *key, const unsigned char *iv);
int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher, ENGINE *impl,
  const unsigned char *key, const unsigned char *iv);
int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
  int *outl, const unsigned char *in, int inl);
int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);

int EVP_CipherInit(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher,
         const unsigned char *key,const unsigned char *iv,
         int enc);
int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *cipher, ENGINE *impl,
         const unsigned char *key,const unsigned char *iv,
         int enc);
int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
  int *outl, const unsigned char *in, int inl);
int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);

int EVP_SignFinal(EVP_MD_CTX *ctx,unsigned char *md,unsigned int *s,
  EVP_PKEY *pkey);

int EVP_VerifyFinal(EVP_MD_CTX *ctx,const unsigned char *sigbuf,
  unsigned int siglen,EVP_PKEY *pkey);

int EVP_OpenInit(EVP_CIPHER_CTX *ctx,const EVP_CIPHER *type,
  const unsigned char *ek, int ekl, const unsigned char *iv,
  EVP_PKEY *priv);
int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);

int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
   unsigned char **ek, int *ekl, unsigned char *iv,
  EVP_PKEY **pubk, int npubk);
int EVP_SealFinal(EVP_CIPHER_CTX *ctx,unsigned char *out,int *outl);

void EVP_EncodeInit(EVP_ENCODE_CTX *ctx);
void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx,unsigned char *out,int *outl,
  const unsigned char *in,int inl);
void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx,unsigned char *out,int *outl);
int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n);

void EVP_DecodeInit(EVP_ENCODE_CTX *ctx);
int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx,unsigned char *out,int *outl,
  const unsigned char *in, int inl);
int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned
  char *out, int *outl);
int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n);

void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *a);
int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a);
EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *a);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key);


BIO_METHOD *BIO_f_md(void);
BIO_METHOD *BIO_f_base64(void);
BIO_METHOD *BIO_f_cipher(void);
BIO_METHOD *BIO_f_reliable(void);
void BIO_set_cipher(BIO *b,const EVP_CIPHER *c,const unsigned char *k,
  const unsigned char *i, int enc);


const EVP_MD *EVP_md_null(void);

const EVP_MD *EVP_md2(void);


const EVP_MD *EVP_md4(void);


const EVP_MD *EVP_md5(void);


const EVP_MD *EVP_sha(void);
const EVP_MD *EVP_sha1(void);
const EVP_MD *EVP_dss(void);
const EVP_MD *EVP_dss1(void);
const EVP_MD *EVP_ecdsa(void);


const EVP_MD *EVP_sha224(void);
const EVP_MD *EVP_sha256(void);


const EVP_MD *EVP_sha384(void);
const EVP_MD *EVP_sha512(void);





const EVP_MD *EVP_ripemd160(void);

const EVP_CIPHER *EVP_enc_null(void);

const EVP_CIPHER *EVP_des_ecb(void);
const EVP_CIPHER *EVP_des_ede(void);
const EVP_CIPHER *EVP_des_ede3(void);
const EVP_CIPHER *EVP_des_ede_ecb(void);
const EVP_CIPHER *EVP_des_ede3_ecb(void);
const EVP_CIPHER *EVP_des_cfb64(void);

const EVP_CIPHER *EVP_des_cfb1(void);
const EVP_CIPHER *EVP_des_cfb8(void);
const EVP_CIPHER *EVP_des_ede_cfb64(void);





const EVP_CIPHER *EVP_des_ede3_cfb64(void);

const EVP_CIPHER *EVP_des_ede3_cfb1(void);
const EVP_CIPHER *EVP_des_ede3_cfb8(void);
const EVP_CIPHER *EVP_des_ofb(void);
const EVP_CIPHER *EVP_des_ede_ofb(void);
const EVP_CIPHER *EVP_des_ede3_ofb(void);
const EVP_CIPHER *EVP_des_cbc(void);
const EVP_CIPHER *EVP_des_ede_cbc(void);
const EVP_CIPHER *EVP_des_ede3_cbc(void);
const EVP_CIPHER *EVP_desx_cbc(void);
# 722 "/usr/include/openssl/evp.h" 3 4
const EVP_CIPHER *EVP_rc4(void);
const EVP_CIPHER *EVP_rc4_40(void);


const EVP_CIPHER *EVP_idea_ecb(void);
const EVP_CIPHER *EVP_idea_cfb64(void);

const EVP_CIPHER *EVP_idea_ofb(void);
const EVP_CIPHER *EVP_idea_cbc(void);


const EVP_CIPHER *EVP_rc2_ecb(void);
const EVP_CIPHER *EVP_rc2_cbc(void);
const EVP_CIPHER *EVP_rc2_40_cbc(void);
const EVP_CIPHER *EVP_rc2_64_cbc(void);
const EVP_CIPHER *EVP_rc2_cfb64(void);

const EVP_CIPHER *EVP_rc2_ofb(void);


const EVP_CIPHER *EVP_bf_ecb(void);
const EVP_CIPHER *EVP_bf_cbc(void);
const EVP_CIPHER *EVP_bf_cfb64(void);

const EVP_CIPHER *EVP_bf_ofb(void);


const EVP_CIPHER *EVP_cast5_ecb(void);
const EVP_CIPHER *EVP_cast5_cbc(void);
const EVP_CIPHER *EVP_cast5_cfb64(void);

const EVP_CIPHER *EVP_cast5_ofb(void);
# 763 "/usr/include/openssl/evp.h" 3 4
const EVP_CIPHER *EVP_aes_128_ecb(void);
const EVP_CIPHER *EVP_aes_128_cbc(void);
const EVP_CIPHER *EVP_aes_128_cfb1(void);
const EVP_CIPHER *EVP_aes_128_cfb8(void);
const EVP_CIPHER *EVP_aes_128_cfb128(void);

const EVP_CIPHER *EVP_aes_128_ofb(void);



const EVP_CIPHER *EVP_aes_192_ecb(void);
const EVP_CIPHER *EVP_aes_192_cbc(void);
const EVP_CIPHER *EVP_aes_192_cfb1(void);
const EVP_CIPHER *EVP_aes_192_cfb8(void);
const EVP_CIPHER *EVP_aes_192_cfb128(void);

const EVP_CIPHER *EVP_aes_192_ofb(void);



const EVP_CIPHER *EVP_aes_256_ecb(void);
const EVP_CIPHER *EVP_aes_256_cbc(void);
const EVP_CIPHER *EVP_aes_256_cfb1(void);
const EVP_CIPHER *EVP_aes_256_cfb8(void);
const EVP_CIPHER *EVP_aes_256_cfb128(void);

const EVP_CIPHER *EVP_aes_256_ofb(void);
# 826 "/usr/include/openssl/evp.h" 3 4
void OPENSSL_add_all_algorithms_noconf(void);
void OPENSSL_add_all_algorithms_conf(void);
# 837 "/usr/include/openssl/evp.h" 3 4
void OpenSSL_add_all_ciphers(void);
void OpenSSL_add_all_digests(void);




int EVP_add_cipher(const EVP_CIPHER *cipher);
int EVP_add_digest(const EVP_MD *digest);

const EVP_CIPHER *EVP_get_cipherbyname(const char *name);
const EVP_MD *EVP_get_digestbyname(const char *name);
void EVP_cleanup(void);

int EVP_PKEY_decrypt(unsigned char *dec_key,
   const unsigned char *enc_key,int enc_key_len,
   EVP_PKEY *private_key);
int EVP_PKEY_encrypt(unsigned char *enc_key,
   const unsigned char *key,int key_len,
   EVP_PKEY *pub_key);
int EVP_PKEY_type(int type);
int EVP_PKEY_bits(EVP_PKEY *pkey);
int EVP_PKEY_size(EVP_PKEY *pkey);
int EVP_PKEY_assign(EVP_PKEY *pkey,int type,char *key);


struct rsa_st;
int EVP_PKEY_set1_RSA(EVP_PKEY *pkey,struct rsa_st *key);
struct rsa_st *EVP_PKEY_get1_RSA(EVP_PKEY *pkey);


struct dsa_st;
int EVP_PKEY_set1_DSA(EVP_PKEY *pkey,struct dsa_st *key);
struct dsa_st *EVP_PKEY_get1_DSA(EVP_PKEY *pkey);


struct dh_st;
int EVP_PKEY_set1_DH(EVP_PKEY *pkey,struct dh_st *key);
struct dh_st *EVP_PKEY_get1_DH(EVP_PKEY *pkey);


struct ec_key_st;
int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey,struct ec_key_st *key);
struct ec_key_st *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);


EVP_PKEY * EVP_PKEY_new(void);
void EVP_PKEY_free(EVP_PKEY *pkey);

EVP_PKEY * d2i_PublicKey(int type,EVP_PKEY **a, const unsigned char **pp,
   long length);
int i2d_PublicKey(EVP_PKEY *a, unsigned char **pp);

EVP_PKEY * d2i_PrivateKey(int type,EVP_PKEY **a, const unsigned char **pp,
   long length);
EVP_PKEY * d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
   long length);
int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);

int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
int EVP_PKEY_save_parameters(EVP_PKEY *pkey,int mode);
int EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b);

int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);

int EVP_CIPHER_type(const EVP_CIPHER *ctx);


int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);


int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c,ASN1_TYPE *type);
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c,ASN1_TYPE *type);


int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
    ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md,
    int en_de);
int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
      const unsigned char *salt, int saltlen, int iter,
      int keylen, unsigned char *out);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
    ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md,
    int en_de);

void PKCS5_PBE_add(void);

int EVP_PBE_CipherInit (ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
      ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de);
int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
      EVP_PBE_KEYGEN *keygen);
void EVP_PBE_cleanup(void);
# 947 "/usr/include/openssl/evp.h" 3 4
void EVP_add_alg_module(void);





void ERR_load_EVP_strings(void);
# 74 "/usr/include/openssl/x509.h" 2 3 4
# 83 "/usr/include/openssl/x509.h" 3 4
# 1 "/usr/include/openssl/ec.h" 1 3 4
# 75 "/usr/include/openssl/ec.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 76 "/usr/include/openssl/ec.h" 2 3 4






# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 83 "/usr/include/openssl/ec.h" 2 3 4
# 100 "/usr/include/openssl/ec.h" 3 4
typedef enum {

 POINT_CONVERSION_COMPRESSED = 2,
 POINT_CONVERSION_UNCOMPRESSED = 4,
 POINT_CONVERSION_HYBRID = 6
} point_conversion_form_t;


typedef struct ec_method_st EC_METHOD;

typedef struct ec_group_st
# 119 "/usr/include/openssl/ec.h" 3 4
 EC_GROUP;

typedef struct ec_point_st EC_POINT;





const EC_METHOD *EC_GFp_simple_method(void);
const EC_METHOD *EC_GFp_mont_method(void);
const EC_METHOD *EC_GFp_nist_method(void);



const EC_METHOD *EC_GF2m_simple_method(void);


EC_GROUP *EC_GROUP_new(const EC_METHOD *);
void EC_GROUP_free(EC_GROUP *);
void EC_GROUP_clear_free(EC_GROUP *);
int EC_GROUP_copy(EC_GROUP *, const EC_GROUP *);
EC_GROUP *EC_GROUP_dup(const EC_GROUP *);

const EC_METHOD *EC_GROUP_method_of(const EC_GROUP *);
int EC_METHOD_get_field_type(const EC_METHOD *);

int EC_GROUP_set_generator(EC_GROUP *, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor);
const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *);
int EC_GROUP_get_order(const EC_GROUP *, BIGNUM *order, BN_CTX *);
int EC_GROUP_get_cofactor(const EC_GROUP *, BIGNUM *cofactor, BN_CTX *);

void EC_GROUP_set_curve_name(EC_GROUP *, int nid);
int EC_GROUP_get_curve_name(const EC_GROUP *);

void EC_GROUP_set_asn1_flag(EC_GROUP *, int flag);
int EC_GROUP_get_asn1_flag(const EC_GROUP *);

void EC_GROUP_set_point_conversion_form(EC_GROUP *, point_conversion_form_t);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *);

unsigned char *EC_GROUP_get0_seed(const EC_GROUP *);
size_t EC_GROUP_get_seed_len(const EC_GROUP *);
size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);

int EC_GROUP_set_curve_GFp(EC_GROUP *, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
int EC_GROUP_get_curve_GFp(const EC_GROUP *, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *);
int EC_GROUP_set_curve_GF2m(EC_GROUP *, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
int EC_GROUP_get_curve_GF2m(const EC_GROUP *, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *);


int EC_GROUP_get_degree(const EC_GROUP *);


int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);


int EC_GROUP_check_discriminant(const EC_GROUP *, BN_CTX *);


int EC_GROUP_cmp(const EC_GROUP *, const EC_GROUP *, BN_CTX *);



EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);



EC_GROUP *EC_GROUP_new_by_curve_name(int nid);

typedef struct {
 int nid;
 const char *comment;
 } EC_builtin_curve;




size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);




EC_POINT *EC_POINT_new(const EC_GROUP *);
void EC_POINT_free(EC_POINT *);
void EC_POINT_clear_free(EC_POINT *);
int EC_POINT_copy(EC_POINT *, const EC_POINT *);
EC_POINT *EC_POINT_dup(const EC_POINT *, const EC_GROUP *);

const EC_METHOD *EC_POINT_method_of(const EC_POINT *);

int EC_POINT_set_to_infinity(const EC_GROUP *, EC_POINT *);
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *, EC_POINT *,
 const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *);
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *, const EC_POINT *,
 BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *);
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *, EC_POINT *,
 const BIGNUM *x, const BIGNUM *y, BN_CTX *);
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *, const EC_POINT *,
 BIGNUM *x, BIGNUM *y, BN_CTX *);
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *, EC_POINT *,
 const BIGNUM *x, int y_bit, BN_CTX *);

int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *, EC_POINT *,
 const BIGNUM *x, const BIGNUM *y, BN_CTX *);
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *, const EC_POINT *,
 BIGNUM *x, BIGNUM *y, BN_CTX *);
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *, EC_POINT *,
 const BIGNUM *x, int y_bit, BN_CTX *);

size_t EC_POINT_point2oct(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form,
        unsigned char *buf, size_t len, BN_CTX *);
int EC_POINT_oct2point(const EC_GROUP *, EC_POINT *,
        const unsigned char *buf, size_t len, BN_CTX *);


BIGNUM *EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *,
 point_conversion_form_t form, BIGNUM *, BN_CTX *);
EC_POINT *EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *,
 EC_POINT *, BN_CTX *);
char *EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *,
 point_conversion_form_t form, BN_CTX *);
EC_POINT *EC_POINT_hex2point(const EC_GROUP *, const char *,
 EC_POINT *, BN_CTX *);

int EC_POINT_add(const EC_GROUP *, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *);
int EC_POINT_dbl(const EC_GROUP *, EC_POINT *r, const EC_POINT *a, BN_CTX *);
int EC_POINT_invert(const EC_GROUP *, EC_POINT *, BN_CTX *);

int EC_POINT_is_at_infinity(const EC_GROUP *, const EC_POINT *);
int EC_POINT_is_on_curve(const EC_GROUP *, const EC_POINT *, BN_CTX *);
int EC_POINT_cmp(const EC_GROUP *, const EC_POINT *a, const EC_POINT *b, BN_CTX *);

int EC_POINT_make_affine(const EC_GROUP *, EC_POINT *, BN_CTX *);
int EC_POINTs_make_affine(const EC_GROUP *, size_t num, EC_POINT *[], BN_CTX *);


int EC_POINTs_mul(const EC_GROUP *, EC_POINT *r, const BIGNUM *, size_t num, const EC_POINT *[], const BIGNUM *[], BN_CTX *);
int EC_POINT_mul(const EC_GROUP *, EC_POINT *r, const BIGNUM *, const EC_POINT *, const BIGNUM *, BN_CTX *);


int EC_GROUP_precompute_mult(EC_GROUP *, BN_CTX *);

int EC_GROUP_have_precompute_mult(const EC_GROUP *);







int EC_GROUP_get_basis_type(const EC_GROUP *);
int EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
 unsigned int *k2, unsigned int *k3);



typedef struct ecpk_parameters_st ECPKPARAMETERS;

EC_GROUP *d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
# 290 "/usr/include/openssl/ec.h" 3 4
int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off);


int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);



typedef struct ec_key_st EC_KEY;





EC_KEY *EC_KEY_new(void);
EC_KEY *EC_KEY_new_by_curve_name(int nid);
void EC_KEY_free(EC_KEY *);
EC_KEY *EC_KEY_copy(EC_KEY *, const EC_KEY *);
EC_KEY *EC_KEY_dup(const EC_KEY *);

int EC_KEY_up_ref(EC_KEY *);

const EC_GROUP *EC_KEY_get0_group(const EC_KEY *);
int EC_KEY_set_group(EC_KEY *, const EC_GROUP *);
const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *);
int EC_KEY_set_private_key(EC_KEY *, const BIGNUM *);
const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *);
int EC_KEY_set_public_key(EC_KEY *, const EC_POINT *);
unsigned EC_KEY_get_enc_flags(const EC_KEY *);
void EC_KEY_set_enc_flags(EC_KEY *, unsigned int);
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *);
void EC_KEY_set_conv_form(EC_KEY *, point_conversion_form_t);

void *EC_KEY_get_key_method_data(EC_KEY *,
 void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));
void EC_KEY_insert_key_method_data(EC_KEY *, void *data,
 void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));

void EC_KEY_set_asn1_flag(EC_KEY *, int);
int EC_KEY_precompute_mult(EC_KEY *, BN_CTX *ctx);


int EC_KEY_generate_key(EC_KEY *);

int EC_KEY_check_key(const EC_KEY *);


EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len);
int i2d_ECPrivateKey(EC_KEY *a, unsigned char **out);

EC_KEY *d2i_ECParameters(EC_KEY **a, const unsigned char **in, long len);
int i2d_ECParameters(EC_KEY *a, unsigned char **out);


EC_KEY *o2i_ECPublicKey(EC_KEY **a, const unsigned char **in, long len);
int i2o_ECPublicKey(EC_KEY *a, unsigned char **out);


int ECParameters_print(BIO *bp, const EC_KEY *x);
int EC_KEY_print(BIO *bp, const EC_KEY *x, int off);


int ECParameters_print_fp(FILE *fp, const EC_KEY *x);
int EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off);
# 369 "/usr/include/openssl/ec.h" 3 4
void ERR_load_EC_strings(void);
# 84 "/usr/include/openssl/x509.h" 2 3 4



# 1 "/usr/include/openssl/ecdsa.h" 1 3 4
# 62 "/usr/include/openssl/ecdsa.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 63 "/usr/include/openssl/ecdsa.h" 2 3 4
# 78 "/usr/include/openssl/ecdsa.h" 3 4
typedef struct ECDSA_SIG_st
 {
 BIGNUM *r;
 BIGNUM *s;
 } ECDSA_SIG;





ECDSA_SIG *ECDSA_SIG_new(void);





void ECDSA_SIG_free(ECDSA_SIG *a);
# 103 "/usr/include/openssl/ecdsa.h" 3 4
int i2d_ECDSA_SIG(const ECDSA_SIG *a, unsigned char **pp);
# 113 "/usr/include/openssl/ecdsa.h" 3 4
ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG **v, const unsigned char **pp, long len);
# 123 "/usr/include/openssl/ecdsa.h" 3 4
ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst,int dgst_len,EC_KEY *eckey);
# 136 "/usr/include/openssl/ecdsa.h" 3 4
ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
  const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);
# 148 "/usr/include/openssl/ecdsa.h" 3 4
int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
  const ECDSA_SIG *sig, EC_KEY* eckey);

const ECDSA_METHOD *ECDSA_OpenSSL(void);





void ECDSA_set_default_method(const ECDSA_METHOD *meth);





const ECDSA_METHOD *ECDSA_get_default_method(void);







int ECDSA_set_method(EC_KEY *eckey, const ECDSA_METHOD *meth);






int ECDSA_size(const EC_KEY *eckey);
# 188 "/usr/include/openssl/ecdsa.h" 3 4
int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv,
  BIGNUM **rp);
# 202 "/usr/include/openssl/ecdsa.h" 3 4
int ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,
  unsigned char *sig, unsigned int *siglen, EC_KEY *eckey);
# 220 "/usr/include/openssl/ecdsa.h" 3 4
int ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,
  unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv,
  const BIGNUM *rp, EC_KEY *eckey);
# 235 "/usr/include/openssl/ecdsa.h" 3 4
int ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,
  const unsigned char *sig, int siglen, EC_KEY *eckey);


int ECDSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new
  *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int ECDSA_set_ex_data(EC_KEY *d, int idx, void *arg);
void *ECDSA_get_ex_data(EC_KEY *d, int idx);






void ERR_load_ECDSA_strings(void);
# 88 "/usr/include/openssl/x509.h" 2 3 4



# 1 "/usr/include/openssl/ecdh.h" 1 3 4
# 72 "/usr/include/openssl/ecdh.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 73 "/usr/include/openssl/ecdh.h" 2 3 4
# 88 "/usr/include/openssl/ecdh.h" 3 4
const ECDH_METHOD *ECDH_OpenSSL(void);

void ECDH_set_default_method(const ECDH_METHOD *);
const ECDH_METHOD *ECDH_get_default_method(void);
int ECDH_set_method(EC_KEY *, const ECDH_METHOD *);

int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key, EC_KEY *ecdh,
                     void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen));

int ECDH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new
  *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int ECDH_set_ex_data(EC_KEY *d, int idx, void *arg);
void *ECDH_get_ex_data(EC_KEY *d, int idx);






void ERR_load_ECDH_strings(void);
# 92 "/usr/include/openssl/x509.h" 2 3 4




# 1 "/usr/include/openssl/rsa.h" 1 3 4
# 104 "/usr/include/openssl/rsa.h" 3 4
struct rsa_meth_st
 {
 const char *name;
 int (*rsa_pub_enc)(int flen,const unsigned char *from,
      unsigned char *to,
      RSA *rsa,int padding);
 int (*rsa_pub_dec)(int flen,const unsigned char *from,
      unsigned char *to,
      RSA *rsa,int padding);
 int (*rsa_priv_enc)(int flen,const unsigned char *from,
       unsigned char *to,
       RSA *rsa,int padding);
 int (*rsa_priv_dec)(int flen,const unsigned char *from,
       unsigned char *to,
       RSA *rsa,int padding);
 int (*rsa_mod_exp)(BIGNUM *r0,const BIGNUM *I,RSA *rsa,BN_CTX *ctx);
 int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
     const BIGNUM *m, BN_CTX *ctx,
     BN_MONT_CTX *m_ctx);
 int (*init)(RSA *rsa);
 int (*finish)(RSA *rsa);
 int flags;
 char *app_data;







 int (*rsa_sign)(int type,
  const unsigned char *m, unsigned int m_length,
  unsigned char *sigret, unsigned int *siglen, const RSA *rsa);
 int (*rsa_verify)(int dtype,
  const unsigned char *m, unsigned int m_length,
  unsigned char *sigbuf, unsigned int siglen, const RSA *rsa);




 int (*rsa_keygen)(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
 };

struct rsa_st
 {


 int pad;
 long version;
 const RSA_METHOD *meth;

 ENGINE *engine;
 BIGNUM *n;
 BIGNUM *e;
 BIGNUM *d;
 BIGNUM *p;
 BIGNUM *q;
 BIGNUM *dmp1;
 BIGNUM *dmq1;
 BIGNUM *iqmp;

 CRYPTO_EX_DATA ex_data;
 int references;
 int flags;


 BN_MONT_CTX *_method_mod_n;
 BN_MONT_CTX *_method_mod_p;
 BN_MONT_CTX *_method_mod_q;



 char *bignum_data;
 BN_BLINDING *blinding;
 BN_BLINDING *mt_blinding;
 };
# 252 "/usr/include/openssl/rsa.h" 3 4
RSA * RSA_new(void);
RSA * RSA_new_method(ENGINE *engine);
int RSA_size(const RSA *);



RSA * RSA_generate_key(int bits, unsigned long e,void
  (*callback)(int,int,void *),void *cb_arg);



int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
int RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1, BIGNUM *q2,
   const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *Xp,
   const BIGNUM *Xq1, const BIGNUM *Xq2, const BIGNUM *Xq,
   const BIGNUM *e, BN_GENCB *cb);
int RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e, BN_GENCB *cb);

int RSA_check_key(const RSA *);

int RSA_public_encrypt(int flen, const unsigned char *from,
  unsigned char *to, RSA *rsa,int padding);
int RSA_private_encrypt(int flen, const unsigned char *from,
  unsigned char *to, RSA *rsa,int padding);
int RSA_public_decrypt(int flen, const unsigned char *from,
  unsigned char *to, RSA *rsa,int padding);
int RSA_private_decrypt(int flen, const unsigned char *from,
  unsigned char *to, RSA *rsa,int padding);
void RSA_free (RSA *r);

int RSA_up_ref(RSA *r);

int RSA_flags(const RSA *r);






void RSA_set_default_method(const RSA_METHOD *meth);
const RSA_METHOD *RSA_get_default_method(void);
const RSA_METHOD *RSA_get_method(const RSA *rsa);
int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);


int RSA_memory_lock(RSA *r);


const RSA_METHOD *RSA_PKCS1_SSLeay(void);

const RSA_METHOD *RSA_null_method(void);

RSA *d2i_RSAPublicKey(RSA **a, const unsigned char **in, long len); int i2d_RSAPublicKey(const RSA *a, unsigned char **out); extern const ASN1_ITEM RSAPublicKey_it;
RSA *d2i_RSAPrivateKey(RSA **a, const unsigned char **in, long len); int i2d_RSAPrivateKey(const RSA *a, unsigned char **out); extern const ASN1_ITEM RSAPrivateKey_it;


int RSA_print_fp(FILE *fp, const RSA *r,int offset);



int RSA_print(BIO *bp, const RSA *r,int offset);



int i2d_RSA_NET(const RSA *a, unsigned char **pp,
  int (*cb)(char *buf, int len, const char *prompt, int verify),
  int sgckey);
RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,
   int (*cb)(char *buf, int len, const char *prompt, int verify),
   int sgckey);

int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,
       int (*cb)(char *buf, int len, const char *prompt,
          int verify));
RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,
        int (*cb)(char *buf, int len, const char *prompt,
    int verify));




int RSA_sign(int type, const unsigned char *m, unsigned int m_length,
 unsigned char *sigret, unsigned int *siglen, RSA *rsa);
int RSA_verify(int type, const unsigned char *m, unsigned int m_length,
 unsigned char *sigbuf, unsigned int siglen, RSA *rsa);



int RSA_sign_ASN1_OCTET_STRING(int type,
 const unsigned char *m, unsigned int m_length,
 unsigned char *sigret, unsigned int *siglen, RSA *rsa);
int RSA_verify_ASN1_OCTET_STRING(int type,
 const unsigned char *m, unsigned int m_length,
 unsigned char *sigbuf, unsigned int siglen, RSA *rsa);

int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
void RSA_blinding_off(RSA *rsa);
BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *ctx);

int RSA_padding_add_PKCS1_type_1(unsigned char *to,int tlen,
 const unsigned char *f,int fl);
int RSA_padding_check_PKCS1_type_1(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len);
int RSA_padding_add_PKCS1_type_2(unsigned char *to,int tlen,
 const unsigned char *f,int fl);
int RSA_padding_check_PKCS1_type_2(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len);
int PKCS1_MGF1(unsigned char *mask, long len,
 const unsigned char *seed, long seedlen, const EVP_MD *dgst);
int RSA_padding_add_PKCS1_OAEP(unsigned char *to,int tlen,
 const unsigned char *f,int fl,
 const unsigned char *p,int pl);
int RSA_padding_check_PKCS1_OAEP(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len,
 const unsigned char *p,int pl);
int RSA_padding_add_SSLv23(unsigned char *to,int tlen,
 const unsigned char *f,int fl);
int RSA_padding_check_SSLv23(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len);
int RSA_padding_add_none(unsigned char *to,int tlen,
 const unsigned char *f,int fl);
int RSA_padding_check_none(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len);
int RSA_padding_add_X931(unsigned char *to,int tlen,
 const unsigned char *f,int fl);
int RSA_padding_check_X931(unsigned char *to,int tlen,
 const unsigned char *f,int fl,int rsa_len);
int RSA_X931_hash_id(int nid);

int RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
   const EVP_MD *Hash, const unsigned char *EM, int sLen);
int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
   const unsigned char *mHash,
   const EVP_MD *Hash, int sLen);

int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int RSA_set_ex_data(RSA *r,int idx,void *arg);
void *RSA_get_ex_data(const RSA *r, int idx);

RSA *RSAPublicKey_dup(RSA *rsa);
RSA *RSAPrivateKey_dup(RSA *rsa);





void ERR_load_RSA_strings(void);
# 97 "/usr/include/openssl/x509.h" 2 3 4


# 1 "/usr/include/openssl/dsa.h" 1 3 4
# 68 "/usr/include/openssl/dsa.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 69 "/usr/include/openssl/dsa.h" 2 3 4
# 83 "/usr/include/openssl/dsa.h" 3 4
# 1 "/usr/include/openssl/dh.h" 1 3 4
# 62 "/usr/include/openssl/dh.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 63 "/usr/include/openssl/dh.h" 2 3 4
# 99 "/usr/include/openssl/dh.h" 3 4
struct dh_method
 {
 const char *name;

 int (*generate_key)(DH *dh);
 int (*compute_key)(unsigned char *key,const BIGNUM *pub_key,DH *dh);
 int (*bn_mod_exp)(const DH *dh, BIGNUM *r, const BIGNUM *a,
    const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx,
    BN_MONT_CTX *m_ctx);

 int (*init)(DH *dh);
 int (*finish)(DH *dh);
 int flags;
 char *app_data;

 int (*generate_params)(DH *dh, int prime_len, int generator, BN_GENCB *cb);
 };

struct dh_st
 {


 int pad;
 int version;
 BIGNUM *p;
 BIGNUM *g;
 long length;
 BIGNUM *pub_key;
 BIGNUM *priv_key;

 int flags;
 BN_MONT_CTX *method_mont_p;

 BIGNUM *q;
 BIGNUM *j;
 unsigned char *seed;
 int seedlen;
 BIGNUM *counter;

 int references;
 CRYPTO_EX_DATA ex_data;
 const DH_METHOD *meth;
 ENGINE *engine;
 };
# 170 "/usr/include/openssl/dh.h" 3 4
const DH_METHOD *DH_OpenSSL(void);






void DH_set_default_method(const DH_METHOD *meth);
const DH_METHOD *DH_get_default_method(void);
int DH_set_method(DH *dh, const DH_METHOD *meth);
DH *DH_new_method(ENGINE *engine);

DH * DH_new(void);
void DH_free(DH *dh);
int DH_up_ref(DH *dh);
int DH_size(const DH *dh);
int DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
      CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int DH_set_ex_data(DH *d, int idx, void *arg);
void *DH_get_ex_data(DH *d, int idx);



DH * DH_generate_parameters(int prime_len,int generator,
  void (*callback)(int,int,void *),void *cb_arg);



int DH_generate_parameters_ex(DH *dh, int prime_len,int generator, BN_GENCB *cb);

int DH_check(const DH *dh,int *codes);
int DH_check_pub_key(const DH *dh,const BIGNUM *pub_key, int *codes);
int DH_generate_key(DH *dh);
int DH_compute_key(unsigned char *key,const BIGNUM *pub_key,DH *dh);
DH * d2i_DHparams(DH **a,const unsigned char **pp, long length);
int i2d_DHparams(const DH *a,unsigned char **pp);

int DHparams_print_fp(FILE *fp, const DH *x);


int DHparams_print(BIO *bp, const DH *x);
# 219 "/usr/include/openssl/dh.h" 3 4
void ERR_load_DH_strings(void);
# 84 "/usr/include/openssl/dsa.h" 2 3 4
# 129 "/usr/include/openssl/dsa.h" 3 4
typedef struct DSA_SIG_st
 {
 BIGNUM *r;
 BIGNUM *s;
 } DSA_SIG;

struct dsa_method
 {
 const char *name;
 DSA_SIG * (*dsa_do_sign)(const unsigned char *dgst, int dlen, DSA *dsa);
 int (*dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
        BIGNUM **rp);
 int (*dsa_do_verify)(const unsigned char *dgst, int dgst_len,
       DSA_SIG *sig, DSA *dsa);
 int (*dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1,
   BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx,
   BN_MONT_CTX *in_mont);
 int (*bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a, const BIGNUM *p,
    const BIGNUM *m, BN_CTX *ctx,
    BN_MONT_CTX *m_ctx);
 int (*init)(DSA *dsa);
 int (*finish)(DSA *dsa);
 int flags;
 char *app_data;

 int (*dsa_paramgen)(DSA *dsa, int bits,
   unsigned char *seed, int seed_len,
   int *counter_ret, unsigned long *h_ret,
   BN_GENCB *cb);

 int (*dsa_keygen)(DSA *dsa);
 };

struct dsa_st
 {


 int pad;
 long version;
 int write_params;
 BIGNUM *p;
 BIGNUM *q;
 BIGNUM *g;

 BIGNUM *pub_key;
 BIGNUM *priv_key;

 BIGNUM *kinv;
 BIGNUM *r;

 int flags;

 BN_MONT_CTX *method_mont_p;
 int references;
 CRYPTO_EX_DATA ex_data;
 const DSA_METHOD *meth;

 ENGINE *engine;
 };
# 198 "/usr/include/openssl/dsa.h" 3 4
DSA_SIG * DSA_SIG_new(void);
void DSA_SIG_free(DSA_SIG *a);
int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
DSA_SIG * d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);

DSA_SIG * DSA_do_sign(const unsigned char *dgst,int dlen,DSA *dsa);
int DSA_do_verify(const unsigned char *dgst,int dgst_len,
        DSA_SIG *sig,DSA *dsa);

const DSA_METHOD *DSA_OpenSSL(void);

void DSA_set_default_method(const DSA_METHOD *);
const DSA_METHOD *DSA_get_default_method(void);
int DSA_set_method(DSA *dsa, const DSA_METHOD *);






DSA * DSA_new(void);
DSA * DSA_new_method(ENGINE *engine);
void DSA_free (DSA *r);

int DSA_up_ref(DSA *r);
int DSA_size(const DSA *);

int DSA_sign_setup( DSA *dsa,BN_CTX *ctx_in,BIGNUM **kinvp,BIGNUM **rp);
int DSA_sign(int type,const unsigned char *dgst,int dlen,
  unsigned char *sig, unsigned int *siglen, DSA *dsa);
int DSA_verify(int type,const unsigned char *dgst,int dgst_len,
  const unsigned char *sigbuf, int siglen, DSA *dsa);
int DSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
      CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int DSA_set_ex_data(DSA *d, int idx, void *arg);
void *DSA_get_ex_data(DSA *d, int idx);

DSA * d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
DSA * d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
DSA * d2i_DSAparams(DSA **a, const unsigned char **pp, long length);



DSA * DSA_generate_parameters(int bits,
  unsigned char *seed,int seed_len,
  int *counter_ret, unsigned long *h_ret,void
  (*callback)(int, int, void *),void *cb_arg);



int DSA_generate_parameters_ex(DSA *dsa, int bits,
  unsigned char *seed,int seed_len,
  int *counter_ret, unsigned long *h_ret, BN_GENCB *cb);

int DSA_generate_key(DSA *a);
int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
int i2d_DSAparams(const DSA *a,unsigned char **pp);


int DSAparams_print(BIO *bp, const DSA *x);
int DSA_print(BIO *bp, const DSA *x, int off);


int DSAparams_print_fp(FILE *fp, const DSA *x);
int DSA_print_fp(FILE *bp, const DSA *x, int off);
# 275 "/usr/include/openssl/dsa.h" 3 4
DH *DSA_dup_DH(const DSA *r);
# 287 "/usr/include/openssl/dsa.h" 3 4
void ERR_load_DSA_strings(void);
# 100 "/usr/include/openssl/x509.h" 2 3 4







# 1 "/usr/include/openssl/sha.h" 1 3 4
# 62 "/usr/include/openssl/sha.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 63 "/usr/include/openssl/sha.h" 2 3 4
# 1 "/var/include/stddef.h" 1 3 4
# 64 "/usr/include/openssl/sha.h" 2 3 4
# 100 "/usr/include/openssl/sha.h" 3 4
typedef struct SHAstate_st
 {
 unsigned int h0,h1,h2,h3,h4;
 unsigned int Nl,Nh;
 unsigned int data[16];
 unsigned int num;
 } SHA_CTX;





int SHA_Init(SHA_CTX *c);
int SHA_Update(SHA_CTX *c, const void *data, size_t len);
int SHA_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA(const unsigned char *d, size_t n, unsigned char *md);
void SHA_Transform(SHA_CTX *c, const unsigned char *data);


int SHA1_Init(SHA_CTX *c);
int SHA1_Update(SHA_CTX *c, const void *data, size_t len);
int SHA1_Final(unsigned char *md, SHA_CTX *c);
unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md);
void SHA1_Transform(SHA_CTX *c, const unsigned char *data);
# 132 "/usr/include/openssl/sha.h" 3 4
typedef struct SHA256state_st
 {
 unsigned int h[8];
 unsigned int Nl,Nh;
 unsigned int data[16];
 unsigned int num,md_len;
 } SHA256_CTX;


int SHA224_Init(SHA256_CTX *c);
int SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
int SHA224_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA224(const unsigned char *d, size_t n,unsigned char *md);
int SHA256_Init(SHA256_CTX *c);
int SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
int SHA256_Final(unsigned char *md, SHA256_CTX *c);
unsigned char *SHA256(const unsigned char *d, size_t n,unsigned char *md);
void SHA256_Transform(SHA256_CTX *c, const unsigned char *data);
# 175 "/usr/include/openssl/sha.h" 3 4
typedef struct SHA512state_st
 {
 unsigned long long h[8];
 unsigned long long Nl,Nh;
 union {
  unsigned long long d[16];
  unsigned char p[(16*8)];
 } u;
 unsigned int num,md_len;
 } SHA512_CTX;



int SHA384_Init(SHA512_CTX *c);
int SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
int SHA384_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA384(const unsigned char *d, size_t n,unsigned char *md);
int SHA512_Init(SHA512_CTX *c);
int SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
int SHA512_Final(unsigned char *md, SHA512_CTX *c);
unsigned char *SHA512(const unsigned char *d, size_t n,unsigned char *md);
void SHA512_Transform(SHA512_CTX *c, const unsigned char *data);
# 108 "/usr/include/openssl/x509.h" 2 3 4
# 136 "/usr/include/openssl/x509.h" 3 4
typedef struct X509_objects_st
 {
 int nid;
 int (*a2i)(void);
 int (*i2a)(void);
 } X509_OBJECTS;

struct X509_algor_st
 {
 ASN1_OBJECT *algorithm;
 ASN1_TYPE *parameter;
 } ;



typedef STACK X509_ALGORS;

typedef struct X509_val_st
 {
 ASN1_TIME *notBefore;
 ASN1_TIME *notAfter;
 } X509_VAL;

typedef struct X509_pubkey_st
 {
 X509_ALGOR *algor;
 ASN1_BIT_STRING *public_key;
 EVP_PKEY *pkey;
 } X509_PUBKEY;

typedef struct X509_sig_st
 {
 X509_ALGOR *algor;
 ASN1_OCTET_STRING *digest;
 } X509_SIG;

typedef struct X509_name_entry_st
 {
 ASN1_OBJECT *object;
 ASN1_STRING *value;
 int set;
 int size;
 } X509_NAME_ENTRY;





struct X509_name_st
 {
 STACK *entries;
 int modified;

 BUF_MEM *bytes;



 unsigned long hash;
 } ;





typedef struct X509_extension_st
 {
 ASN1_OBJECT *object;
 ASN1_BOOLEAN critical;
 ASN1_OCTET_STRING *value;
 } X509_EXTENSION;

typedef STACK X509_EXTENSIONS;





typedef struct x509_attributes_st
 {
 ASN1_OBJECT *object;
 int single;
 union {
  char *ptr;
         STACK *set;
         ASN1_TYPE *single;
  } value;
 } X509_ATTRIBUTE;





typedef struct X509_req_info_st
 {
 ASN1_ENCODING enc;
 ASN1_INTEGER *version;
 X509_NAME *subject;
 X509_PUBKEY *pubkey;

 STACK *attributes;
 } X509_REQ_INFO;

typedef struct X509_req_st
 {
 X509_REQ_INFO *req_info;
 X509_ALGOR *sig_alg;
 ASN1_BIT_STRING *signature;
 int references;
 } X509_REQ;

typedef struct x509_cinf_st
 {
 ASN1_INTEGER *version;
 ASN1_INTEGER *serialNumber;
 X509_ALGOR *signature;
 X509_NAME *issuer;
 X509_VAL *validity;
 X509_NAME *subject;
 X509_PUBKEY *key;
 ASN1_BIT_STRING *issuerUID;
 ASN1_BIT_STRING *subjectUID;
 STACK *extensions;
 } X509_CINF;







typedef struct x509_cert_aux_st
 {
 STACK *trust;
 STACK *reject;
 ASN1_UTF8STRING *alias;
 ASN1_OCTET_STRING *keyid;
 STACK *other;
 } X509_CERT_AUX;

struct x509_st
 {
 X509_CINF *cert_info;
 X509_ALGOR *sig_alg;
 ASN1_BIT_STRING *signature;
 int valid;
 int references;
 char *name;
 CRYPTO_EX_DATA ex_data;

 long ex_pathlen;
 long ex_pcpathlen;
 unsigned long ex_flags;
 unsigned long ex_kusage;
 unsigned long ex_xkusage;
 unsigned long ex_nscert;
 ASN1_OCTET_STRING *skid;
 struct AUTHORITY_KEYID_st *akid;
 X509_POLICY_CACHE *policy_cache;





 unsigned char sha1_hash[20];

 X509_CERT_AUX *aux;
 } ;






typedef struct x509_trust_st {
 int trust;
 int flags;
 int (*check_trust)(struct x509_trust_st *, X509 *, int);
 char *name;
 int arg1;
 void *arg2;
} X509_TRUST;



typedef struct x509_cert_pair_st {
 X509 *forward;
 X509 *reverse;
} X509_CERT_PAIR;
# 426 "/usr/include/openssl/x509.h" 3 4
typedef struct X509_revoked_st
 {
 ASN1_INTEGER *serialNumber;
 ASN1_TIME *revocationDate;
 STACK *extensions;
 int sequence;
 } X509_REVOKED;




typedef struct X509_crl_info_st
 {
 ASN1_INTEGER *version;
 X509_ALGOR *sig_alg;
 X509_NAME *issuer;
 ASN1_TIME *lastUpdate;
 ASN1_TIME *nextUpdate;
 STACK *revoked;
 STACK *extensions;
 ASN1_ENCODING enc;
 } X509_CRL_INFO;

struct X509_crl_st
 {

 X509_CRL_INFO *crl;
 X509_ALGOR *sig_alg;
 ASN1_BIT_STRING *signature;
 int references;
 } ;




typedef struct private_key_st
 {
 int version;

 X509_ALGOR *enc_algor;
 ASN1_OCTET_STRING *enc_pkey;


 EVP_PKEY *dec_pkey;


 int key_length;
 char *key_data;
 int key_free;


 EVP_CIPHER_INFO cipher;

 int references;
 } X509_PKEY;


typedef struct X509_info_st
 {
 X509 *x509;
 X509_CRL *crl;
 X509_PKEY *x_pkey;

 EVP_CIPHER_INFO enc_cipher;
 int enc_len;
 char *enc_data;

 int references;
 } X509_INFO;








typedef struct Netscape_spkac_st
 {
 X509_PUBKEY *pubkey;
 ASN1_IA5STRING *challenge;
 } NETSCAPE_SPKAC;

typedef struct Netscape_spki_st
 {
 NETSCAPE_SPKAC *spkac;
 X509_ALGOR *sig_algor;
 ASN1_BIT_STRING *signature;
 } NETSCAPE_SPKI;


typedef struct Netscape_certificate_sequence
 {
 ASN1_OBJECT *type;
 STACK *certs;
 } NETSCAPE_CERT_SEQUENCE;
# 532 "/usr/include/openssl/x509.h" 3 4
typedef struct PBEPARAM_st {
ASN1_OCTET_STRING *salt;
ASN1_INTEGER *iter;
} PBEPARAM;



typedef struct PBE2PARAM_st {
X509_ALGOR *keyfunc;
X509_ALGOR *encryption;
} PBE2PARAM;

typedef struct PBKDF2PARAM_st {
ASN1_TYPE *salt;
ASN1_INTEGER *iter;
ASN1_INTEGER *keylength;
X509_ALGOR *prf;
} PBKDF2PARAM;




typedef struct pkcs8_priv_key_info_st
        {
        int broken;




        ASN1_INTEGER *version;
        X509_ALGOR *pkeyalg;
        ASN1_TYPE *pkey;
        STACK *attributes;
        } PKCS8_PRIV_KEY_INFO;





# 1 "/usr/include/openssl/x509_vfy.h" 1 3 4
# 68 "/usr/include/openssl/x509_vfy.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 69 "/usr/include/openssl/x509_vfy.h" 2 3 4

# 1 "/usr/include/openssl/lhash.h" 1 3 4
# 66 "/usr/include/openssl/lhash.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 67 "/usr/include/openssl/lhash.h" 2 3 4
# 79 "/usr/include/openssl/lhash.h" 3 4
typedef struct lhash_node_st
 {
 void *data;
 struct lhash_node_st *next;

 unsigned long hash;

 } LHASH_NODE;

typedef int (*LHASH_COMP_FN_TYPE)(const void *, const void *);
typedef unsigned long (*LHASH_HASH_FN_TYPE)(const void *);
typedef void (*LHASH_DOALL_FN_TYPE)(void *);
typedef void (*LHASH_DOALL_ARG_FN_TYPE)(void *, void *);
# 138 "/usr/include/openssl/lhash.h" 3 4
typedef struct lhash_st
 {
 LHASH_NODE **b;
 LHASH_COMP_FN_TYPE comp;
 LHASH_HASH_FN_TYPE hash;
 unsigned int num_nodes;
 unsigned int num_alloc_nodes;
 unsigned int p;
 unsigned int pmax;
 unsigned long up_load;
 unsigned long down_load;
 unsigned long num_items;

 unsigned long num_expands;
 unsigned long num_expand_reallocs;
 unsigned long num_contracts;
 unsigned long num_contract_reallocs;
 unsigned long num_hash_calls;
 unsigned long num_comp_calls;
 unsigned long num_insert;
 unsigned long num_replace;
 unsigned long num_delete;
 unsigned long num_no_delete;
 unsigned long num_retrieve;
 unsigned long num_retrieve_miss;
 unsigned long num_hash_comps;

 int error;
 } LHASH;







LHASH *lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c);
void lh_free(LHASH *lh);
void *lh_insert(LHASH *lh, void *data);
void *lh_delete(LHASH *lh, const void *data);
void *lh_retrieve(LHASH *lh, const void *data);
void lh_doall(LHASH *lh, LHASH_DOALL_FN_TYPE func);
void lh_doall_arg(LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg);
unsigned long lh_strhash(const char *c);
unsigned long lh_num_items(const LHASH *lh);


void lh_stats(const LHASH *lh, FILE *out);
void lh_node_stats(const LHASH *lh, FILE *out);
void lh_node_usage_stats(const LHASH *lh, FILE *out);



void lh_stats_bio(const LHASH *lh, BIO *out);
void lh_node_stats_bio(const LHASH *lh, BIO *out);
void lh_node_usage_stats_bio(const LHASH *lh, BIO *out);
# 71 "/usr/include/openssl/x509_vfy.h" 2 3 4



# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 75 "/usr/include/openssl/x509_vfy.h" 2 3 4






typedef struct x509_hash_dir_st
 {
 int num_dirs;
 char **dirs;
 int *dirs_type;
 int num_dirs_alloced;
 } X509_HASH_DIR_CTX;

typedef struct x509_file_st
 {
 int num_paths;
 int num_alloced;
 char **paths;
 int *path_type;
 } X509_CERT_FILE_CTX;
# 121 "/usr/include/openssl/x509_vfy.h" 3 4
typedef struct x509_object_st
 {

 int type;
 union {
  char *ptr;
  X509 *x509;
  X509_CRL *crl;
  EVP_PKEY *pkey;
  } data;
 } X509_OBJECT;

typedef struct x509_lookup_st X509_LOOKUP;





typedef struct x509_lookup_method_st
 {
 const char *name;
 int (*new_item)(X509_LOOKUP *ctx);
 void (*free)(X509_LOOKUP *ctx);
 int (*init)(X509_LOOKUP *ctx);
 int (*shutdown)(X509_LOOKUP *ctx);
 int (*ctrl)(X509_LOOKUP *ctx,int cmd,const char *argc,long argl,
   char **ret);
 int (*get_by_subject)(X509_LOOKUP *ctx,int type,X509_NAME *name,
         X509_OBJECT *ret);
 int (*get_by_issuer_serial)(X509_LOOKUP *ctx,int type,X509_NAME *name,
        ASN1_INTEGER *serial,X509_OBJECT *ret);
 int (*get_by_fingerprint)(X509_LOOKUP *ctx,int type,
      unsigned char *bytes,int len,
      X509_OBJECT *ret);
 int (*get_by_alias)(X509_LOOKUP *ctx,int type,char *str,int len,
       X509_OBJECT *ret);
 } X509_LOOKUP_METHOD;






typedef struct X509_VERIFY_PARAM_st
 {
 char *name;
 time_t check_time;
 unsigned long inh_flags;
 unsigned long flags;
 int purpose;
 int trust;
 int depth;
 STACK *policies;
 } X509_VERIFY_PARAM;






struct x509_store_st
 {

 int cache;
 STACK *objs;


 STACK *get_cert_methods;

 X509_VERIFY_PARAM *param;


 int (*verify)(X509_STORE_CTX *ctx);
 int (*verify_cb)(int ok,X509_STORE_CTX *ctx);
 int (*get_issuer)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
 int (*check_issued)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
 int (*check_revocation)(X509_STORE_CTX *ctx);
 int (*get_crl)(X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
 int (*check_crl)(X509_STORE_CTX *ctx, X509_CRL *crl);
 int (*cert_crl)(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
 int (*cleanup)(X509_STORE_CTX *ctx);

 CRYPTO_EX_DATA ex_data;
 int references;
 } ;

int X509_STORE_set_depth(X509_STORE *store, int depth);





struct x509_lookup_st
 {
 int init;
 int skip;
 X509_LOOKUP_METHOD *method;
 char *method_data;

 X509_STORE *store_ctx;
 } ;




struct x509_store_ctx_st
 {
 X509_STORE *ctx;
 int current_method;


 X509 *cert;
 STACK *untrusted;
 STACK *crls;

 X509_VERIFY_PARAM *param;
 void *other_ctx;


 int (*verify)(X509_STORE_CTX *ctx);
 int (*verify_cb)(int ok,X509_STORE_CTX *ctx);
 int (*get_issuer)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
 int (*check_issued)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
 int (*check_revocation)(X509_STORE_CTX *ctx);
 int (*get_crl)(X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
 int (*check_crl)(X509_STORE_CTX *ctx, X509_CRL *crl);
 int (*cert_crl)(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
 int (*check_policy)(X509_STORE_CTX *ctx);
 int (*cleanup)(X509_STORE_CTX *ctx);


 int valid;
 int last_untrusted;
 STACK *chain;
 X509_POLICY_TREE *tree;

 int explicit_policy;


 int error_depth;
 int error;
 X509 *current_cert;
 X509 *current_issuer;
 X509_CRL *current_crl;

 CRYPTO_EX_DATA ex_data;
 } ;

void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
# 378 "/usr/include/openssl/x509_vfy.h" 3 4
int X509_OBJECT_idx_by_subject(STACK *h, int type,
      X509_NAME *name);
X509_OBJECT *X509_OBJECT_retrieve_by_subject(STACK *h,int type,X509_NAME *name);
X509_OBJECT *X509_OBJECT_retrieve_match(STACK *h, X509_OBJECT *x);
void X509_OBJECT_up_ref_count(X509_OBJECT *a);
void X509_OBJECT_free_contents(X509_OBJECT *a);
X509_STORE *X509_STORE_new(void );
void X509_STORE_free(X509_STORE *v);

int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);
int X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
int X509_STORE_set_trust(X509_STORE *ctx, int trust);
int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);

X509_STORE_CTX *X509_STORE_CTX_new(void);

int X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);

void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
    X509 *x509, STACK *chain);
void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, STACK *sk);
void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);

X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);

X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
X509_LOOKUP_METHOD *X509_LOOKUP_file(void);

int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);

int X509_STORE_get_by_subject(X509_STORE_CTX *vs,int type,X509_NAME *name,
 X509_OBJECT *ret);

int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
 long argl, char **ret);


int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);



X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
void X509_LOOKUP_free(X509_LOOKUP *ctx);
int X509_LOOKUP_init(X509_LOOKUP *ctx);
int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, int type, X509_NAME *name,
 X509_OBJECT *ret);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, int type, X509_NAME *name,
 ASN1_INTEGER *serial, X509_OBJECT *ret);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, int type,
 unsigned char *bytes, int len, X509_OBJECT *ret);
int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, int type, char *str,
 int len, X509_OBJECT *ret);
int X509_LOOKUP_shutdown(X509_LOOKUP *ctx);


int X509_STORE_load_locations (X509_STORE *ctx,
  const char *file, const char *dir);
int X509_STORE_set_default_paths(X509_STORE *ctx);


int X509_STORE_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx,int idx,void *data);
void * X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx,int idx);
int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx,int s);
int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
X509 * X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
STACK *X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx);
STACK *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
void X509_STORE_CTX_set_cert(X509_STORE_CTX *c,X509 *x);
void X509_STORE_CTX_set_chain(X509_STORE_CTX *c,STACK *sk);
void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c,STACK *sk);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
    int purpose, int trust);
void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags);
void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,
        time_t t);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
      int (*verify_cb)(int, X509_STORE_CTX *));

X509_POLICY_TREE *X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx);
int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx);

X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);



X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
      const X509_VERIFY_PARAM *from);
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
      const X509_VERIFY_PARAM *from);
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
       unsigned long flags);
unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
      ASN1_OBJECT *policy);
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
     STACK *policies);
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);

int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param);
const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name);
void X509_VERIFY_PARAM_table_cleanup(void);

int X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
   STACK *certs,
   STACK *policy_oids,
   unsigned int flags);

void X509_policy_tree_free(X509_POLICY_TREE *tree);

int X509_policy_tree_level_count(const X509_POLICY_TREE *tree);
X509_POLICY_LEVEL *
 X509_policy_tree_get0_level(const X509_POLICY_TREE *tree, int i);

STACK *
 X509_policy_tree_get0_policies(const X509_POLICY_TREE *tree);

STACK *
 X509_policy_tree_get0_user_policies(const X509_POLICY_TREE *tree);

int X509_policy_level_node_count(X509_POLICY_LEVEL *level);

X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i);

const ASN1_OBJECT *X509_policy_node_get0_policy(const X509_POLICY_NODE *node);

STACK *
 X509_policy_node_get0_qualifiers(const X509_POLICY_NODE *node);
const X509_POLICY_NODE *
 X509_policy_node_get0_parent(const X509_POLICY_NODE *node);
# 572 "/usr/include/openssl/x509.h" 2 3 4
# 1 "/usr/include/openssl/pkcs7.h" 1 3 4
# 64 "/usr/include/openssl/pkcs7.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 65 "/usr/include/openssl/pkcs7.h" 2 3 4

# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 67 "/usr/include/openssl/pkcs7.h" 2 3 4
# 86 "/usr/include/openssl/pkcs7.h" 3 4
typedef struct pkcs7_issuer_and_serial_st
 {
 X509_NAME *issuer;
 ASN1_INTEGER *serial;
 } PKCS7_ISSUER_AND_SERIAL;

typedef struct pkcs7_signer_info_st
 {
 ASN1_INTEGER *version;
 PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
 X509_ALGOR *digest_alg;
 STACK *auth_attr;
 X509_ALGOR *digest_enc_alg;
 ASN1_OCTET_STRING *enc_digest;
 STACK *unauth_attr;


 EVP_PKEY *pkey;
 } PKCS7_SIGNER_INFO;




typedef struct pkcs7_recip_info_st
 {
 ASN1_INTEGER *version;
 PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
 X509_ALGOR *key_enc_algor;
 ASN1_OCTET_STRING *enc_key;
 X509 *cert;
 } PKCS7_RECIP_INFO;




typedef struct pkcs7_signed_st
 {
 ASN1_INTEGER *version;
 STACK *md_algs;
 STACK *cert;
 STACK *crl;
 STACK *signer_info;

 struct pkcs7_st *contents;
 } PKCS7_SIGNED;



typedef struct pkcs7_enc_content_st
 {
 ASN1_OBJECT *content_type;
 X509_ALGOR *algorithm;
 ASN1_OCTET_STRING *enc_data;
 const EVP_CIPHER *cipher;
 } PKCS7_ENC_CONTENT;

typedef struct pkcs7_enveloped_st
 {
 ASN1_INTEGER *version;
 STACK *recipientinfo;
 PKCS7_ENC_CONTENT *enc_data;
 } PKCS7_ENVELOPE;

typedef struct pkcs7_signedandenveloped_st
 {
 ASN1_INTEGER *version;
 STACK *md_algs;
 STACK *cert;
 STACK *crl;
 STACK *signer_info;

 PKCS7_ENC_CONTENT *enc_data;
 STACK *recipientinfo;
 } PKCS7_SIGN_ENVELOPE;

typedef struct pkcs7_digest_st
 {
 ASN1_INTEGER *version;
 X509_ALGOR *md;
 struct pkcs7_st *contents;
 ASN1_OCTET_STRING *digest;
 } PKCS7_DIGEST;

typedef struct pkcs7_encrypted_st
 {
 ASN1_INTEGER *version;
 PKCS7_ENC_CONTENT *enc_data;
 } PKCS7_ENCRYPT;

typedef struct pkcs7_st
 {


 unsigned char *asn1;
 long length;




 int state;

 int detached;

 ASN1_OBJECT *type;



 union {
  char *ptr;


  ASN1_OCTET_STRING *data;


  PKCS7_SIGNED *sign;


  PKCS7_ENVELOPE *enveloped;


  PKCS7_SIGN_ENVELOPE *signed_and_enveloped;


  PKCS7_DIGEST *digest;


  PKCS7_ENCRYPT *encrypted;


  ASN1_TYPE *other;
  } d;
 } PKCS7;




# 282 "/usr/include/openssl/pkcs7.h" 3 4
PKCS7_ISSUER_AND_SERIAL *PKCS7_ISSUER_AND_SERIAL_new(void); void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL *a); PKCS7_ISSUER_AND_SERIAL *d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL **a, const unsigned char **in, long len); int i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL *a, unsigned char **out); extern const ASN1_ITEM PKCS7_ISSUER_AND_SERIAL_it;


int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,const EVP_MD *type,
 unsigned char *md,unsigned int *len);

PKCS7 *d2i_PKCS7_fp(FILE *fp,PKCS7 **p7);
int i2d_PKCS7_fp(FILE *fp,PKCS7 *p7);

PKCS7 *PKCS7_dup(PKCS7 *p7);
PKCS7 *d2i_PKCS7_bio(BIO *bp,PKCS7 **p7);
int i2d_PKCS7_bio(BIO *bp,PKCS7 *p7);


PKCS7_SIGNER_INFO *PKCS7_SIGNER_INFO_new(void); void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO *a); PKCS7_SIGNER_INFO *d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO **a, const unsigned char **in, long len); int i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO *a, unsigned char **out); extern const ASN1_ITEM PKCS7_SIGNER_INFO_it;
PKCS7_RECIP_INFO *PKCS7_RECIP_INFO_new(void); void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO *a); PKCS7_RECIP_INFO *d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO **a, const unsigned char **in, long len); int i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO *a, unsigned char **out); extern const ASN1_ITEM PKCS7_RECIP_INFO_it;
PKCS7_SIGNED *PKCS7_SIGNED_new(void); void PKCS7_SIGNED_free(PKCS7_SIGNED *a); PKCS7_SIGNED *d2i_PKCS7_SIGNED(PKCS7_SIGNED **a, const unsigned char **in, long len); int i2d_PKCS7_SIGNED(PKCS7_SIGNED *a, unsigned char **out); extern const ASN1_ITEM PKCS7_SIGNED_it;
PKCS7_ENC_CONTENT *PKCS7_ENC_CONTENT_new(void); void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT *a); PKCS7_ENC_CONTENT *d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT **a, const unsigned char **in, long len); int i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT *a, unsigned char **out); extern const ASN1_ITEM PKCS7_ENC_CONTENT_it;
PKCS7_ENVELOPE *PKCS7_ENVELOPE_new(void); void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE *a); PKCS7_ENVELOPE *d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE **a, const unsigned char **in, long len); int i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE *a, unsigned char **out); extern const ASN1_ITEM PKCS7_ENVELOPE_it;
PKCS7_SIGN_ENVELOPE *PKCS7_SIGN_ENVELOPE_new(void); void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE *a); PKCS7_SIGN_ENVELOPE *d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE **a, const unsigned char **in, long len); int i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE *a, unsigned char **out); extern const ASN1_ITEM PKCS7_SIGN_ENVELOPE_it;
PKCS7_DIGEST *PKCS7_DIGEST_new(void); void PKCS7_DIGEST_free(PKCS7_DIGEST *a); PKCS7_DIGEST *d2i_PKCS7_DIGEST(PKCS7_DIGEST **a, const unsigned char **in, long len); int i2d_PKCS7_DIGEST(PKCS7_DIGEST *a, unsigned char **out); extern const ASN1_ITEM PKCS7_DIGEST_it;
PKCS7_ENCRYPT *PKCS7_ENCRYPT_new(void); void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT *a); PKCS7_ENCRYPT *d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT **a, const unsigned char **in, long len); int i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT *a, unsigned char **out); extern const ASN1_ITEM PKCS7_ENCRYPT_it;
PKCS7 *PKCS7_new(void); void PKCS7_free(PKCS7 *a); PKCS7 *d2i_PKCS7(PKCS7 **a, const unsigned char **in, long len); int i2d_PKCS7(PKCS7 *a, unsigned char **out); extern const ASN1_ITEM PKCS7_it;

extern const ASN1_ITEM PKCS7_ATTR_SIGN_it;
extern const ASN1_ITEM PKCS7_ATTR_VERIFY_it;

int i2d_PKCS7_NDEF(PKCS7 *a, unsigned char **out);

long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);

int PKCS7_set_type(PKCS7 *p7, int type);
int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
 const EVP_MD *dgst);
int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
int PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
int PKCS7_content_new(PKCS7 *p7, int nid);
int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,
 BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
        X509 *x509);

BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio);
int PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);


PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,
 EVP_PKEY *pkey, const EVP_MD *dgst);
X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md);
STACK *PKCS7_get_signer_info(PKCS7 *p7);

PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher);

PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
ASN1_OCTET_STRING *PKCS7_digest_from_attributes(STACK *sk);
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si,int nid,int type,
 void *data);
int PKCS7_add_attribute (PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
 void *value);
ASN1_TYPE *PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid);
ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid);
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
    STACK *sk);
int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,STACK *sk);


PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK *certs,
       BIO *data, int flags);
int PKCS7_verify(PKCS7 *p7, STACK *certs, X509_STORE *store,
     BIO *indata, BIO *out, int flags);
STACK *PKCS7_get0_signers(PKCS7 *p7, STACK *certs, int flags);
PKCS7 *PKCS7_encrypt(STACK *certs, BIO *in, const EVP_CIPHER *cipher,
        int flags);
int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);

int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
         STACK *cap);
STACK *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
int PKCS7_simple_smimecap(STACK *sk, int nid, int arg);

int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO **bcont);
int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
int SMIME_text(BIO *in, BIO *out);





void ERR_load_PKCS7_strings(void);
# 573 "/usr/include/openssl/x509.h" 2 3 4
# 748 "/usr/include/openssl/x509.h" 3 4
const char *X509_verify_cert_error_string(long n);



int X509_verify(X509 *a, EVP_PKEY *r);

int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);

NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char *str, int len);
char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);

int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);

int X509_signature_print(BIO *bp,X509_ALGOR *alg, ASN1_STRING *sig);

int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);

int X509_pubkey_digest(const X509 *data,const EVP_MD *type,
  unsigned char *md, unsigned int *len);
int X509_digest(const X509 *data,const EVP_MD *type,
  unsigned char *md, unsigned int *len);
int X509_CRL_digest(const X509_CRL *data,const EVP_MD *type,
  unsigned char *md, unsigned int *len);
int X509_REQ_digest(const X509_REQ *data,const EVP_MD *type,
  unsigned char *md, unsigned int *len);
int X509_NAME_digest(const X509_NAME *data,const EVP_MD *type,
  unsigned char *md, unsigned int *len);



X509 *d2i_X509_fp(FILE *fp, X509 **x509);
int i2d_X509_fp(FILE *fp,X509 *x509);
X509_CRL *d2i_X509_CRL_fp(FILE *fp,X509_CRL **crl);
int i2d_X509_CRL_fp(FILE *fp,X509_CRL *crl);
X509_REQ *d2i_X509_REQ_fp(FILE *fp,X509_REQ **req);
int i2d_X509_REQ_fp(FILE *fp,X509_REQ *req);

RSA *d2i_RSAPrivateKey_fp(FILE *fp,RSA **rsa);
int i2d_RSAPrivateKey_fp(FILE *fp,RSA *rsa);
RSA *d2i_RSAPublicKey_fp(FILE *fp,RSA **rsa);
int i2d_RSAPublicKey_fp(FILE *fp,RSA *rsa);
RSA *d2i_RSA_PUBKEY_fp(FILE *fp,RSA **rsa);
int i2d_RSA_PUBKEY_fp(FILE *fp,RSA *rsa);


DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);


EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);

X509_SIG *d2i_PKCS8_fp(FILE *fp,X509_SIG **p8);
int i2d_PKCS8_fp(FILE *fp,X509_SIG *p8);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
      PKCS8_PRIV_KEY_INFO **p8inf);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,PKCS8_PRIV_KEY_INFO *p8inf);
int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);



X509 *d2i_X509_bio(BIO *bp,X509 **x509);
int i2d_X509_bio(BIO *bp,X509 *x509);
X509_CRL *d2i_X509_CRL_bio(BIO *bp,X509_CRL **crl);
int i2d_X509_CRL_bio(BIO *bp,X509_CRL *crl);
X509_REQ *d2i_X509_REQ_bio(BIO *bp,X509_REQ **req);
int i2d_X509_REQ_bio(BIO *bp,X509_REQ *req);

RSA *d2i_RSAPrivateKey_bio(BIO *bp,RSA **rsa);
int i2d_RSAPrivateKey_bio(BIO *bp,RSA *rsa);
RSA *d2i_RSAPublicKey_bio(BIO *bp,RSA **rsa);
int i2d_RSAPublicKey_bio(BIO *bp,RSA *rsa);
RSA *d2i_RSA_PUBKEY_bio(BIO *bp,RSA **rsa);
int i2d_RSA_PUBKEY_bio(BIO *bp,RSA *rsa);


DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);


EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);

X509_SIG *d2i_PKCS8_bio(BIO *bp,X509_SIG **p8);
int i2d_PKCS8_bio(BIO *bp,X509_SIG *p8);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
      PKCS8_PRIV_KEY_INFO **p8inf);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,PKCS8_PRIV_KEY_INFO *p8inf);
int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);


X509 *X509_dup(X509 *x509);
X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex);
X509_CRL *X509_CRL_dup(X509_CRL *crl);
X509_REQ *X509_REQ_dup(X509_REQ *req);
X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn);
int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval);
void X509_ALGOR_get0(ASN1_OBJECT **paobj, int *pptype, void **ppval,
      X509_ALGOR *algor);

X509_NAME *X509_NAME_dup(X509_NAME *xn);
X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);



int X509_cmp_time(ASN1_TIME *s, time_t *t);
int X509_cmp_current_time(ASN1_TIME *s);
ASN1_TIME * X509_time_adj(ASN1_TIME *s, long adj, time_t *t);
ASN1_TIME * X509_gmtime_adj(ASN1_TIME *s, long adj);

const char * X509_get_default_cert_area(void );
const char * X509_get_default_cert_dir(void );
const char * X509_get_default_cert_file(void );
const char * X509_get_default_cert_dir_env(void );
const char * X509_get_default_cert_file_env(void );
const char * X509_get_default_private_dir(void );

X509_REQ * X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
X509 * X509_REQ_to_X509(X509_REQ *r, int days,EVP_PKEY *pkey);

X509_ALGOR *X509_ALGOR_new(void); void X509_ALGOR_free(X509_ALGOR *a); X509_ALGOR *d2i_X509_ALGOR(X509_ALGOR **a, const unsigned char **in, long len); int i2d_X509_ALGOR(X509_ALGOR *a, unsigned char **out); extern const ASN1_ITEM X509_ALGOR_it;
X509_ALGORS *d2i_X509_ALGORS(X509_ALGORS **a, const unsigned char **in, long len); int i2d_X509_ALGORS(X509_ALGORS *a, unsigned char **out); extern const ASN1_ITEM X509_ALGORS_it;
X509_VAL *X509_VAL_new(void); void X509_VAL_free(X509_VAL *a); X509_VAL *d2i_X509_VAL(X509_VAL **a, const unsigned char **in, long len); int i2d_X509_VAL(X509_VAL *a, unsigned char **out); extern const ASN1_ITEM X509_VAL_it;

X509_PUBKEY *X509_PUBKEY_new(void); void X509_PUBKEY_free(X509_PUBKEY *a); X509_PUBKEY *d2i_X509_PUBKEY(X509_PUBKEY **a, const unsigned char **in, long len); int i2d_X509_PUBKEY(X509_PUBKEY *a, unsigned char **out); extern const ASN1_ITEM X509_PUBKEY_it;

int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);
EVP_PKEY * X509_PUBKEY_get(X509_PUBKEY *key);
int X509_get_pubkey_parameters(EVP_PKEY *pkey,
        STACK *chain);
int i2d_PUBKEY(EVP_PKEY *a,unsigned char **pp);
EVP_PKEY * d2i_PUBKEY(EVP_PKEY **a,const unsigned char **pp,
   long length);

int i2d_RSA_PUBKEY(RSA *a,unsigned char **pp);
RSA * d2i_RSA_PUBKEY(RSA **a,const unsigned char **pp,
   long length);


int i2d_DSA_PUBKEY(DSA *a,unsigned char **pp);
DSA * d2i_DSA_PUBKEY(DSA **a,const unsigned char **pp,
   long length);


int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp,
   long length);


X509_SIG *X509_SIG_new(void); void X509_SIG_free(X509_SIG *a); X509_SIG *d2i_X509_SIG(X509_SIG **a, const unsigned char **in, long len); int i2d_X509_SIG(X509_SIG *a, unsigned char **out); extern const ASN1_ITEM X509_SIG_it;
X509_REQ_INFO *X509_REQ_INFO_new(void); void X509_REQ_INFO_free(X509_REQ_INFO *a); X509_REQ_INFO *d2i_X509_REQ_INFO(X509_REQ_INFO **a, const unsigned char **in, long len); int i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned char **out); extern const ASN1_ITEM X509_REQ_INFO_it;
X509_REQ *X509_REQ_new(void); void X509_REQ_free(X509_REQ *a); X509_REQ *d2i_X509_REQ(X509_REQ **a, const unsigned char **in, long len); int i2d_X509_REQ(X509_REQ *a, unsigned char **out); extern const ASN1_ITEM X509_REQ_it;

X509_ATTRIBUTE *X509_ATTRIBUTE_new(void); void X509_ATTRIBUTE_free(X509_ATTRIBUTE *a); X509_ATTRIBUTE *d2i_X509_ATTRIBUTE(X509_ATTRIBUTE **a, const unsigned char **in, long len); int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned char **out); extern const ASN1_ITEM X509_ATTRIBUTE_it;
X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value);

X509_EXTENSION *X509_EXTENSION_new(void); void X509_EXTENSION_free(X509_EXTENSION *a); X509_EXTENSION *d2i_X509_EXTENSION(X509_EXTENSION **a, const unsigned char **in, long len); int i2d_X509_EXTENSION(X509_EXTENSION *a, unsigned char **out); extern const ASN1_ITEM X509_EXTENSION_it;
X509_EXTENSIONS *d2i_X509_EXTENSIONS(X509_EXTENSIONS **a, const unsigned char **in, long len); int i2d_X509_EXTENSIONS(X509_EXTENSIONS *a, unsigned char **out); extern const ASN1_ITEM X509_EXTENSIONS_it;

X509_NAME_ENTRY *X509_NAME_ENTRY_new(void); void X509_NAME_ENTRY_free(X509_NAME_ENTRY *a); X509_NAME_ENTRY *d2i_X509_NAME_ENTRY(X509_NAME_ENTRY **a, const unsigned char **in, long len); int i2d_X509_NAME_ENTRY(X509_NAME_ENTRY *a, unsigned char **out); extern const ASN1_ITEM X509_NAME_ENTRY_it;

X509_NAME *X509_NAME_new(void); void X509_NAME_free(X509_NAME *a); X509_NAME *d2i_X509_NAME(X509_NAME **a, const unsigned char **in, long len); int i2d_X509_NAME(X509_NAME *a, unsigned char **out); extern const ASN1_ITEM X509_NAME_it;

int X509_NAME_set(X509_NAME **xn, X509_NAME *name);

X509_CINF *X509_CINF_new(void); void X509_CINF_free(X509_CINF *a); X509_CINF *d2i_X509_CINF(X509_CINF **a, const unsigned char **in, long len); int i2d_X509_CINF(X509_CINF *a, unsigned char **out); extern const ASN1_ITEM X509_CINF_it;

X509 *X509_new(void); void X509_free(X509 *a); X509 *d2i_X509(X509 **a, const unsigned char **in, long len); int i2d_X509(X509 *a, unsigned char **out); extern const ASN1_ITEM X509_it;
X509_CERT_AUX *X509_CERT_AUX_new(void); void X509_CERT_AUX_free(X509_CERT_AUX *a); X509_CERT_AUX *d2i_X509_CERT_AUX(X509_CERT_AUX **a, const unsigned char **in, long len); int i2d_X509_CERT_AUX(X509_CERT_AUX *a, unsigned char **out); extern const ASN1_ITEM X509_CERT_AUX_it;

X509_CERT_PAIR *X509_CERT_PAIR_new(void); void X509_CERT_PAIR_free(X509_CERT_PAIR *a); X509_CERT_PAIR *d2i_X509_CERT_PAIR(X509_CERT_PAIR **a, const unsigned char **in, long len); int i2d_X509_CERT_PAIR(X509_CERT_PAIR *a, unsigned char **out); extern const ASN1_ITEM X509_CERT_PAIR_it;

int X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
      CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int X509_set_ex_data(X509 *r, int idx, void *arg);
void *X509_get_ex_data(X509 *r, int idx);
int i2d_X509_AUX(X509 *a,unsigned char **pp);
X509 * d2i_X509_AUX(X509 **a,const unsigned char **pp,long length);

int X509_alias_set1(X509 *x, unsigned char *name, int len);
int X509_keyid_set1(X509 *x, unsigned char *id, int len);
unsigned char * X509_alias_get0(X509 *x, int *len);
unsigned char * X509_keyid_get0(X509 *x, int *len);
int (*X509_TRUST_set_default(int (*trust)(int , X509 *, int)))(int, X509 *, int);
int X509_TRUST_set(int *t, int trust);
int X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj);
int X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj);
void X509_trust_clear(X509 *x);
void X509_reject_clear(X509 *x);

X509_REVOKED *X509_REVOKED_new(void); void X509_REVOKED_free(X509_REVOKED *a); X509_REVOKED *d2i_X509_REVOKED(X509_REVOKED **a, const unsigned char **in, long len); int i2d_X509_REVOKED(X509_REVOKED *a, unsigned char **out); extern const ASN1_ITEM X509_REVOKED_it;
X509_CRL_INFO *X509_CRL_INFO_new(void); void X509_CRL_INFO_free(X509_CRL_INFO *a); X509_CRL_INFO *d2i_X509_CRL_INFO(X509_CRL_INFO **a, const unsigned char **in, long len); int i2d_X509_CRL_INFO(X509_CRL_INFO *a, unsigned char **out); extern const ASN1_ITEM X509_CRL_INFO_it;
X509_CRL *X509_CRL_new(void); void X509_CRL_free(X509_CRL *a); X509_CRL *d2i_X509_CRL(X509_CRL **a, const unsigned char **in, long len); int i2d_X509_CRL(X509_CRL *a, unsigned char **out); extern const ASN1_ITEM X509_CRL_it;

int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);

X509_PKEY * X509_PKEY_new(void );
void X509_PKEY_free(X509_PKEY *a);
int i2d_X509_PKEY(X509_PKEY *a,unsigned char **pp);
X509_PKEY * d2i_X509_PKEY(X509_PKEY **a,const unsigned char **pp,long length);

NETSCAPE_SPKI *NETSCAPE_SPKI_new(void); void NETSCAPE_SPKI_free(NETSCAPE_SPKI *a); NETSCAPE_SPKI *d2i_NETSCAPE_SPKI(NETSCAPE_SPKI **a, const unsigned char **in, long len); int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned char **out); extern const ASN1_ITEM NETSCAPE_SPKI_it;
NETSCAPE_SPKAC *NETSCAPE_SPKAC_new(void); void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC *a); NETSCAPE_SPKAC *d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC **a, const unsigned char **in, long len); int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned char **out); extern const ASN1_ITEM NETSCAPE_SPKAC_it;
NETSCAPE_CERT_SEQUENCE *NETSCAPE_CERT_SEQUENCE_new(void); void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE *a); NETSCAPE_CERT_SEQUENCE *d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE **a, const unsigned char **in, long len); int i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE *a, unsigned char **out); extern const ASN1_ITEM NETSCAPE_CERT_SEQUENCE_it;


X509_INFO * X509_INFO_new(void);
void X509_INFO_free(X509_INFO *a);
char * X509_NAME_oneline(X509_NAME *a,char *buf,int size);

int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
  ASN1_BIT_STRING *signature,char *data,EVP_PKEY *pkey);

int ASN1_digest(i2d_of_void *i2d,const EVP_MD *type,char *data,
  unsigned char *md,unsigned int *len);

int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1,
       X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
       char *data,EVP_PKEY *pkey, const EVP_MD *type);

int ASN1_item_digest(const ASN1_ITEM *it,const EVP_MD *type,void *data,
 unsigned char *md,unsigned int *len);

int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1,
 ASN1_BIT_STRING *signature,void *data,EVP_PKEY *pkey);

int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
 ASN1_BIT_STRING *signature,
 void *data, EVP_PKEY *pkey, const EVP_MD *type);


int X509_set_version(X509 *x,long version);
int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
ASN1_INTEGER * X509_get_serialNumber(X509 *x);
int X509_set_issuer_name(X509 *x, X509_NAME *name);
X509_NAME * X509_get_issuer_name(X509 *a);
int X509_set_subject_name(X509 *x, X509_NAME *name);
X509_NAME * X509_get_subject_name(X509 *a);
int X509_set_notBefore(X509 *x, ASN1_TIME *tm);
int X509_set_notAfter(X509 *x, ASN1_TIME *tm);
int X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
EVP_PKEY * X509_get_pubkey(X509 *x);
ASN1_BIT_STRING * X509_get0_pubkey_bitstr(const X509 *x);
int X509_certificate_type(X509 *x,EVP_PKEY *pubkey );

int X509_REQ_set_version(X509_REQ *x,long version);
int X509_REQ_set_subject_name(X509_REQ *req,X509_NAME *name);
int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
EVP_PKEY * X509_REQ_get_pubkey(X509_REQ *req);
int X509_REQ_extension_nid(int nid);
int * X509_REQ_get_extension_nids(void);
void X509_REQ_set_extension_nids(int *nids);
STACK *X509_REQ_get_extensions(X509_REQ *req);
int X509_REQ_add_extensions_nid(X509_REQ *req, STACK *exts,
    int nid);
int X509_REQ_add_extensions(X509_REQ *req, STACK *exts);
int X509_REQ_get_attr_count(const X509_REQ *req);
int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid,
     int lastpos);
int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj,
     int lastpos);
X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc);
X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc);
int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
   const ASN1_OBJECT *obj, int type,
   const unsigned char *bytes, int len);
int X509_REQ_add1_attr_by_NID(X509_REQ *req,
   int nid, int type,
   const unsigned char *bytes, int len);
int X509_REQ_add1_attr_by_txt(X509_REQ *req,
   const char *attrname, int type,
   const unsigned char *bytes, int len);

int X509_CRL_set_version(X509_CRL *x, long version);
int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);
int X509_CRL_set_lastUpdate(X509_CRL *x, ASN1_TIME *tm);
int X509_CRL_set_nextUpdate(X509_CRL *x, ASN1_TIME *tm);
int X509_CRL_sort(X509_CRL *crl);

int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);

int X509_REQ_check_private_key(X509_REQ *x509,EVP_PKEY *pkey);

int X509_check_private_key(X509 *x509,EVP_PKEY *pkey);

int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);
unsigned long X509_issuer_and_serial_hash(X509 *a);

int X509_issuer_name_cmp(const X509 *a, const X509 *b);
unsigned long X509_issuer_name_hash(X509 *a);

int X509_subject_name_cmp(const X509 *a, const X509 *b);
unsigned long X509_subject_name_hash(X509 *x);

int X509_cmp(const X509 *a, const X509 *b);
int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
unsigned long X509_NAME_hash(X509_NAME *x);

int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);

int X509_print_ex_fp(FILE *bp,X509 *x, unsigned long nmflag, unsigned long cflag);
int X509_print_fp(FILE *bp,X509 *x);
int X509_CRL_print_fp(FILE *bp,X509_CRL *x);
int X509_REQ_print_fp(FILE *bp,X509_REQ *req);
int X509_NAME_print_ex_fp(FILE *fp, X509_NAME *nm, int indent, unsigned long flags);



int X509_NAME_print(BIO *bp, X509_NAME *name, int obase);
int X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent, unsigned long flags);
int X509_print_ex(BIO *bp,X509 *x, unsigned long nmflag, unsigned long cflag);
int X509_print(BIO *bp,X509 *x);
int X509_ocspid_print(BIO *bp,X509 *x);
int X509_CERT_AUX_print(BIO *bp,X509_CERT_AUX *x, int indent);
int X509_CRL_print(BIO *bp,X509_CRL *x);
int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag, unsigned long cflag);
int X509_REQ_print(BIO *bp,X509_REQ *req);


int X509_NAME_entry_count(X509_NAME *name);
int X509_NAME_get_text_by_NID(X509_NAME *name, int nid,
   char *buf,int len);
int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj,
   char *buf,int len);



int X509_NAME_get_index_by_NID(X509_NAME *name,int nid,int lastpos);
int X509_NAME_get_index_by_OBJ(X509_NAME *name,ASN1_OBJECT *obj,
   int lastpos);
X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc);
X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc);
int X509_NAME_add_entry(X509_NAME *name,X509_NAME_ENTRY *ne,
   int loc, int set);
int X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type,
   unsigned char *bytes, int len, int loc, int set);
int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
   unsigned char *bytes, int len, int loc, int set);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
  const char *field, int type, const unsigned char *bytes, int len);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
   int type,unsigned char *bytes, int len);
int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
   const unsigned char *bytes, int len, int loc, int set);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
   ASN1_OBJECT *obj, int type,const unsigned char *bytes,
   int len);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne,
   ASN1_OBJECT *obj);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
   const unsigned char *bytes, int len);
ASN1_OBJECT * X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne);
ASN1_STRING * X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne);

int X509v3_get_ext_count(const STACK *x);
int X509v3_get_ext_by_NID(const STACK *x,
          int nid, int lastpos);
int X509v3_get_ext_by_OBJ(const STACK *x,
          ASN1_OBJECT *obj,int lastpos);
int X509v3_get_ext_by_critical(const STACK *x,
        int crit, int lastpos);
X509_EXTENSION *X509v3_get_ext(const STACK *x, int loc);
X509_EXTENSION *X509v3_delete_ext(STACK *x, int loc);
STACK *X509v3_add_ext(STACK **x,
      X509_EXTENSION *ex, int loc);

int X509_get_ext_count(X509 *x);
int X509_get_ext_by_NID(X509 *x, int nid, int lastpos);
int X509_get_ext_by_OBJ(X509 *x,ASN1_OBJECT *obj,int lastpos);
int X509_get_ext_by_critical(X509 *x, int crit, int lastpos);
X509_EXTENSION *X509_get_ext(X509 *x, int loc);
X509_EXTENSION *X509_delete_ext(X509 *x, int loc);
int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
void * X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx);
int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
       unsigned long flags);

int X509_CRL_get_ext_count(X509_CRL *x);
int X509_CRL_get_ext_by_NID(X509_CRL *x, int nid, int lastpos);
int X509_CRL_get_ext_by_OBJ(X509_CRL *x,ASN1_OBJECT *obj,int lastpos);
int X509_CRL_get_ext_by_critical(X509_CRL *x, int crit, int lastpos);
X509_EXTENSION *X509_CRL_get_ext(X509_CRL *x, int loc);
X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc);
int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
void * X509_CRL_get_ext_d2i(X509_CRL *x, int nid, int *crit, int *idx);
int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
       unsigned long flags);

int X509_REVOKED_get_ext_count(X509_REVOKED *x);
int X509_REVOKED_get_ext_by_NID(X509_REVOKED *x, int nid, int lastpos);
int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED *x,ASN1_OBJECT *obj,int lastpos);
int X509_REVOKED_get_ext_by_critical(X509_REVOKED *x, int crit, int lastpos);
X509_EXTENSION *X509_REVOKED_get_ext(X509_REVOKED *x, int loc);
X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
void * X509_REVOKED_get_ext_d2i(X509_REVOKED *x, int nid, int *crit, int *idx);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
       unsigned long flags);

X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,
   int nid, int crit, ASN1_OCTET_STRING *data);
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
   ASN1_OBJECT *obj,int crit,ASN1_OCTET_STRING *data);
int X509_EXTENSION_set_object(X509_EXTENSION *ex,ASN1_OBJECT *obj);
int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
int X509_EXTENSION_set_data(X509_EXTENSION *ex,
   ASN1_OCTET_STRING *data);
ASN1_OBJECT * X509_EXTENSION_get_object(X509_EXTENSION *ex);
ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne);
int X509_EXTENSION_get_critical(X509_EXTENSION *ex);

int X509at_get_attr_count(const STACK *x);
int X509at_get_attr_by_NID(const STACK *x, int nid,
     int lastpos);
int X509at_get_attr_by_OBJ(const STACK *sk, ASN1_OBJECT *obj,
     int lastpos);
X509_ATTRIBUTE *X509at_get_attr(const STACK *x, int loc);
X509_ATTRIBUTE *X509at_delete_attr(STACK *x, int loc);
STACK *X509at_add1_attr(STACK **x,
      X509_ATTRIBUTE *attr);
STACK *X509at_add1_attr_by_OBJ(STACK **x,
   const ASN1_OBJECT *obj, int type,
   const unsigned char *bytes, int len);
STACK *X509at_add1_attr_by_NID(STACK **x,
   int nid, int type,
   const unsigned char *bytes, int len);
STACK *X509at_add1_attr_by_txt(STACK **x,
   const char *attrname, int type,
   const unsigned char *bytes, int len);
void *X509at_get0_data_by_OBJ(STACK *x,
    ASN1_OBJECT *obj, int lastpos, int type);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
      int atrtype, const void *data, int len);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
      const ASN1_OBJECT *obj, int atrtype, const void *data, int len);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
  const char *atrname, int type, const unsigned char *bytes, int len);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len);
void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx,
     int atrtype, void *data);
int X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr);
ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);

int EVP_PKEY_get_attr_count(const EVP_PKEY *key);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid,
     int lastpos);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, ASN1_OBJECT *obj,
     int lastpos);
X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *key, int loc);
X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
   const ASN1_OBJECT *obj, int type,
   const unsigned char *bytes, int len);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
   int nid, int type,
   const unsigned char *bytes, int len);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
   const char *attrname, int type,
   const unsigned char *bytes, int len);

int X509_verify_cert(X509_STORE_CTX *ctx);


X509 *X509_find_by_issuer_and_serial(STACK *sk,X509_NAME *name,
         ASN1_INTEGER *serial);
X509 *X509_find_by_subject(STACK *sk,X509_NAME *name);

PBEPARAM *PBEPARAM_new(void); void PBEPARAM_free(PBEPARAM *a); PBEPARAM *d2i_PBEPARAM(PBEPARAM **a, const unsigned char **in, long len); int i2d_PBEPARAM(PBEPARAM *a, unsigned char **out); extern const ASN1_ITEM PBEPARAM_it;
PBE2PARAM *PBE2PARAM_new(void); void PBE2PARAM_free(PBE2PARAM *a); PBE2PARAM *d2i_PBE2PARAM(PBE2PARAM **a, const unsigned char **in, long len); int i2d_PBE2PARAM(PBE2PARAM *a, unsigned char **out); extern const ASN1_ITEM PBE2PARAM_it;
PBKDF2PARAM *PBKDF2PARAM_new(void); void PBKDF2PARAM_free(PBKDF2PARAM *a); PBKDF2PARAM *d2i_PBKDF2PARAM(PBKDF2PARAM **a, const unsigned char **in, long len); int i2d_PBKDF2PARAM(PBKDF2PARAM *a, unsigned char **out); extern const ASN1_ITEM PBKDF2PARAM_it;

X509_ALGOR *PKCS5_pbe_set(int alg, int iter, unsigned char *salt, int saltlen);
X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
      unsigned char *salt, int saltlen);



PKCS8_PRIV_KEY_INFO *PKCS8_PRIV_KEY_INFO_new(void); void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO *a); PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO **a, const unsigned char **in, long len); int i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO *a, unsigned char **out); extern const ASN1_ITEM PKCS8_PRIV_KEY_INFO_it;

EVP_PKEY *EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO *p8);
PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey);
PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8_broken(EVP_PKEY *pkey, int broken);
PKCS8_PRIV_KEY_INFO *PKCS8_set_broken(PKCS8_PRIV_KEY_INFO *p8, int broken);

int X509_check_trust(X509 *x, int id, int flags);
int X509_TRUST_get_count(void);
X509_TRUST * X509_TRUST_get0(int idx);
int X509_TRUST_get_by_id(int id);
int X509_TRUST_add(int id, int flags, int (*ck)(X509_TRUST *, X509 *, int),
     char *name, int arg1, void *arg2);
void X509_TRUST_cleanup(void);
int X509_TRUST_get_flags(X509_TRUST *xp);
char *X509_TRUST_get0_name(X509_TRUST *xp);
int X509_TRUST_get_trust(X509_TRUST *xp);





void ERR_load_X509_strings(void);
# 184 "/usr/include/openssl/ssl.h" 2 3 4





# 1 "/usr/include/openssl/pem.h" 1 3 4
# 62 "/usr/include/openssl/pem.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 63 "/usr/include/openssl/pem.h" 2 3 4
# 71 "/usr/include/openssl/pem.h" 3 4
# 1 "/usr/include/openssl/pem2.h" 1 3 4
# 72 "/usr/include/openssl/pem.h" 2 3 4
# 141 "/usr/include/openssl/pem.h" 3 4
typedef struct PEM_Encode_Seal_st
 {
 EVP_ENCODE_CTX encode;
 EVP_MD_CTX md;
 EVP_CIPHER_CTX cipher;
 } PEM_ENCODE_SEAL_CTX;







typedef struct pem_recip_st
 {
 char *name;
 X509_NAME *dn;

 int cipher;
 int key_enc;

 } PEM_USER;

typedef struct pem_ctx_st
 {
 int type;

 struct {
  int version;
  int mode;
  } proc_type;

 char *domain;

 struct {
  int cipher;


  } DEK_info;

 PEM_USER *originator;

 int num_recipient;
 PEM_USER **recipient;


 STACK *x509_chain;



 EVP_MD *md;

 int md_enc;
 int md_len;
 char *md_data;

 EVP_CIPHER *dec;
 int key_len;
 unsigned char *key;




 int data_enc;
 int data_len;
 unsigned char *data;
 } PEM_CTX;
# 565 "/usr/include/openssl/pem.h" 3 4
typedef int pem_password_cb(char *buf, int size, int rwflag, void *userdata);





int PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher);
int PEM_do_header (EVP_CIPHER_INFO *cipher, unsigned char *data,long *len,
 pem_password_cb *callback,void *u);


int PEM_read_bio(BIO *bp, char **name, char **header,
  unsigned char **data,long *len);
int PEM_write_bio(BIO *bp,const char *name,char *hdr,unsigned char *data,
  long len);
int PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm, const char *name, BIO *bp,
      pem_password_cb *cb, void *u);
void * PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp,
     void **x, pem_password_cb *cb, void *u);







int PEM_ASN1_write_bio(i2d_of_void *i2d,const char *name,BIO *bp,char *x,
      const EVP_CIPHER *enc,unsigned char *kstr,int klen,
      pem_password_cb *cb, void *u);







STACK * PEM_X509_INFO_read_bio(BIO *bp, STACK *sk, pem_password_cb *cb, void *u);
int PEM_X509_INFO_write_bio(BIO *bp,X509_INFO *xi, EVP_CIPHER *enc,
  unsigned char *kstr, int klen, pem_password_cb *cd, void *u);



int PEM_read(FILE *fp, char **name, char **header,
  unsigned char **data,long *len);
int PEM_write(FILE *fp,char *name,char *hdr,unsigned char *data,long len);
void * PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,
        pem_password_cb *cb, void *u);
int PEM_ASN1_write(i2d_of_void *i2d,const char *name,FILE *fp,
         char *x,const EVP_CIPHER *enc,unsigned char *kstr,
         int klen,pem_password_cb *callback, void *u);
STACK * PEM_X509_INFO_read(FILE *fp, STACK *sk,
 pem_password_cb *cb, void *u);


int PEM_SealInit(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type,
  EVP_MD *md_type, unsigned char **ek, int *ekl,
  unsigned char *iv, EVP_PKEY **pubk, int npubk);
void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *out, int *outl,
  unsigned char *in, int inl);
int PEM_SealFinal(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *sig,int *sigl,
  unsigned char *out, int *outl, EVP_PKEY *priv);

void PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type);
void PEM_SignUpdate(EVP_MD_CTX *ctx,unsigned char *d,unsigned int cnt);
int PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
  unsigned int *siglen, EVP_PKEY *pkey);

int PEM_def_callback(char *buf, int num, int w, void *key);
void PEM_proc_type(char *buf, int type);
void PEM_dek_info(char *buf, const char *type, int len, char *str);



# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 639 "/usr/include/openssl/pem.h" 2 3 4

X509 *PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u); X509 *PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u); int PEM_write_bio_X509(BIO *bp, X509 *x); int PEM_write_X509(FILE *fp, X509 *x);

X509 *PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u); X509 *PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u); int PEM_write_bio_X509_AUX(BIO *bp, X509 *x); int PEM_write_X509_AUX(FILE *fp, X509 *x);

X509_CERT_PAIR *PEM_read_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u); X509_CERT_PAIR *PEM_read_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u); int PEM_write_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR *x); int PEM_write_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR *x);

X509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x, pem_password_cb *cb, void *u); X509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ **x, pem_password_cb *cb, void *u); int PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x); int PEM_write_X509_REQ(FILE *fp, X509_REQ *x);
int PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x); int PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);

X509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x, pem_password_cb *cb, void *u); X509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL **x, pem_password_cb *cb, void *u); int PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x); int PEM_write_X509_CRL(FILE *fp, X509_CRL *x);

PKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u); PKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u); int PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x); int PEM_write_PKCS7(FILE *fp, PKCS7 *x);

NETSCAPE_CERT_SEQUENCE *PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u); NETSCAPE_CERT_SEQUENCE *PEM_read_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u); int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE *x); int PEM_write_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE *x);

X509_SIG *PEM_read_bio_PKCS8(BIO *bp, X509_SIG **x, pem_password_cb *cb, void *u); X509_SIG *PEM_read_PKCS8(FILE *fp, X509_SIG **x, pem_password_cb *cb, void *u); int PEM_write_bio_PKCS8(BIO *bp, X509_SIG *x); int PEM_write_PKCS8(FILE *fp, X509_SIG *x);

PKCS8_PRIV_KEY_INFO *PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u); PKCS8_PRIV_KEY_INFO *PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u); int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x); int PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x);



RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u); RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u);

RSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u); RSA *PEM_read_RSAPublicKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_RSAPublicKey(BIO *bp, const RSA *x); int PEM_write_RSAPublicKey(FILE *fp, const RSA *x);
RSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x, pem_password_cb *cb, void *u); RSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x); int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);





DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x, pem_password_cb *cb, void *u); DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u);

DSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x, pem_password_cb *cb, void *u); DSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x); int PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);

DSA *PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u); DSA *PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u); int PEM_write_bio_DSAparams(BIO *bp, const DSA *x); int PEM_write_DSAparams(FILE *fp, const DSA *x);




EC_GROUP *PEM_read_bio_ECPKParameters(BIO *bp, EC_GROUP **x, pem_password_cb *cb, void *u); EC_GROUP *PEM_read_ECPKParameters(FILE *fp, EC_GROUP **x, pem_password_cb *cb, void *u); int PEM_write_bio_ECPKParameters(BIO *bp, const EC_GROUP *x); int PEM_write_ECPKParameters(FILE *fp, const EC_GROUP *x);
EC_KEY *PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u); EC_KEY *PEM_read_ECPrivateKey(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u); int PEM_write_bio_ECPrivateKey(BIO *bp, EC_KEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_ECPrivateKey(FILE *fp, EC_KEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
EC_KEY *PEM_read_bio_EC_PUBKEY(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u); EC_KEY *PEM_read_EC_PUBKEY(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u); int PEM_write_bio_EC_PUBKEY(BIO *bp, EC_KEY *x); int PEM_write_EC_PUBKEY(FILE *fp, EC_KEY *x);




DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u); DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u); int PEM_write_bio_DHparams(BIO *bp, const DH *x); int PEM_write_DHparams(FILE *fp, const DH *x);



EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u); int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u);

EVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u); EVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u); int PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x); int PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);

int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);
int PEM_write_bio_PKCS8PrivateKey(BIO *, EVP_PKEY *, const EVP_CIPHER *,
                                  char *, int, pem_password_cb *, void *);
int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);
int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);
EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);

int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);
int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);
int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
      char *kstr, int klen,
      pem_password_cb *cb, void *u);

EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);

int PEM_write_PKCS8PrivateKey(FILE *fp,EVP_PKEY *x,const EVP_CIPHER *enc,
         char *kstr,int klen, pem_password_cb *cd, void *u);
# 729 "/usr/include/openssl/pem.h" 3 4
void ERR_load_PEM_strings(void);
# 190 "/usr/include/openssl/ssl.h" 2 3 4
# 1 "/usr/include/openssl/hmac.h" 1 3 4
# 61 "/usr/include/openssl/hmac.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 62 "/usr/include/openssl/hmac.h" 2 3 4
# 75 "/usr/include/openssl/hmac.h" 3 4
typedef struct hmac_ctx_st
 {
 const EVP_MD *md;
 EVP_MD_CTX md_ctx;
 EVP_MD_CTX i_ctx;
 EVP_MD_CTX o_ctx;
 unsigned int key_length;
 unsigned char key[128];
 } HMAC_CTX;




void HMAC_CTX_init(HMAC_CTX *ctx);
void HMAC_CTX_cleanup(HMAC_CTX *ctx);



void HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
        const EVP_MD *md);
void HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
    const EVP_MD *md, ENGINE *impl);
void HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len);
void HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len);
unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
      const unsigned char *d, size_t n, unsigned char *md,
      unsigned int *md_len);

void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags);
# 191 "/usr/include/openssl/ssl.h" 2 3 4

# 1 "/usr/include/openssl/kssl.h" 1 3 4
# 66 "/usr/include/openssl/kssl.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 67 "/usr/include/openssl/kssl.h" 2 3 4
# 193 "/usr/include/openssl/ssl.h" 2 3 4

# 1 "/usr/include/openssl/symhacks.h" 1 3 4
# 195 "/usr/include/openssl/ssl.h" 2 3 4
# 346 "/usr/include/openssl/ssl.h" 3 4
typedef struct ssl_st *ssl_crock_st;


typedef struct ssl_cipher_st
 {
 int valid;
 const char *name;
 unsigned long id;
 unsigned long algorithms;
 unsigned long algo_strength;
 unsigned long algorithm2;
 int strength_bits;
 int alg_bits;
 unsigned long mask;
 unsigned long mask_strength;
 } SSL_CIPHER;




typedef struct ssl_method_st
 {
 int version;
 int (*ssl_new)(SSL *s);
 void (*ssl_clear)(SSL *s);
 void (*ssl_free)(SSL *s);
 int (*ssl_accept)(SSL *s);
 int (*ssl_connect)(SSL *s);
 int (*ssl_read)(SSL *s,void *buf,int len);
 int (*ssl_peek)(SSL *s,void *buf,int len);
 int (*ssl_write)(SSL *s,const void *buf,int len);
 int (*ssl_shutdown)(SSL *s);
 int (*ssl_renegotiate)(SSL *s);
 int (*ssl_renegotiate_check)(SSL *s);
 long (*ssl_get_message)(SSL *s, int st1, int stn, int mt, long
  max, int *ok);
 int (*ssl_read_bytes)(SSL *s, int type, unsigned char *buf, int len,
  int peek);
 int (*ssl_write_bytes)(SSL *s, int type, const void *buf_, int len);
 int (*ssl_dispatch_alert)(SSL *s);
 long (*ssl_ctrl)(SSL *s,int cmd,long larg,void *parg);
 long (*ssl_ctx_ctrl)(SSL_CTX *ctx,int cmd,long larg,void *parg);
 SSL_CIPHER *(*get_cipher_by_char)(const unsigned char *ptr);
 int (*put_cipher_by_char)(const SSL_CIPHER *cipher,unsigned char *ptr);
 int (*ssl_pending)(const SSL *s);
 int (*num_ciphers)(void);
 SSL_CIPHER *(*get_cipher)(unsigned ncipher);
 struct ssl_method_st *(*get_ssl_method)(int version);
 long (*get_timeout)(void);
 struct ssl3_enc_method *ssl3_enc;
 int (*ssl_version)(void);
 long (*ssl_callback_ctrl)(SSL *s, int cb_id, void (*fp)(void));
 long (*ssl_ctx_callback_ctrl)(SSL_CTX *s, int cb_id, void (*fp)(void));
 } SSL_METHOD;
# 420 "/usr/include/openssl/ssl.h" 3 4
typedef struct ssl_session_st
 {
 int ssl_version;



 unsigned int key_arg_length;
 unsigned char key_arg[8];
 int master_key_length;
 unsigned char master_key[48];

 unsigned int session_id_length;
 unsigned char session_id[32];



 unsigned int sid_ctx_length;
 unsigned char sid_ctx[32];






 int not_resumable;


 struct sess_cert_st *sess_cert;





 X509 *peer;


 long verify_result;

 int references;
 long timeout;
 long time;

 int compress_meth;

 SSL_CIPHER *cipher;
 unsigned long cipher_id;



 STACK *ciphers;

 CRYPTO_EX_DATA ex_data;



 struct ssl_session_st *prev,*next;

 char *tlsext_hostname;

 unsigned char *tlsext_tick;
 size_t tlsext_ticklen;
 long tlsext_tick_lifetime_hint;

 } SSL_SESSION;
# 583 "/usr/include/openssl/ssl.h" 3 4
void SSL_CTX_set_msg_callback(SSL_CTX *ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
void SSL_set_msg_callback(SSL *ssl, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
# 611 "/usr/include/openssl/ssl.h" 3 4
typedef int (*GEN_SESSION_CB)(const SSL *ssl, unsigned char *id,
    unsigned int *id_len);

typedef struct ssl_comp_st
 {
 int id;
 const char *name;

 COMP_METHOD *method;



 } SSL_COMP;



struct ssl_ctx_st
 {
 SSL_METHOD *method;

 STACK *cipher_list;

 STACK *cipher_list_by_id;

 struct x509_store_st *cert_store;
 struct lhash_st *sessions;


 unsigned long session_cache_size;
 struct ssl_session_st *session_cache_head;
 struct ssl_session_st *session_cache_tail;






 int session_cache_mode;




 long session_timeout;
# 663 "/usr/include/openssl/ssl.h" 3 4
 int (*new_session_cb)(struct ssl_st *ssl,SSL_SESSION *sess);
 void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess);
 SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl,
  unsigned char *data,int len,int *copy);

 struct
  {
  int sess_connect;
  int sess_connect_renegotiate;
  int sess_connect_good;
  int sess_accept;
  int sess_accept_renegotiate;
  int sess_accept_good;
  int sess_miss;
  int sess_timeout;
  int sess_cache_full;
  int sess_hit;
  int sess_cb_hit;





  } stats;

 int references;


 int (*app_verify_callback)(X509_STORE_CTX *, void *);
 void *app_verify_arg;




 pem_password_cb *default_passwd_callback;


 void *default_passwd_callback_userdata;


 int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey);


    int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie,
        unsigned int *cookie_len);


    int (*app_verify_cookie_cb)(SSL *ssl, unsigned char *cookie,
        unsigned int cookie_len);

 CRYPTO_EX_DATA ex_data;

 const EVP_MD *rsa_md5;
 const EVP_MD *md5;
 const EVP_MD *sha1;

 STACK *extra_certs;
 STACK *comp_methods;




 void (*info_callback)(const SSL *ssl,int type,int val);


 STACK *client_CA;




 unsigned long options;
 unsigned long mode;
 long max_cert_list;

 struct cert_st *cert;
 int read_ahead;


 void (*msg_callback)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg);
 void *msg_callback_arg;

 int verify_mode;
 unsigned int sid_ctx_length;
 unsigned char sid_ctx[32];
 int (*default_verify_callback)(int ok,X509_STORE_CTX *ctx);


 GEN_SESSION_CB generate_session_id;

 X509_VERIFY_PARAM *param;






 int quiet_shutdown;




 ENGINE *client_cert_engine;




 int (*tlsext_servername_callback)(SSL*, int *, void *);
 void *tlsext_servername_arg;

 unsigned char tlsext_tick_key_name[16];
 unsigned char tlsext_tick_hmac_key[16];
 unsigned char tlsext_tick_aes_key[16];

 int (*tlsext_ticket_key_cb)(SSL *ssl,
     unsigned char *name, unsigned char *iv,
     EVP_CIPHER_CTX *ectx,
     HMAC_CTX *hctx, int enc);



 int (*tlsext_status_cb)(SSL *ssl, void *arg);
 void *tlsext_status_arg;


 };
# 800 "/usr/include/openssl/ssl.h" 3 4
  struct lhash_st *SSL_CTX_sessions(SSL_CTX *ctx);
# 826 "/usr/include/openssl/ssl.h" 3 4
void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int (*new_session_cb)(struct ssl_st *ssl,SSL_SESSION *sess));
int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx))(struct ssl_st *ssl, SSL_SESSION *sess);
void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess));
void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx))(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx, SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl, unsigned char *data,int len,int *copy));
SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(struct ssl_st *ssl, unsigned char *Data, int len, int *copy);
void SSL_CTX_set_info_callback(SSL_CTX *ctx, void (*cb)(const SSL *ssl,int type,int val));
void (*SSL_CTX_get_info_callback(SSL_CTX *ctx))(const SSL *ssl,int type,int val);
void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));
int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);

int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);

void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx, int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len));
void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx, int (*app_verify_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int cookie_len));
# 853 "/usr/include/openssl/ssl.h" 3 4
struct ssl_st
 {



 int version;
 int type;

 SSL_METHOD *method;






 BIO *rbio;
 BIO *wbio;
 BIO *bbio;
# 881 "/usr/include/openssl/ssl.h" 3 4
 int rwstate;


 int in_handshake;
 int (*handshake_func)(SSL *);
# 895 "/usr/include/openssl/ssl.h" 3 4
 int server;

 int new_session;





 int quiet_shutdown;
 int shutdown;

 int state;
 int rstate;

 BUF_MEM *init_buf;
 void *init_msg;
 int init_num;
 int init_off;


 unsigned char *packet;
 unsigned int packet_length;

 struct ssl2_state_st *s2;
 struct ssl3_state_st *s3;
 struct dtls1_state_st *d1;

 int read_ahead;



 void (*msg_callback)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg);
 void *msg_callback_arg;

 int hit;

 X509_VERIFY_PARAM *param;







 STACK *cipher_list;
 STACK *cipher_list_by_id;




 EVP_CIPHER_CTX *enc_read_ctx;
 const EVP_MD *read_hash;

 COMP_CTX *expand;




 EVP_CIPHER_CTX *enc_write_ctx;
 const EVP_MD *write_hash;

 COMP_CTX *compress;
# 965 "/usr/include/openssl/ssl.h" 3 4
 struct cert_st *cert;



 unsigned int sid_ctx_length;
 unsigned char sid_ctx[32];


 SSL_SESSION *session;


 GEN_SESSION_CB generate_session_id;


 int verify_mode;

 int (*verify_callback)(int ok,X509_STORE_CTX *ctx);

 void (*info_callback)(const SSL *ssl,int type,int val);

 int error;
 int error_code;





 SSL_CTX *ctx;


 int debug;


 long verify_result;
 CRYPTO_EX_DATA ex_data;


 STACK *client_CA;

 int references;
 unsigned long options;
 unsigned long mode;
 long max_cert_list;
 int first_packet;
 int client_version;



 void (*tlsext_debug_cb)(SSL *s, int client_server, int type,
     unsigned char *data, int len,
     void *arg);
 void *tlsext_debug_arg;
 char *tlsext_hostname;
 int servername_done;






 int tlsext_status_type;

 int tlsext_status_expected;

 STACK *tlsext_ocsp_ids;
 X509_EXTENSIONS *tlsext_ocsp_exts;

 unsigned char *tlsext_ocsp_resp;
 int tlsext_ocsp_resplen;


 int tlsext_ticket_expected;
 SSL_CTX * initial_ctx;




 };





# 1 "/usr/include/openssl/ssl2.h" 1 3 4
# 158 "/usr/include/openssl/ssl2.h" 3 4
typedef struct ssl2_state_st
 {
 int three_byte_header;
 int clear_text;
 int escape;
 int ssl2_rollback;



 unsigned int wnum;
 int wpend_tot;
 const unsigned char *wpend_buf;

 int wpend_off;
 int wpend_len;
 int wpend_ret;


 int rbuf_left;
 int rbuf_offs;
 unsigned char *rbuf;
 unsigned char *wbuf;

 unsigned char *write_ptr;


 unsigned int padding;
 unsigned int rlength;
 int ract_data_length;
 unsigned int wlength;
 int wact_data_length;
 unsigned char *ract_data;
 unsigned char *wact_data;
 unsigned char *mac_data;

 unsigned char *read_key;
 unsigned char *write_key;


 unsigned int challenge_length;
 unsigned char challenge[32];
 unsigned int conn_id_length;
 unsigned char conn_id[16];
 unsigned int key_material_length;
 unsigned char key_material[24*2];

 unsigned long read_sequence;
 unsigned long write_sequence;

 struct {
  unsigned int conn_id_length;
  unsigned int cert_type;
  unsigned int cert_length;
  unsigned int csl;
  unsigned int clear;
  unsigned int enc;
  unsigned char ccl[32];
  unsigned int cipher_spec_length;
  unsigned int session_id_length;
  unsigned int clen;
  unsigned int rlen;
  } tmp;
 } SSL2_STATE;
# 1049 "/usr/include/openssl/ssl.h" 2 3 4
# 1 "/usr/include/openssl/ssl3.h" 1 3 4
# 125 "/usr/include/openssl/ssl3.h" 3 4
# 1 "/usr/include/openssl/ssl.h" 1 3 4
# 126 "/usr/include/openssl/ssl3.h" 2 3 4
# 1 "/usr/include/openssl/pq_compat.h" 1 3 4
# 63 "/usr/include/openssl/pq_compat.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 64 "/usr/include/openssl/pq_compat.h" 2 3 4
# 127 "/usr/include/openssl/ssl3.h" 2 3 4
# 294 "/usr/include/openssl/ssl3.h" 3 4
typedef struct ssl3_record_st
 {
       int type;
       unsigned int length;
       unsigned int off;
       unsigned char *data;
       unsigned char *input;
       unsigned char *comp;
        unsigned long epoch;
        unsigned long long seq_num;
 } SSL3_RECORD;

typedef struct ssl3_buffer_st
 {
 unsigned char *buf;

 size_t len;
 int offset;
 int left;
 } SSL3_BUFFER;
# 334 "/usr/include/openssl/ssl3.h" 3 4
typedef struct ssl3_state_st
 {
 long flags;
 int delay_buf_pop_ret;

 unsigned char read_sequence[8];
 unsigned char read_mac_secret[64];
 unsigned char write_sequence[8];
 unsigned char write_mac_secret[64];

 unsigned char server_random[32];
 unsigned char client_random[32];


 int need_empty_fragments;
 int empty_fragment_done;

 SSL3_BUFFER rbuf;
 SSL3_BUFFER wbuf;

 SSL3_RECORD rrec;
 SSL3_RECORD wrec;



 unsigned char alert_fragment[2];
 unsigned int alert_fragment_len;
 unsigned char handshake_fragment[4];
 unsigned int handshake_fragment_len;


 unsigned int wnum;
 int wpend_tot;
 int wpend_type;
 int wpend_ret;
 const unsigned char *wpend_buf;


 EVP_MD_CTX finish_dgst1;
 EVP_MD_CTX finish_dgst2;



 int change_cipher_spec;

 int warn_alert;
 int fatal_alert;


 int alert_dispatch;
 unsigned char send_alert[2];



 int renegotiate;
 int total_renegotiations;
 int num_renegotiations;

 int in_read_app_data;

 struct {

  unsigned char cert_verify_md[64*2];


  unsigned char finish_md[64*2];
  int finish_md_len;
  unsigned char peer_finish_md[64*2];
  int peer_finish_md_len;

  unsigned long message_size;
  int message_type;


  SSL_CIPHER *new_cipher;

  DH *dh;



  EC_KEY *ecdh;



  int next_state;

  int reuse_message;


  int cert_req;
  int ctype_num;
  char ctype[7];
  STACK *ca_names;

  int use_rsa_tmp;

  int key_block_length;
  unsigned char *key_block;

  const EVP_CIPHER *new_sym_enc;
  const EVP_MD *new_hash;

  const SSL_COMP *new_compression;



  int cert_request;
  } tmp;

 } SSL3_STATE;
# 1050 "/usr/include/openssl/ssl.h" 2 3 4
# 1 "/usr/include/openssl/tls1.h" 1 3 4
# 127 "/usr/include/openssl/tls1.h" 3 4
const char *SSL_get_servername(const SSL *s, const int type) ;
int SSL_get_servername_type(const SSL *s) ;
# 1051 "/usr/include/openssl/ssl.h" 2 3 4
# 1 "/usr/include/openssl/dtls1.h" 1 3 4
# 64 "/usr/include/openssl/dtls1.h" 3 4
# 1 "/usr/include/openssl/pqueue.h" 1 3 4
# 69 "/usr/include/openssl/pqueue.h" 3 4
typedef struct _pqueue *pqueue;

typedef struct _pitem
 {
 unsigned long long priority;
 void *data;
 struct _pitem *next;
 } pitem;

typedef struct _pitem *piterator;

pitem *pitem_new(unsigned long long priority, void *data);
void pitem_free(pitem *item);

pqueue pqueue_new(void);
void pqueue_free(pqueue pq);

pitem *pqueue_insert(pqueue pq, pitem *item);
pitem *pqueue_peek(pqueue pq);
pitem *pqueue_pop(pqueue pq);
pitem *pqueue_find(pqueue pq, unsigned long long priority);
pitem *pqueue_iterator(pqueue pq);
pitem *pqueue_next(piterator *iter);

void pqueue_print(pqueue pq);
# 65 "/usr/include/openssl/dtls1.h" 2 3 4
# 97 "/usr/include/openssl/dtls1.h" 3 4
typedef struct dtls1_bitmap_st
 {
 unsigned long long map;
 unsigned long length;
 unsigned long long max_seq_num;
 } DTLS1_BITMAP;

struct hm_header_st
 {
 unsigned char type;
 unsigned long msg_len;
 unsigned short seq;
 unsigned long frag_off;
 unsigned long frag_len;
 unsigned int is_ccs;
 };

struct ccs_header_st
 {
 unsigned char type;
 unsigned short seq;
 };

struct dtls1_timeout_st
 {

 unsigned int read_timeouts;


 unsigned int write_timeouts;


 unsigned int num_alerts;
 };

typedef struct record_pqueue_st
 {
 unsigned short epoch;
 pqueue q;
 } record_pqueue;

typedef struct hm_fragment_st
 {
 struct hm_header_st msg_header;
 unsigned char *fragment;
 } hm_fragment;

typedef struct dtls1_state_st
 {
 unsigned int send_cookie;
 unsigned char cookie[32];
 unsigned char rcvd_cookie[32];
 unsigned int cookie_len;






 unsigned short r_epoch;
 unsigned short w_epoch;


 DTLS1_BITMAP bitmap;


 DTLS1_BITMAP next_bitmap;


 unsigned short handshake_write_seq;
 unsigned short next_handshake_write_seq;

 unsigned short handshake_read_seq;


 record_pqueue unprocessed_rcds;
 record_pqueue processed_rcds;


 pqueue buffered_messages;


 pqueue sent_messages;

 unsigned int mtu;

 struct hm_header_st w_msg_hdr;
 struct hm_header_st r_msg_hdr;

 struct dtls1_timeout_st timeout;



 unsigned char alert_fragment[2];
 unsigned int alert_fragment_len;
 unsigned char handshake_fragment[12];
 unsigned int handshake_fragment_len;

 unsigned int retransmitting;

 } DTLS1_STATE;

typedef struct dtls1_record_data_st
 {
 unsigned char *packet;
 unsigned int packet_length;
 SSL3_BUFFER rbuf;
 SSL3_RECORD rrec;
 } DTLS1_RECORD_DATA;
# 1052 "/usr/include/openssl/ssl.h" 2 3 4
# 1 "/usr/include/openssl/ssl23.h" 1 3 4
# 1053 "/usr/include/openssl/ssl.h" 2 3 4
# 1113 "/usr/include/openssl/ssl.h" 3 4
size_t SSL_get_finished(const SSL *s, void *buf, size_t count);
size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count);
# 1303 "/usr/include/openssl/ssl.h" 3 4
BIO_METHOD *BIO_f_ssl(void);
BIO *BIO_new_ssl(SSL_CTX *ctx,int client);
BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
int BIO_ssl_copy_session_id(BIO *to,BIO *from);
void BIO_ssl_shutdown(BIO *ssl_bio);



int SSL_CTX_set_cipher_list(SSL_CTX *,const char *str);
SSL_CTX *SSL_CTX_new(SSL_METHOD *meth);
void SSL_CTX_free(SSL_CTX *);
long SSL_CTX_set_timeout(SSL_CTX *ctx,long t);
long SSL_CTX_get_timeout(const SSL_CTX *ctx);
X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *);
void SSL_CTX_set_cert_store(SSL_CTX *,X509_STORE *);
int SSL_want(const SSL *s);
int SSL_clear(SSL *s);

void SSL_CTX_flush_sessions(SSL_CTX *ctx,long tm);

SSL_CIPHER *SSL_get_current_cipher(const SSL *s);
int SSL_CIPHER_get_bits(const SSL_CIPHER *c,int *alg_bits);
char * SSL_CIPHER_get_version(const SSL_CIPHER *c);
const char * SSL_CIPHER_get_name(const SSL_CIPHER *c);

int SSL_get_fd(const SSL *s);
int SSL_get_rfd(const SSL *s);
int SSL_get_wfd(const SSL *s);
const char * SSL_get_cipher_list(const SSL *s,int n);
char * SSL_get_shared_ciphers(const SSL *s, char *buf, int len);
int SSL_get_read_ahead(const SSL * s);
int SSL_pending(const SSL *s);

int SSL_set_fd(SSL *s, int fd);
int SSL_set_rfd(SSL *s, int fd);
int SSL_set_wfd(SSL *s, int fd);


void SSL_set_bio(SSL *s, BIO *rbio,BIO *wbio);
BIO * SSL_get_rbio(const SSL *s);
BIO * SSL_get_wbio(const SSL *s);

int SSL_set_cipher_list(SSL *s, const char *str);
void SSL_set_read_ahead(SSL *s, int yes);
int SSL_get_verify_mode(const SSL *s);
int SSL_get_verify_depth(const SSL *s);
int (*SSL_get_verify_callback(const SSL *s))(int,X509_STORE_CTX *);
void SSL_set_verify(SSL *s, int mode,
         int (*callback)(int ok,X509_STORE_CTX *ctx));
void SSL_set_verify_depth(SSL *s, int depth);

int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);

int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);
int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
int SSL_use_PrivateKey_ASN1(int pk,SSL *ssl, const unsigned char *d, long len);
int SSL_use_certificate(SSL *ssl, X509 *x);
int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);


int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
int SSL_use_certificate_file(SSL *ssl, const char *file, int type);
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);
int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);
int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);
int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
STACK *SSL_load_client_CA_file(const char *file);
int SSL_add_file_cert_subjects_to_stack(STACK *stackCAs,
         const char *file);


int SSL_add_dir_cert_subjects_to_stack(STACK *stackCAs,
        const char *dir);





void SSL_load_error_strings(void );
const char *SSL_state_string(const SSL *s);
const char *SSL_rstate_string(const SSL *s);
const char *SSL_state_string_long(const SSL *s);
const char *SSL_rstate_string_long(const SSL *s);
long SSL_SESSION_get_time(const SSL_SESSION *s);
long SSL_SESSION_set_time(SSL_SESSION *s, long t);
long SSL_SESSION_get_timeout(const SSL_SESSION *s);
long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
void SSL_copy_session_id(SSL *to,const SSL *from);

SSL_SESSION *SSL_SESSION_new(void);
unsigned long SSL_SESSION_hash(const SSL_SESSION *a);
int SSL_SESSION_cmp(const SSL_SESSION *a,const SSL_SESSION *b);
const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s, unsigned int *len);

int SSL_SESSION_print_fp(FILE *fp,const SSL_SESSION *ses);


int SSL_SESSION_print(BIO *fp,const SSL_SESSION *ses);

void SSL_SESSION_free(SSL_SESSION *ses);
int i2d_SSL_SESSION(SSL_SESSION *in,unsigned char **pp);
int SSL_set_session(SSL *to, SSL_SESSION *session);
int SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c);
int SSL_CTX_remove_session(SSL_CTX *,SSL_SESSION *c);
int SSL_CTX_set_generate_session_id(SSL_CTX *, GEN_SESSION_CB);
int SSL_set_generate_session_id(SSL *, GEN_SESSION_CB);
int SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,
     unsigned int id_len);
SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a,const unsigned char **pp,
        long length);


X509 * SSL_get_peer_certificate(const SSL *s);


STACK *SSL_get_peer_cert_chain(const SSL *s);

int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx))(int,X509_STORE_CTX *);
void SSL_CTX_set_verify(SSL_CTX *ctx,int mode,
   int (*callback)(int, X509_STORE_CTX *));
void SSL_CTX_set_verify_depth(SSL_CTX *ctx,int depth);
void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx, int (*cb)(X509_STORE_CTX *,void *), void *arg);

int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);

int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d, long len);
int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
int SSL_CTX_use_PrivateKey_ASN1(int pk,SSL_CTX *ctx,
 const unsigned char *d, long len);
int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d);

void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);

int SSL_CTX_check_private_key(const SSL_CTX *ctx);
int SSL_check_private_key(const SSL *ctx);

int SSL_CTX_set_session_id_context(SSL_CTX *ctx,const unsigned char *sid_ctx,
           unsigned int sid_ctx_len);

SSL * SSL_new(SSL_CTX *ctx);
int SSL_set_session_id_context(SSL *ssl,const unsigned char *sid_ctx,
       unsigned int sid_ctx_len);

int SSL_CTX_set_purpose(SSL_CTX *s, int purpose);
int SSL_set_purpose(SSL *s, int purpose);
int SSL_CTX_set_trust(SSL_CTX *s, int trust);
int SSL_set_trust(SSL *s, int trust);

void SSL_free(SSL *ssl);
int SSL_accept(SSL *ssl);
int SSL_connect(SSL *ssl);
int SSL_read(SSL *ssl,void *buf,int num);
int SSL_peek(SSL *ssl,void *buf,int num);
int SSL_write(SSL *ssl,const void *buf,int num);
long SSL_ctrl(SSL *ssl,int cmd, long larg, void *parg);
long SSL_callback_ctrl(SSL *, int, void (*)(void));
long SSL_CTX_ctrl(SSL_CTX *ctx,int cmd, long larg, void *parg);
long SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void));

int SSL_get_error(const SSL *s,int ret_code);
const char *SSL_get_version(const SSL *s);


int SSL_CTX_set_ssl_version(SSL_CTX *ctx,SSL_METHOD *meth);

SSL_METHOD *SSLv2_method(void);
SSL_METHOD *SSLv2_server_method(void);
SSL_METHOD *SSLv2_client_method(void);

SSL_METHOD *SSLv3_method(void);
SSL_METHOD *SSLv3_server_method(void);
SSL_METHOD *SSLv3_client_method(void);

SSL_METHOD *SSLv23_method(void);
SSL_METHOD *SSLv23_server_method(void);
SSL_METHOD *SSLv23_client_method(void);

SSL_METHOD *TLSv1_method(void);
SSL_METHOD *TLSv1_server_method(void);
SSL_METHOD *TLSv1_client_method(void);

SSL_METHOD *DTLSv1_method(void);
SSL_METHOD *DTLSv1_server_method(void);
SSL_METHOD *DTLSv1_client_method(void);

STACK *SSL_get_ciphers(const SSL *s);

int SSL_do_handshake(SSL *s);
int SSL_renegotiate(SSL *s);
int SSL_renegotiate_pending(SSL *s);
int SSL_shutdown(SSL *s);

SSL_METHOD *SSL_get_ssl_method(SSL *s);
int SSL_set_ssl_method(SSL *s,SSL_METHOD *method);
const char *SSL_alert_type_string_long(int value);
const char *SSL_alert_type_string(int value);
const char *SSL_alert_desc_string_long(int value);
const char *SSL_alert_desc_string(int value);

void SSL_set_client_CA_list(SSL *s, STACK *name_list);
void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK *name_list);
STACK *SSL_get_client_CA_list(const SSL *s);
STACK *SSL_CTX_get_client_CA_list(const SSL_CTX *s);
int SSL_add_client_CA(SSL *ssl,X509 *x);
int SSL_CTX_add_client_CA(SSL_CTX *ctx,X509 *x);

void SSL_set_connect_state(SSL *s);
void SSL_set_accept_state(SSL *s);

long SSL_get_default_timeout(const SSL *s);

int SSL_library_init(void );

char *SSL_CIPHER_description(SSL_CIPHER *,char *buf,int size);
STACK *SSL_dup_CA_list(STACK *sk);

SSL *SSL_dup(SSL *ssl);

X509 *SSL_get_certificate(const SSL *ssl);
               struct evp_pkey_st *SSL_get_privatekey(SSL *ssl);

void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx,int mode);
int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
void SSL_set_quiet_shutdown(SSL *ssl,int mode);
int SSL_get_quiet_shutdown(const SSL *ssl);
void SSL_set_shutdown(SSL *ssl,int mode);
int SSL_get_shutdown(const SSL *ssl);
int SSL_version(const SSL *ssl);
int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
 const char *CApath);

SSL_SESSION *SSL_get_session(const SSL *ssl);
SSL_SESSION *SSL_get1_session(SSL *ssl);
SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX* ctx);
void SSL_set_info_callback(SSL *ssl,
      void (*cb)(const SSL *ssl,int type,int val));
void (*SSL_get_info_callback(const SSL *ssl))(const SSL *ssl,int type,int val);
int SSL_state(const SSL *ssl);

void SSL_set_verify_result(SSL *ssl,long v);
long SSL_get_verify_result(const SSL *ssl);

int SSL_set_ex_data(SSL *ssl,int idx,void *data);
void *SSL_get_ex_data(const SSL *ssl,int idx);
int SSL_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);

int SSL_SESSION_set_ex_data(SSL_SESSION *ss,int idx,void *data);
void *SSL_SESSION_get_ex_data(const SSL_SESSION *ss,int idx);
int SSL_SESSION_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);

int SSL_CTX_set_ex_data(SSL_CTX *ssl,int idx,void *data);
void *SSL_CTX_get_ex_data(const SSL_CTX *ssl,int idx);
int SSL_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);

int SSL_get_ex_data_X509_STORE_CTX_idx(void );
# 1596 "/usr/include/openssl/ssl.h" 3 4
void SSL_CTX_set_tmp_rsa_callback(SSL_CTX *ctx,
      RSA *(*cb)(SSL *ssl,int is_export,
          int keylength));

void SSL_set_tmp_rsa_callback(SSL *ssl,
      RSA *(*cb)(SSL *ssl,int is_export,
          int keylength));


void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
     DH *(*dh)(SSL *ssl,int is_export,
        int keylength));
void SSL_set_tmp_dh_callback(SSL *ssl,
     DH *(*dh)(SSL *ssl,int is_export,
        int keylength));


void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,
     EC_KEY *(*ecdh)(SSL *ssl,int is_export,
        int keylength));
void SSL_set_tmp_ecdh_callback(SSL *ssl,
     EC_KEY *(*ecdh)(SSL *ssl,int is_export,
        int keylength));



const COMP_METHOD *SSL_get_current_compression(SSL *s);
const COMP_METHOD *SSL_get_current_expansion(SSL *s);
const char *SSL_COMP_get_name(const COMP_METHOD *comp);
STACK *SSL_COMP_get_compression_methods(void);
int SSL_COMP_add_compression_method(int id,COMP_METHOD *cm);
# 1639 "/usr/include/openssl/ssl.h" 3 4
void ERR_load_SSL_strings(void);
# 6 "HttpClient.h" 2
# 1 "/usr/include/openssl/md5.h" 1 3 4
# 62 "/usr/include/openssl/md5.h" 3 4
# 1 "/usr/include/openssl/e_os2.h" 1 3 4
# 56 "/usr/include/openssl/e_os2.h" 3 4
# 1 "/usr/include/openssl/opensslconf.h" 1 3 4
# 57 "/usr/include/openssl/e_os2.h" 2 3 4
# 63 "/usr/include/openssl/md5.h" 2 3 4
# 1 "/var/include/stddef.h" 1 3 4
# 64 "/usr/include/openssl/md5.h" 2 3 4
# 100 "/usr/include/openssl/md5.h" 3 4
typedef struct MD5state_st
 {
 unsigned int A,B,C,D;
 unsigned int Nl,Nh;
 unsigned int data[(64/4)];
 unsigned int num;
 } MD5_CTX;




int MD5_Init(MD5_CTX *c);
int MD5_Update(MD5_CTX *c, const void *data, size_t len);
int MD5_Final(unsigned char *md, MD5_CTX *c);
unsigned char *MD5(const unsigned char *d, size_t n, unsigned char *md);
void MD5_Transform(MD5_CTX *c, const unsigned char *b);
# 7 "HttpClient.h" 2
# 1 "/var/include/libxml2/libxml/parser.h" 1
# 15 "/var/include/libxml2/libxml/parser.h"
# 1 "/var/include/libxml2/libxml/xmlversion.h" 1
# 13 "/var/include/libxml2/libxml/xmlversion.h"
# 1 "/var/include/libxml2/libxml/xmlexports.h" 1
# 14 "/var/include/libxml2/libxml/xmlversion.h" 2
# 24 "/var/include/libxml2/libxml/xmlversion.h"
 void xmlCheckVersion(int version);
# 16 "/var/include/libxml2/libxml/parser.h" 2
# 1 "/var/include/libxml2/libxml/tree.h" 1
# 17 "/var/include/libxml2/libxml/tree.h"
# 1 "/var/include/libxml2/libxml/xmlstring.h" 1
# 28 "/var/include/libxml2/libxml/xmlstring.h"
typedef unsigned char xmlChar;
# 40 "/var/include/libxml2/libxml/xmlstring.h"
 xmlChar *
                xmlStrdup (const xmlChar *cur);
 xmlChar *
                xmlStrndup (const xmlChar *cur,
                                         int len);
 xmlChar *
                xmlCharStrndup (const char *cur,
                                         int len);
 xmlChar *
                xmlCharStrdup (const char *cur);
 xmlChar *
                xmlStrsub (const xmlChar *str,
                                         int start,
                                         int len);
 const xmlChar *
                xmlStrchr (const xmlChar *str,
                                         xmlChar val);
 const xmlChar *
                xmlStrstr (const xmlChar *str,
                                         const xmlChar *val);
 const xmlChar *
                xmlStrcasestr (const xmlChar *str,
                                         xmlChar *val);
 int
                xmlStrcmp (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrncmp (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrcasecmp (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrncasecmp (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrEqual (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrQEqual (const xmlChar *pref,
                                         const xmlChar *name,
                                         const xmlChar *str);
 int
                xmlStrlen (const xmlChar *str);
 xmlChar *
                xmlStrcat (xmlChar *cur,
                                         const xmlChar *add);
 xmlChar *
                xmlStrncat (xmlChar *cur,
                                         const xmlChar *add,
                                         int len);
 xmlChar *
                xmlStrncatNew (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrPrintf (xmlChar *buf,
                                         int len,
                                         const xmlChar *msg,
                                         ...);
 int
                xmlStrVPrintf (xmlChar *buf,
                                         int len,
                                         const xmlChar *msg,
                                         va_list ap);

 int
        xmlGetUTF8Char (const unsigned char *utf,
                                         int *len);
 int
        xmlCheckUTF8 (const unsigned char *utf);
 int
        xmlUTF8Strsize (const xmlChar *utf,
                                         int len);
 xmlChar *
        xmlUTF8Strndup (const xmlChar *utf,
                                         int len);
 const xmlChar *
        xmlUTF8Strpos (const xmlChar *utf,
                                         int pos);
 int
        xmlUTF8Strloc (const xmlChar *utf,
                                         const xmlChar *utfchar);
 xmlChar *
        xmlUTF8Strsub (const xmlChar *utf,
                                         int start,
                                         int len);
 int
        xmlUTF8Strlen (const xmlChar *utf);
 int
        xmlUTF8Size (const xmlChar *utf);
 int
        xmlUTF8Charcmp (const xmlChar *utf1,
                                         const xmlChar *utf2);
# 18 "/var/include/libxml2/libxml/tree.h" 2
# 27 "/var/include/libxml2/libxml/tree.h"
typedef struct _xmlParserInputBuffer xmlParserInputBuffer;
typedef xmlParserInputBuffer *xmlParserInputBufferPtr;

typedef struct _xmlOutputBuffer xmlOutputBuffer;
typedef xmlOutputBuffer *xmlOutputBufferPtr;


typedef struct _xmlParserInput xmlParserInput;
typedef xmlParserInput *xmlParserInputPtr;

typedef struct _xmlParserCtxt xmlParserCtxt;
typedef xmlParserCtxt *xmlParserCtxtPtr;

typedef struct _xmlSAXLocator xmlSAXLocator;
typedef xmlSAXLocator *xmlSAXLocatorPtr;

typedef struct _xmlSAXHandler xmlSAXHandler;
typedef xmlSAXHandler *xmlSAXHandlerPtr;


typedef struct _xmlEntity xmlEntity;
typedef xmlEntity *xmlEntityPtr;
# 73 "/var/include/libxml2/libxml/tree.h"
typedef enum {
    XML_BUFFER_ALLOC_DOUBLEIT,
    XML_BUFFER_ALLOC_EXACT,
    XML_BUFFER_ALLOC_IMMUTABLE,
    XML_BUFFER_ALLOC_IO
} xmlBufferAllocationScheme;






typedef struct _xmlBuffer xmlBuffer;
typedef xmlBuffer *xmlBufferPtr;
struct _xmlBuffer {
    xmlChar *content;
    unsigned int use;
    unsigned int size;
    xmlBufferAllocationScheme alloc;
    xmlChar *contentIO;
};
# 120 "/var/include/libxml2/libxml/tree.h"
typedef enum {
    XML_ELEMENT_NODE= 1,
    XML_ATTRIBUTE_NODE= 2,
    XML_TEXT_NODE= 3,
    XML_CDATA_SECTION_NODE= 4,
    XML_ENTITY_REF_NODE= 5,
    XML_ENTITY_NODE= 6,
    XML_PI_NODE= 7,
    XML_COMMENT_NODE= 8,
    XML_DOCUMENT_NODE= 9,
    XML_DOCUMENT_TYPE_NODE= 10,
    XML_DOCUMENT_FRAG_NODE= 11,
    XML_NOTATION_NODE= 12,
    XML_HTML_DOCUMENT_NODE= 13,
    XML_DTD_NODE= 14,
    XML_ELEMENT_DECL= 15,
    XML_ATTRIBUTE_DECL= 16,
    XML_ENTITY_DECL= 17,
    XML_NAMESPACE_DECL= 18,
    XML_XINCLUDE_START= 19,
    XML_XINCLUDE_END= 20

   ,XML_DOCB_DOCUMENT_NODE= 21

} xmlElementType;
# 153 "/var/include/libxml2/libxml/tree.h"
typedef struct _xmlNotation xmlNotation;
typedef xmlNotation *xmlNotationPtr;
struct _xmlNotation {
    const xmlChar *name;
    const xmlChar *PublicID;
    const xmlChar *SystemID;
};







typedef enum {
    XML_ATTRIBUTE_CDATA = 1,
    XML_ATTRIBUTE_ID,
    XML_ATTRIBUTE_IDREF ,
    XML_ATTRIBUTE_IDREFS,
    XML_ATTRIBUTE_ENTITY,
    XML_ATTRIBUTE_ENTITIES,
    XML_ATTRIBUTE_NMTOKEN,
    XML_ATTRIBUTE_NMTOKENS,
    XML_ATTRIBUTE_ENUMERATION,
    XML_ATTRIBUTE_NOTATION
} xmlAttributeType;







typedef enum {
    XML_ATTRIBUTE_NONE = 1,
    XML_ATTRIBUTE_REQUIRED,
    XML_ATTRIBUTE_IMPLIED,
    XML_ATTRIBUTE_FIXED
} xmlAttributeDefault;







typedef struct _xmlEnumeration xmlEnumeration;
typedef xmlEnumeration *xmlEnumerationPtr;
struct _xmlEnumeration {
    struct _xmlEnumeration *next;
    const xmlChar *name;
};







typedef struct _xmlAttribute xmlAttribute;
typedef xmlAttribute *xmlAttributePtr;
struct _xmlAttribute {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    struct _xmlAttribute *nexth;
    xmlAttributeType atype;
    xmlAttributeDefault def;
    const xmlChar *defaultValue;
    xmlEnumerationPtr tree;
    const xmlChar *prefix;
    const xmlChar *elem;
};






typedef enum {
    XML_ELEMENT_CONTENT_PCDATA = 1,
    XML_ELEMENT_CONTENT_ELEMENT,
    XML_ELEMENT_CONTENT_SEQ,
    XML_ELEMENT_CONTENT_OR
} xmlElementContentType;






typedef enum {
    XML_ELEMENT_CONTENT_ONCE = 1,
    XML_ELEMENT_CONTENT_OPT,
    XML_ELEMENT_CONTENT_MULT,
    XML_ELEMENT_CONTENT_PLUS
} xmlElementContentOccur;
# 265 "/var/include/libxml2/libxml/tree.h"
typedef struct _xmlElementContent xmlElementContent;
typedef xmlElementContent *xmlElementContentPtr;
struct _xmlElementContent {
    xmlElementContentType type;
    xmlElementContentOccur ocur;
    const xmlChar *name;
    struct _xmlElementContent *c1;
    struct _xmlElementContent *c2;
    struct _xmlElementContent *parent;
    const xmlChar *prefix;
};







typedef enum {
    XML_ELEMENT_TYPE_UNDEFINED = 0,
    XML_ELEMENT_TYPE_EMPTY = 1,
    XML_ELEMENT_TYPE_ANY,
    XML_ELEMENT_TYPE_MIXED,
    XML_ELEMENT_TYPE_ELEMENT
} xmlElementTypeVal;




# 1 "/var/include/libxml2/libxml/xmlregexp.h" 1
# 28 "/var/include/libxml2/libxml/xmlregexp.h"
typedef struct _xmlRegexp xmlRegexp;
typedef xmlRegexp *xmlRegexpPtr;






typedef struct _xmlRegExecCtxt xmlRegExecCtxt;
typedef xmlRegExecCtxt *xmlRegExecCtxtPtr;




# 1 "/var/include/libxml2/libxml/tree.h" 1
# 43 "/var/include/libxml2/libxml/xmlregexp.h" 2
# 1 "/var/include/libxml2/libxml/dict.h" 1
# 24 "/var/include/libxml2/libxml/dict.h"
typedef struct _xmlDict xmlDict;
typedef xmlDict *xmlDictPtr;




 xmlDictPtr
   xmlDictCreate (void);
 xmlDictPtr
   xmlDictCreateSub(xmlDictPtr sub);
 int
   xmlDictReference(xmlDictPtr dict);
 void
   xmlDictFree (xmlDictPtr dict);




 const xmlChar *
   xmlDictLookup (xmlDictPtr dict,
                           const xmlChar *name,
                           int len);
 const xmlChar *
   xmlDictExists (xmlDictPtr dict,
                           const xmlChar *name,
                           int len);
 const xmlChar *
   xmlDictQLookup (xmlDictPtr dict,
                           const xmlChar *prefix,
                           const xmlChar *name);
 int
   xmlDictOwns (xmlDictPtr dict,
      const xmlChar *str);
 int
   xmlDictSize (xmlDictPtr dict);




 void
                        xmlDictCleanup (void);
# 44 "/var/include/libxml2/libxml/xmlregexp.h" 2







 xmlRegexpPtr
      xmlRegexpCompile (const xmlChar *regexp);
 void xmlRegFreeRegexp(xmlRegexpPtr regexp);
 int
      xmlRegexpExec (xmlRegexpPtr comp,
      const xmlChar *value);
 void
      xmlRegexpPrint (FILE *output,
      xmlRegexpPtr regexp);
 int
      xmlRegexpIsDeterminist(xmlRegexpPtr comp);
# 72 "/var/include/libxml2/libxml/xmlregexp.h"
typedef void (*xmlRegExecCallbacks) (xmlRegExecCtxtPtr exec,
                              const xmlChar *token,
         void *transdata,
         void *inputdata);




 xmlRegExecCtxtPtr
      xmlRegNewExecCtxt (xmlRegexpPtr comp,
      xmlRegExecCallbacks callback,
      void *data);
 void
      xmlRegFreeExecCtxt (xmlRegExecCtxtPtr exec);
 int
      xmlRegExecPushString(xmlRegExecCtxtPtr exec,
      const xmlChar *value,
      void *data);
 int
      xmlRegExecPushString2(xmlRegExecCtxtPtr exec,
      const xmlChar *value,
      const xmlChar *value2,
      void *data);

 int
      xmlRegExecNextValues(xmlRegExecCtxtPtr exec,
      int *nbval,
      int *nbneg,
      xmlChar **values,
      int *terminal);
 int
      xmlRegExecErrInfo (xmlRegExecCtxtPtr exec,
      const xmlChar **string,
      int *nbval,
      int *nbneg,
      xmlChar **values,
      int *terminal);







typedef struct _xmlExpCtxt xmlExpCtxt;
typedef xmlExpCtxt *xmlExpCtxtPtr;

 void
   xmlExpFreeCtxt (xmlExpCtxtPtr ctxt);
 xmlExpCtxtPtr
   xmlExpNewCtxt (int maxNodes,
      xmlDictPtr dict);

 int
   xmlExpCtxtNbNodes(xmlExpCtxtPtr ctxt);
 int
   xmlExpCtxtNbCons(xmlExpCtxtPtr ctxt);


typedef struct _xmlExpNode xmlExpNode;
typedef xmlExpNode *xmlExpNodePtr;

typedef enum {
    XML_EXP_EMPTY = 0,
    XML_EXP_FORBID = 1,
    XML_EXP_ATOM = 2,
    XML_EXP_SEQ = 3,
    XML_EXP_OR = 4,
    XML_EXP_COUNT = 5
} xmlExpNodeType;





extern xmlExpNodePtr forbiddenExp;
extern xmlExpNodePtr emptyExp;




 void
   xmlExpFree (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr);
 void
   xmlExpRef (xmlExpNodePtr expr);




 xmlExpNodePtr
   xmlExpParse (xmlExpCtxtPtr ctxt,
      const char *expr);
 xmlExpNodePtr
   xmlExpNewAtom (xmlExpCtxtPtr ctxt,
      const xmlChar *name,
      int len);
 xmlExpNodePtr
   xmlExpNewOr (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr left,
      xmlExpNodePtr right);
 xmlExpNodePtr
   xmlExpNewSeq (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr left,
      xmlExpNodePtr right);
 xmlExpNodePtr
   xmlExpNewRange (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr subset,
      int min,
      int max);



 int
   xmlExpIsNillable(xmlExpNodePtr expr);
 int
   xmlExpMaxToken (xmlExpNodePtr expr);
 int
   xmlExpGetLanguage(xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar**langList,
      int len);
 int
   xmlExpGetStart (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar**tokList,
      int len);
 xmlExpNodePtr
   xmlExpStringDerive(xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar *str,
      int len);
 xmlExpNodePtr
   xmlExpExpDerive (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      xmlExpNodePtr sub);
 int
   xmlExpSubsume (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      xmlExpNodePtr sub);
 void
   xmlExpDump (xmlBufferPtr buf,
      xmlExpNodePtr expr);
# 295 "/var/include/libxml2/libxml/tree.h" 2
# 305 "/var/include/libxml2/libxml/tree.h"
typedef struct _xmlElement xmlElement;
typedef xmlElement *xmlElementPtr;
struct _xmlElement {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    xmlElementTypeVal etype;
    xmlElementContentPtr content;
    xmlAttributePtr attributes;
    const xmlChar *prefix;

    xmlRegexpPtr contModel;



};
# 336 "/var/include/libxml2/libxml/tree.h"
typedef xmlElementType xmlNsType;
# 348 "/var/include/libxml2/libxml/tree.h"
typedef struct _xmlNs xmlNs;
typedef xmlNs *xmlNsPtr;
struct _xmlNs {
    struct _xmlNs *next;
    xmlNsType type;
    const xmlChar *href;
    const xmlChar *prefix;
    void *_private;
    struct _xmlDoc *context;
};







typedef struct _xmlDtd xmlDtd;
typedef xmlDtd *xmlDtdPtr;
struct _xmlDtd {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDoc *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    void *notations;
    void *elements;
    void *attributes;
    void *entities;
    const xmlChar *ExternalID;
    const xmlChar *SystemID;
    void *pentities;
};






typedef struct _xmlAttr xmlAttr;
typedef xmlAttr *xmlAttrPtr;
struct _xmlAttr {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlAttr *next;
    struct _xmlAttr *prev;
    struct _xmlDoc *doc;
    xmlNs *ns;
    xmlAttributeType atype;
    void *psvi;
};







typedef struct _xmlID xmlID;
typedef xmlID *xmlIDPtr;
struct _xmlID {
    struct _xmlID *next;
    const xmlChar *value;
    xmlAttrPtr attr;
    const xmlChar *name;
    int lineno;
    struct _xmlDoc *doc;
};







typedef struct _xmlRef xmlRef;
typedef xmlRef *xmlRefPtr;
struct _xmlRef {
    struct _xmlRef *next;
    const xmlChar *value;
    xmlAttrPtr attr;
    const xmlChar *name;
    int lineno;
};






typedef struct _xmlNode xmlNode;
typedef xmlNode *xmlNodePtr;
struct _xmlNode {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    xmlNs *ns;
    xmlChar *content;
    struct _xmlAttr *properties;
    xmlNs *nsDef;
    void *psvi;
    unsigned short line;
    unsigned short extra;
};
# 493 "/var/include/libxml2/libxml/tree.h"
typedef enum {
    XML_DOC_WELLFORMED = 1<<0,
    XML_DOC_NSVALID = 1<<1,
    XML_DOC_OLD10 = 1<<2,
    XML_DOC_DTDVALID = 1<<3,
    XML_DOC_XINCLUDE = 1<<4,
    XML_DOC_USERBUILT = 1<<5,

    XML_DOC_INTERNAL = 1<<6,
    XML_DOC_HTML = 1<<7
} xmlDocProperties;






typedef struct _xmlDoc xmlDoc;
typedef xmlDoc *xmlDocPtr;
struct _xmlDoc {
    void *_private;
    xmlElementType type;
    char *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    int compression;
    int standalone;





    struct _xmlDtd *intSubset;
    struct _xmlDtd *extSubset;
    struct _xmlNs *oldNs;
    const xmlChar *version;
    const xmlChar *encoding;
    void *ids;
    void *refs;
    const xmlChar *URL;
    int charset;

    struct _xmlDict *dict;
    void *psvi;
    int parseFlags;

    int properties;

};


typedef struct _xmlDOMWrapCtxt xmlDOMWrapCtxt;
typedef xmlDOMWrapCtxt *xmlDOMWrapCtxtPtr;
# 564 "/var/include/libxml2/libxml/tree.h"
typedef xmlNsPtr (*xmlDOMWrapAcquireNsFunction) (xmlDOMWrapCtxtPtr ctxt,
       xmlNodePtr node,
       const xmlChar *nsName,
       const xmlChar *nsPrefix);






struct _xmlDOMWrapCtxt {
    void * _private;




    int type;



    void * namespaceMap;




    xmlDOMWrapAcquireNsFunction getNsForNodeFunc;
};
# 620 "/var/include/libxml2/libxml/tree.h"
 int
  xmlValidateNCName (const xmlChar *value,
      int space);



 int
  xmlValidateQName (const xmlChar *value,
      int space);
 int
  xmlValidateName (const xmlChar *value,
      int space);
 int
  xmlValidateNMToken (const xmlChar *value,
      int space);


 xmlChar *
  xmlBuildQName (const xmlChar *ncname,
      const xmlChar *prefix,
      xmlChar *memory,
      int len);
 xmlChar *
  xmlSplitQName2 (const xmlChar *name,
      xmlChar **prefix);
 const xmlChar *
  xmlSplitQName3 (const xmlChar *name,
      int *len);





 void
  xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme);
 xmlBufferAllocationScheme
  xmlGetBufferAllocationScheme(void);

 xmlBufferPtr
  xmlBufferCreate (void);
 xmlBufferPtr
  xmlBufferCreateSize (size_t size);
 xmlBufferPtr
  xmlBufferCreateStatic (void *mem,
      size_t size);
 int
  xmlBufferResize (xmlBufferPtr buf,
      unsigned int size);
 void
  xmlBufferFree (xmlBufferPtr buf);
 int
  xmlBufferDump (FILE *file,
      xmlBufferPtr buf);
 int
  xmlBufferAdd (xmlBufferPtr buf,
      const xmlChar *str,
      int len);
 int
  xmlBufferAddHead (xmlBufferPtr buf,
      const xmlChar *str,
      int len);
 int
  xmlBufferCat (xmlBufferPtr buf,
      const xmlChar *str);
 int
  xmlBufferCCat (xmlBufferPtr buf,
      const char *str);
 int
  xmlBufferShrink (xmlBufferPtr buf,
      unsigned int len);
 int
  xmlBufferGrow (xmlBufferPtr buf,
      unsigned int len);
 void
  xmlBufferEmpty (xmlBufferPtr buf);
 const xmlChar*
  xmlBufferContent (const xmlBufferPtr buf);
 void
  xmlBufferSetAllocationScheme(xmlBufferPtr buf,
      xmlBufferAllocationScheme scheme);
 int
  xmlBufferLength (const xmlBufferPtr buf);




 xmlDtdPtr
  xmlCreateIntSubset (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlNewDtd (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlGetIntSubset (xmlDocPtr doc);
 void
  xmlFreeDtd (xmlDtdPtr cur);

 xmlNsPtr
  xmlNewGlobalNs (xmlDocPtr doc,
      const xmlChar *href,
      const xmlChar *prefix);

 xmlNsPtr
  xmlNewNs (xmlNodePtr node,
      const xmlChar *href,
      const xmlChar *prefix);
 void
  xmlFreeNs (xmlNsPtr cur);
 void
  xmlFreeNsList (xmlNsPtr cur);
 xmlDocPtr
  xmlNewDoc (const xmlChar *version);
 void
  xmlFreeDoc (xmlDocPtr cur);
 xmlAttrPtr
  xmlNewDocProp (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *value);


 xmlAttrPtr
  xmlNewProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *value);

 xmlAttrPtr
  xmlNewNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *value);
 xmlAttrPtr
  xmlNewNsPropEatName (xmlNodePtr node,
      xmlNsPtr ns,
      xmlChar *name,
      const xmlChar *value);
 void
  xmlFreePropList (xmlAttrPtr cur);
 void
  xmlFreeProp (xmlAttrPtr cur);
 xmlAttrPtr
  xmlCopyProp (xmlNodePtr target,
      xmlAttrPtr cur);
 xmlAttrPtr
  xmlCopyPropList (xmlNodePtr target,
      xmlAttrPtr cur);

 xmlDtdPtr
  xmlCopyDtd (xmlDtdPtr dtd);


 xmlDocPtr
  xmlCopyDoc (xmlDocPtr doc,
      int recursive);




 xmlNodePtr
  xmlNewDocNode (xmlDocPtr doc,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocNodeEatName (xmlDocPtr doc,
      xmlNsPtr ns,
      xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewNode (xmlNsPtr ns,
      const xmlChar *name);
 xmlNodePtr
  xmlNewNodeEatName (xmlNsPtr ns,
      xmlChar *name);

 xmlNodePtr
  xmlNewChild (xmlNodePtr parent,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);

 xmlNodePtr
  xmlNewDocText (xmlDocPtr doc,
      const xmlChar *content);
 xmlNodePtr
  xmlNewText (const xmlChar *content);
 xmlNodePtr
  xmlNewDocPI (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewPI (const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocTextLen (xmlDocPtr doc,
      const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewTextLen (const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewDocComment (xmlDocPtr doc,
      const xmlChar *content);
 xmlNodePtr
  xmlNewComment (const xmlChar *content);
 xmlNodePtr
  xmlNewCDataBlock (xmlDocPtr doc,
      const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewCharRef (xmlDocPtr doc,
      const xmlChar *name);
 xmlNodePtr
  xmlNewReference (xmlDocPtr doc,
      const xmlChar *name);
 xmlNodePtr
  xmlCopyNode (const xmlNodePtr node,
      int recursive);
 xmlNodePtr
  xmlDocCopyNode (const xmlNodePtr node,
      xmlDocPtr doc,
      int recursive);
 xmlNodePtr
  xmlDocCopyNodeList (xmlDocPtr doc,
      const xmlNodePtr node);
 xmlNodePtr
  xmlCopyNodeList (const xmlNodePtr node);

 xmlNodePtr
  xmlNewTextChild (xmlNodePtr parent,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocRawNode (xmlDocPtr doc,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocFragment (xmlDocPtr doc);





 long
  xmlGetLineNo (xmlNodePtr node);

 xmlChar *
  xmlGetNodePath (xmlNodePtr node);

 xmlNodePtr
  xmlDocGetRootElement (xmlDocPtr doc);
 xmlNodePtr
  xmlGetLastChild (xmlNodePtr parent);
 int
  xmlNodeIsText (xmlNodePtr node);
 int
  xmlIsBlankNode (xmlNodePtr node);





 xmlNodePtr
  xmlDocSetRootElement (xmlDocPtr doc,
      xmlNodePtr root);


 void
  xmlNodeSetName (xmlNodePtr cur,
      const xmlChar *name);

 xmlNodePtr
  xmlAddChild (xmlNodePtr parent,
      xmlNodePtr cur);
 xmlNodePtr
  xmlAddChildList (xmlNodePtr parent,
      xmlNodePtr cur);

 xmlNodePtr
  xmlReplaceNode (xmlNodePtr old,
      xmlNodePtr cur);



 xmlNodePtr
  xmlAddPrevSibling (xmlNodePtr cur,
      xmlNodePtr elem);

 xmlNodePtr
  xmlAddSibling (xmlNodePtr cur,
      xmlNodePtr elem);
 xmlNodePtr
  xmlAddNextSibling (xmlNodePtr cur,
      xmlNodePtr elem);
 void
  xmlUnlinkNode (xmlNodePtr cur);
 xmlNodePtr
  xmlTextMerge (xmlNodePtr first,
      xmlNodePtr second);
 int
  xmlTextConcat (xmlNodePtr node,
      const xmlChar *content,
      int len);
 void
  xmlFreeNodeList (xmlNodePtr cur);
 void
  xmlFreeNode (xmlNodePtr cur);
 void
  xmlSetTreeDoc (xmlNodePtr tree,
      xmlDocPtr doc);
 void
  xmlSetListDoc (xmlNodePtr list,
      xmlDocPtr doc);



 xmlNsPtr
  xmlSearchNs (xmlDocPtr doc,
      xmlNodePtr node,
      const xmlChar *nameSpace);
 xmlNsPtr
  xmlSearchNsByHref (xmlDocPtr doc,
      xmlNodePtr node,
      const xmlChar *href);

 xmlNsPtr *
  xmlGetNsList (xmlDocPtr doc,
      xmlNodePtr node);


 void
  xmlSetNs (xmlNodePtr node,
      xmlNsPtr ns);
 xmlNsPtr
  xmlCopyNamespace (xmlNsPtr cur);
 xmlNsPtr
  xmlCopyNamespaceList (xmlNsPtr cur);





 xmlAttrPtr
  xmlSetProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *value);
 xmlAttrPtr
  xmlSetNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *value);

 xmlChar *
  xmlGetNoNsProp (xmlNodePtr node,
      const xmlChar *name);
 xmlChar *
  xmlGetProp (xmlNodePtr node,
      const xmlChar *name);
 xmlAttrPtr
  xmlHasProp (xmlNodePtr node,
      const xmlChar *name);
 xmlAttrPtr
  xmlHasNsProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *nameSpace);
 xmlChar *
  xmlGetNsProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *nameSpace);
 xmlNodePtr
  xmlStringGetNodeList (xmlDocPtr doc,
      const xmlChar *value);
 xmlNodePtr
  xmlStringLenGetNodeList (xmlDocPtr doc,
      const xmlChar *value,
      int len);
 xmlChar *
  xmlNodeListGetString (xmlDocPtr doc,
      xmlNodePtr list,
      int inLine);

 xmlChar *
  xmlNodeListGetRawString (xmlDocPtr doc,
      xmlNodePtr list,
      int inLine);

 void
  xmlNodeSetContent (xmlNodePtr cur,
      const xmlChar *content);

 void
  xmlNodeSetContentLen (xmlNodePtr cur,
      const xmlChar *content,
      int len);

 void
  xmlNodeAddContent (xmlNodePtr cur,
      const xmlChar *content);
 void
  xmlNodeAddContentLen (xmlNodePtr cur,
      const xmlChar *content,
      int len);
 xmlChar *
  xmlNodeGetContent (xmlNodePtr cur);
 int
  xmlNodeBufGetContent (xmlBufferPtr buffer,
      xmlNodePtr cur);
 xmlChar *
  xmlNodeGetLang (xmlNodePtr cur);
 int
  xmlNodeGetSpacePreserve (xmlNodePtr cur);

 void
  xmlNodeSetLang (xmlNodePtr cur,
      const xmlChar *lang);
 void
  xmlNodeSetSpacePreserve (xmlNodePtr cur,
      int val);

 xmlChar *
  xmlNodeGetBase (xmlDocPtr doc,
      xmlNodePtr cur);

 void
  xmlNodeSetBase (xmlNodePtr cur,
      const xmlChar *uri);





 int
  xmlRemoveProp (xmlAttrPtr cur);

 int
  xmlUnsetNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name);
 int
  xmlUnsetProp (xmlNodePtr node,
      const xmlChar *name);





 void
  xmlBufferWriteCHAR (xmlBufferPtr buf,
      const xmlChar *string);
 void
  xmlBufferWriteChar (xmlBufferPtr buf,
      const char *string);
 void
  xmlBufferWriteQuotedString(xmlBufferPtr buf,
      const xmlChar *string);


 void xmlAttrSerializeTxtContent(xmlBufferPtr buf,
      xmlDocPtr doc,
      xmlAttrPtr attr,
      const xmlChar *string);






 int
  xmlReconciliateNs (xmlDocPtr doc,
      xmlNodePtr tree);






 void
  xmlDocDumpFormatMemory (xmlDocPtr cur,
      xmlChar **mem,
      int *size,
      int format);
 void
  xmlDocDumpMemory (xmlDocPtr cur,
      xmlChar **mem,
      int *size);
 void
  xmlDocDumpMemoryEnc (xmlDocPtr out_doc,
      xmlChar **doc_txt_ptr,
      int * doc_txt_len,
      const char *txt_encoding);
 void
  xmlDocDumpFormatMemoryEnc(xmlDocPtr out_doc,
      xmlChar **doc_txt_ptr,
      int * doc_txt_len,
      const char *txt_encoding,
      int format);
 int
  xmlDocFormatDump (FILE *f,
      xmlDocPtr cur,
      int format);
 int
  xmlDocDump (FILE *f,
      xmlDocPtr cur);
 void
  xmlElemDump (FILE *f,
      xmlDocPtr doc,
      xmlNodePtr cur);
 int
  xmlSaveFile (const char *filename,
      xmlDocPtr cur);
 int
  xmlSaveFormatFile (const char *filename,
      xmlDocPtr cur,
      int format);
 int
  xmlNodeDump (xmlBufferPtr buf,
      xmlDocPtr doc,
      xmlNodePtr cur,
      int level,
      int format);

 int
  xmlSaveFileTo (xmlOutputBufferPtr buf,
      xmlDocPtr cur,
      const char *encoding);
 int
  xmlSaveFormatFileTo (xmlOutputBufferPtr buf,
      xmlDocPtr cur,
             const char *encoding,
             int format);
 void
  xmlNodeDumpOutput (xmlOutputBufferPtr buf,
      xmlDocPtr doc,
      xmlNodePtr cur,
      int level,
      int format,
      const char *encoding);

 int
  xmlSaveFormatFileEnc (const char *filename,
      xmlDocPtr cur,
      const char *encoding,
      int format);

 int
  xmlSaveFileEnc (const char *filename,
      xmlDocPtr cur,
      const char *encoding);





 int
  xmlIsXHTML (const xmlChar *systemID,
      const xmlChar *publicID);




 int
  xmlGetDocCompressMode (xmlDocPtr doc);
 void
  xmlSetDocCompressMode (xmlDocPtr doc,
      int mode);
 int
  xmlGetCompressMode (void);
 void
  xmlSetCompressMode (int mode);




 xmlDOMWrapCtxtPtr
  xmlDOMWrapNewCtxt (void);
 void
  xmlDOMWrapFreeCtxt (xmlDOMWrapCtxtPtr ctxt);
 int
     xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr ctxt,
      xmlNodePtr elem,
      int options);
 int
     xmlDOMWrapAdoptNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr sourceDoc,
      xmlNodePtr node,
      xmlDocPtr destDoc,
      xmlNodePtr destParent,
      int options);
 int
     xmlDOMWrapRemoveNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr node,
      int options);
 int
     xmlDOMWrapCloneNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr sourceDoc,
      xmlNodePtr node,
      xmlNodePtr *clonedNode,
      xmlDocPtr destDoc,
      xmlNodePtr destParent,
      int deep,
      int options);






 unsigned long
            xmlChildElementCount (xmlNodePtr parent);
 xmlNodePtr
            xmlNextElementSibling (xmlNodePtr node);
 xmlNodePtr
            xmlFirstElementChild (xmlNodePtr parent);
 xmlNodePtr
            xmlLastElementChild (xmlNodePtr parent);
 xmlNodePtr
            xmlPreviousElementSibling (xmlNodePtr node);
# 17 "/var/include/libxml2/libxml/parser.h" 2

# 1 "/var/include/libxml2/libxml/hash.h" 1
# 21 "/var/include/libxml2/libxml/hash.h"
typedef struct _xmlHashTable xmlHashTable;
typedef xmlHashTable *xmlHashTablePtr;






# 1 "/var/include/libxml2/libxml/parser.h" 1
# 30 "/var/include/libxml2/libxml/hash.h" 2
# 69 "/var/include/libxml2/libxml/hash.h"
typedef void (*xmlHashDeallocator)(void *payload, xmlChar *name);
# 79 "/var/include/libxml2/libxml/hash.h"
typedef void *(*xmlHashCopier)(void *payload, xmlChar *name);
# 88 "/var/include/libxml2/libxml/hash.h"
typedef void (*xmlHashScanner)(void *payload, void *data, xmlChar *name);
# 99 "/var/include/libxml2/libxml/hash.h"
typedef void (*xmlHashScannerFull)(void *payload, void *data,
       const xmlChar *name, const xmlChar *name2,
       const xmlChar *name3);




 xmlHashTablePtr
   xmlHashCreate (int size);
 xmlHashTablePtr
   xmlHashCreateDict(int size,
      xmlDictPtr dict);
 void
   xmlHashFree (xmlHashTablePtr table,
      xmlHashDeallocator f);




 int
   xmlHashAddEntry (xmlHashTablePtr table,
                           const xmlChar *name,
                           void *userdata);
 int
   xmlHashUpdateEntry(xmlHashTablePtr table,
                           const xmlChar *name,
                           void *userdata,
      xmlHashDeallocator f);
 int
   xmlHashAddEntry2(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           void *userdata);
 int
   xmlHashUpdateEntry2(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           void *userdata,
      xmlHashDeallocator f);
 int
   xmlHashAddEntry3(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           const xmlChar *name3,
                           void *userdata);
 int
   xmlHashUpdateEntry3(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           const xmlChar *name3,
                           void *userdata,
      xmlHashDeallocator f);




 int
   xmlHashRemoveEntry(xmlHashTablePtr table, const xmlChar *name,
                           xmlHashDeallocator f);
 int
   xmlHashRemoveEntry2(xmlHashTablePtr table, const xmlChar *name,
                            const xmlChar *name2, xmlHashDeallocator f);
 int
   xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
                            const xmlChar *name2, const xmlChar *name3,
                            xmlHashDeallocator f);




 void *
   xmlHashLookup (xmlHashTablePtr table,
      const xmlChar *name);
 void *
   xmlHashLookup2 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2);
 void *
   xmlHashLookup3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3);
 void *
   xmlHashQLookup (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix);
 void *
   xmlHashQLookup2 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix,
      const xmlChar *name2,
      const xmlChar *prefix2);
 void *
   xmlHashQLookup3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix,
      const xmlChar *name2,
      const xmlChar *prefix2,
      const xmlChar *name3,
      const xmlChar *prefix3);




 xmlHashTablePtr
   xmlHashCopy (xmlHashTablePtr table,
      xmlHashCopier f);
 int
   xmlHashSize (xmlHashTablePtr table);
 void
   xmlHashScan (xmlHashTablePtr table,
      xmlHashScanner f,
      void *data);
 void
   xmlHashScan3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3,
      xmlHashScanner f,
      void *data);
 void
   xmlHashScanFull (xmlHashTablePtr table,
      xmlHashScannerFull f,
      void *data);
 void
   xmlHashScanFull3(xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3,
      xmlHashScannerFull f,
      void *data);
# 19 "/var/include/libxml2/libxml/parser.h" 2
# 1 "/var/include/libxml2/libxml/valid.h" 1
# 15 "/var/include/libxml2/libxml/valid.h"
# 1 "/var/include/libxml2/libxml/xmlerror.h" 1
# 24 "/var/include/libxml2/libxml/xmlerror.h"
typedef enum {
    XML_ERR_NONE = 0,
    XML_ERR_WARNING = 1,
    XML_ERR_ERROR = 2,
    XML_ERR_FATAL = 3
} xmlErrorLevel;






typedef enum {
    XML_FROM_NONE = 0,
    XML_FROM_PARSER,
    XML_FROM_TREE,
    XML_FROM_NAMESPACE,
    XML_FROM_DTD,
    XML_FROM_HTML,
    XML_FROM_MEMORY,
    XML_FROM_OUTPUT,
    XML_FROM_IO,
    XML_FROM_FTP,
    XML_FROM_HTTP,
    XML_FROM_XINCLUDE,
    XML_FROM_XPATH,
    XML_FROM_XPOINTER,
    XML_FROM_REGEXP,
    XML_FROM_DATATYPE,
    XML_FROM_SCHEMASP,
    XML_FROM_SCHEMASV,
    XML_FROM_RELAXNGP,
    XML_FROM_RELAXNGV,
    XML_FROM_CATALOG,
    XML_FROM_C14N,
    XML_FROM_XSLT,
    XML_FROM_VALID,
    XML_FROM_CHECK,
    XML_FROM_WRITER,
    XML_FROM_MODULE,
    XML_FROM_I18N,
    XML_FROM_SCHEMATRONV
} xmlErrorDomain;







typedef struct _xmlError xmlError;
typedef xmlError *xmlErrorPtr;
struct _xmlError {
    int domain;
    int code;
    char *message;
    xmlErrorLevel level;
    char *file;
    int line;
    char *str1;
    char *str2;
    char *str3;
    int int1;
    int int2;
    void *ctxt;
    void *node;
};






typedef enum {
    XML_ERR_OK = 0,
    XML_ERR_INTERNAL_ERROR,
    XML_ERR_NO_MEMORY,
    XML_ERR_DOCUMENT_START,
    XML_ERR_DOCUMENT_EMPTY,
    XML_ERR_DOCUMENT_END,
    XML_ERR_INVALID_HEX_CHARREF,
    XML_ERR_INVALID_DEC_CHARREF,
    XML_ERR_INVALID_CHARREF,
    XML_ERR_INVALID_CHAR,
    XML_ERR_CHARREF_AT_EOF,
    XML_ERR_CHARREF_IN_PROLOG,
    XML_ERR_CHARREF_IN_EPILOG,
    XML_ERR_CHARREF_IN_DTD,
    XML_ERR_ENTITYREF_AT_EOF,
    XML_ERR_ENTITYREF_IN_PROLOG,
    XML_ERR_ENTITYREF_IN_EPILOG,
    XML_ERR_ENTITYREF_IN_DTD,
    XML_ERR_PEREF_AT_EOF,
    XML_ERR_PEREF_IN_PROLOG,
    XML_ERR_PEREF_IN_EPILOG,
    XML_ERR_PEREF_IN_INT_SUBSET,
    XML_ERR_ENTITYREF_NO_NAME,
    XML_ERR_ENTITYREF_SEMICOL_MISSING,
    XML_ERR_PEREF_NO_NAME,
    XML_ERR_PEREF_SEMICOL_MISSING,
    XML_ERR_UNDECLARED_ENTITY,
    XML_WAR_UNDECLARED_ENTITY,
    XML_ERR_UNPARSED_ENTITY,
    XML_ERR_ENTITY_IS_EXTERNAL,
    XML_ERR_ENTITY_IS_PARAMETER,
    XML_ERR_UNKNOWN_ENCODING,
    XML_ERR_UNSUPPORTED_ENCODING,
    XML_ERR_STRING_NOT_STARTED,
    XML_ERR_STRING_NOT_CLOSED,
    XML_ERR_NS_DECL_ERROR,
    XML_ERR_ENTITY_NOT_STARTED,
    XML_ERR_ENTITY_NOT_FINISHED,
    XML_ERR_LT_IN_ATTRIBUTE,
    XML_ERR_ATTRIBUTE_NOT_STARTED,
    XML_ERR_ATTRIBUTE_NOT_FINISHED,
    XML_ERR_ATTRIBUTE_WITHOUT_VALUE,
    XML_ERR_ATTRIBUTE_REDEFINED,
    XML_ERR_LITERAL_NOT_STARTED,
    XML_ERR_LITERAL_NOT_FINISHED,
    XML_ERR_COMMENT_NOT_FINISHED,
    XML_ERR_PI_NOT_STARTED,
    XML_ERR_PI_NOT_FINISHED,
    XML_ERR_NOTATION_NOT_STARTED,
    XML_ERR_NOTATION_NOT_FINISHED,
    XML_ERR_ATTLIST_NOT_STARTED,
    XML_ERR_ATTLIST_NOT_FINISHED,
    XML_ERR_MIXED_NOT_STARTED,
    XML_ERR_MIXED_NOT_FINISHED,
    XML_ERR_ELEMCONTENT_NOT_STARTED,
    XML_ERR_ELEMCONTENT_NOT_FINISHED,
    XML_ERR_XMLDECL_NOT_STARTED,
    XML_ERR_XMLDECL_NOT_FINISHED,
    XML_ERR_CONDSEC_NOT_STARTED,
    XML_ERR_CONDSEC_NOT_FINISHED,
    XML_ERR_EXT_SUBSET_NOT_FINISHED,
    XML_ERR_DOCTYPE_NOT_FINISHED,
    XML_ERR_MISPLACED_CDATA_END,
    XML_ERR_CDATA_NOT_FINISHED,
    XML_ERR_RESERVED_XML_NAME,
    XML_ERR_SPACE_REQUIRED,
    XML_ERR_SEPARATOR_REQUIRED,
    XML_ERR_NMTOKEN_REQUIRED,
    XML_ERR_NAME_REQUIRED,
    XML_ERR_PCDATA_REQUIRED,
    XML_ERR_URI_REQUIRED,
    XML_ERR_PUBID_REQUIRED,
    XML_ERR_LT_REQUIRED,
    XML_ERR_GT_REQUIRED,
    XML_ERR_LTSLASH_REQUIRED,
    XML_ERR_EQUAL_REQUIRED,
    XML_ERR_TAG_NAME_MISMATCH,
    XML_ERR_TAG_NOT_FINISHED,
    XML_ERR_STANDALONE_VALUE,
    XML_ERR_ENCODING_NAME,
    XML_ERR_HYPHEN_IN_COMMENT,
    XML_ERR_INVALID_ENCODING,
    XML_ERR_EXT_ENTITY_STANDALONE,
    XML_ERR_CONDSEC_INVALID,
    XML_ERR_VALUE_REQUIRED,
    XML_ERR_NOT_WELL_BALANCED,
    XML_ERR_EXTRA_CONTENT,
    XML_ERR_ENTITY_CHAR_ERROR,
    XML_ERR_ENTITY_PE_INTERNAL,
    XML_ERR_ENTITY_LOOP,
    XML_ERR_ENTITY_BOUNDARY,
    XML_ERR_INVALID_URI,
    XML_ERR_URI_FRAGMENT,
    XML_WAR_CATALOG_PI,
    XML_ERR_NO_DTD,
    XML_ERR_CONDSEC_INVALID_KEYWORD,
    XML_ERR_VERSION_MISSING,
    XML_WAR_UNKNOWN_VERSION,
    XML_WAR_LANG_VALUE,
    XML_WAR_NS_URI,
    XML_WAR_NS_URI_RELATIVE,
    XML_ERR_MISSING_ENCODING,
    XML_WAR_SPACE_VALUE,
    XML_ERR_NOT_STANDALONE,
    XML_ERR_ENTITY_PROCESSING,
    XML_ERR_NOTATION_PROCESSING,
    XML_WAR_NS_COLUMN,
    XML_WAR_ENTITY_REDEFINED,
    XML_ERR_UNKNOWN_VERSION,
    XML_ERR_VERSION_MISMATCH,
    XML_NS_ERR_XML_NAMESPACE = 200,
    XML_NS_ERR_UNDEFINED_NAMESPACE,
    XML_NS_ERR_QNAME,
    XML_NS_ERR_ATTRIBUTE_REDEFINED,
    XML_NS_ERR_EMPTY,
    XML_NS_ERR_COLON,
    XML_DTD_ATTRIBUTE_DEFAULT = 500,
    XML_DTD_ATTRIBUTE_REDEFINED,
    XML_DTD_ATTRIBUTE_VALUE,
    XML_DTD_CONTENT_ERROR,
    XML_DTD_CONTENT_MODEL,
    XML_DTD_CONTENT_NOT_DETERMINIST,
    XML_DTD_DIFFERENT_PREFIX,
    XML_DTD_ELEM_DEFAULT_NAMESPACE,
    XML_DTD_ELEM_NAMESPACE,
    XML_DTD_ELEM_REDEFINED,
    XML_DTD_EMPTY_NOTATION,
    XML_DTD_ENTITY_TYPE,
    XML_DTD_ID_FIXED,
    XML_DTD_ID_REDEFINED,
    XML_DTD_ID_SUBSET,
    XML_DTD_INVALID_CHILD,
    XML_DTD_INVALID_DEFAULT,
    XML_DTD_LOAD_ERROR,
    XML_DTD_MISSING_ATTRIBUTE,
    XML_DTD_MIXED_CORRUPT,
    XML_DTD_MULTIPLE_ID,
    XML_DTD_NO_DOC,
    XML_DTD_NO_DTD,
    XML_DTD_NO_ELEM_NAME,
    XML_DTD_NO_PREFIX,
    XML_DTD_NO_ROOT,
    XML_DTD_NOTATION_REDEFINED,
    XML_DTD_NOTATION_VALUE,
    XML_DTD_NOT_EMPTY,
    XML_DTD_NOT_PCDATA,
    XML_DTD_NOT_STANDALONE,
    XML_DTD_ROOT_NAME,
    XML_DTD_STANDALONE_WHITE_SPACE,
    XML_DTD_UNKNOWN_ATTRIBUTE,
    XML_DTD_UNKNOWN_ELEM,
    XML_DTD_UNKNOWN_ENTITY,
    XML_DTD_UNKNOWN_ID,
    XML_DTD_UNKNOWN_NOTATION,
    XML_DTD_STANDALONE_DEFAULTED,
    XML_DTD_XMLID_VALUE,
    XML_DTD_XMLID_TYPE,
    XML_DTD_DUP_TOKEN,
    XML_HTML_STRUCURE_ERROR = 800,
    XML_HTML_UNKNOWN_TAG,
    XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000,
    XML_RNGP_ATTR_CONFLICT,
    XML_RNGP_ATTRIBUTE_CHILDREN,
    XML_RNGP_ATTRIBUTE_CONTENT,
    XML_RNGP_ATTRIBUTE_EMPTY,
    XML_RNGP_ATTRIBUTE_NOOP,
    XML_RNGP_CHOICE_CONTENT,
    XML_RNGP_CHOICE_EMPTY,
    XML_RNGP_CREATE_FAILURE,
    XML_RNGP_DATA_CONTENT,
    XML_RNGP_DEF_CHOICE_AND_INTERLEAVE,
    XML_RNGP_DEFINE_CREATE_FAILED,
    XML_RNGP_DEFINE_EMPTY,
    XML_RNGP_DEFINE_MISSING,
    XML_RNGP_DEFINE_NAME_MISSING,
    XML_RNGP_ELEM_CONTENT_EMPTY,
    XML_RNGP_ELEM_CONTENT_ERROR,
    XML_RNGP_ELEMENT_EMPTY,
    XML_RNGP_ELEMENT_CONTENT,
    XML_RNGP_ELEMENT_NAME,
    XML_RNGP_ELEMENT_NO_CONTENT,
    XML_RNGP_ELEM_TEXT_CONFLICT,
    XML_RNGP_EMPTY,
    XML_RNGP_EMPTY_CONSTRUCT,
    XML_RNGP_EMPTY_CONTENT,
    XML_RNGP_EMPTY_NOT_EMPTY,
    XML_RNGP_ERROR_TYPE_LIB,
    XML_RNGP_EXCEPT_EMPTY,
    XML_RNGP_EXCEPT_MISSING,
    XML_RNGP_EXCEPT_MULTIPLE,
    XML_RNGP_EXCEPT_NO_CONTENT,
    XML_RNGP_EXTERNALREF_EMTPY,
    XML_RNGP_EXTERNAL_REF_FAILURE,
    XML_RNGP_EXTERNALREF_RECURSE,
    XML_RNGP_FORBIDDEN_ATTRIBUTE,
    XML_RNGP_FOREIGN_ELEMENT,
    XML_RNGP_GRAMMAR_CONTENT,
    XML_RNGP_GRAMMAR_EMPTY,
    XML_RNGP_GRAMMAR_MISSING,
    XML_RNGP_GRAMMAR_NO_START,
    XML_RNGP_GROUP_ATTR_CONFLICT,
    XML_RNGP_HREF_ERROR,
    XML_RNGP_INCLUDE_EMPTY,
    XML_RNGP_INCLUDE_FAILURE,
    XML_RNGP_INCLUDE_RECURSE,
    XML_RNGP_INTERLEAVE_ADD,
    XML_RNGP_INTERLEAVE_CREATE_FAILED,
    XML_RNGP_INTERLEAVE_EMPTY,
    XML_RNGP_INTERLEAVE_NO_CONTENT,
    XML_RNGP_INVALID_DEFINE_NAME,
    XML_RNGP_INVALID_URI,
    XML_RNGP_INVALID_VALUE,
    XML_RNGP_MISSING_HREF,
    XML_RNGP_NAME_MISSING,
    XML_RNGP_NEED_COMBINE,
    XML_RNGP_NOTALLOWED_NOT_EMPTY,
    XML_RNGP_NSNAME_ATTR_ANCESTOR,
    XML_RNGP_NSNAME_NO_NS,
    XML_RNGP_PARAM_FORBIDDEN,
    XML_RNGP_PARAM_NAME_MISSING,
    XML_RNGP_PARENTREF_CREATE_FAILED,
    XML_RNGP_PARENTREF_NAME_INVALID,
    XML_RNGP_PARENTREF_NO_NAME,
    XML_RNGP_PARENTREF_NO_PARENT,
    XML_RNGP_PARENTREF_NOT_EMPTY,
    XML_RNGP_PARSE_ERROR,
    XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME,
    XML_RNGP_PAT_ATTR_ATTR,
    XML_RNGP_PAT_ATTR_ELEM,
    XML_RNGP_PAT_DATA_EXCEPT_ATTR,
    XML_RNGP_PAT_DATA_EXCEPT_ELEM,
    XML_RNGP_PAT_DATA_EXCEPT_EMPTY,
    XML_RNGP_PAT_DATA_EXCEPT_GROUP,
    XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE,
    XML_RNGP_PAT_DATA_EXCEPT_LIST,
    XML_RNGP_PAT_DATA_EXCEPT_ONEMORE,
    XML_RNGP_PAT_DATA_EXCEPT_REF,
    XML_RNGP_PAT_DATA_EXCEPT_TEXT,
    XML_RNGP_PAT_LIST_ATTR,
    XML_RNGP_PAT_LIST_ELEM,
    XML_RNGP_PAT_LIST_INTERLEAVE,
    XML_RNGP_PAT_LIST_LIST,
    XML_RNGP_PAT_LIST_REF,
    XML_RNGP_PAT_LIST_TEXT,
    XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME,
    XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME,
    XML_RNGP_PAT_ONEMORE_GROUP_ATTR,
    XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR,
    XML_RNGP_PAT_START_ATTR,
    XML_RNGP_PAT_START_DATA,
    XML_RNGP_PAT_START_EMPTY,
    XML_RNGP_PAT_START_GROUP,
    XML_RNGP_PAT_START_INTERLEAVE,
    XML_RNGP_PAT_START_LIST,
    XML_RNGP_PAT_START_ONEMORE,
    XML_RNGP_PAT_START_TEXT,
    XML_RNGP_PAT_START_VALUE,
    XML_RNGP_PREFIX_UNDEFINED,
    XML_RNGP_REF_CREATE_FAILED,
    XML_RNGP_REF_CYCLE,
    XML_RNGP_REF_NAME_INVALID,
    XML_RNGP_REF_NO_DEF,
    XML_RNGP_REF_NO_NAME,
    XML_RNGP_REF_NOT_EMPTY,
    XML_RNGP_START_CHOICE_AND_INTERLEAVE,
    XML_RNGP_START_CONTENT,
    XML_RNGP_START_EMPTY,
    XML_RNGP_START_MISSING,
    XML_RNGP_TEXT_EXPECTED,
    XML_RNGP_TEXT_HAS_CHILD,
    XML_RNGP_TYPE_MISSING,
    XML_RNGP_TYPE_NOT_FOUND,
    XML_RNGP_TYPE_VALUE,
    XML_RNGP_UNKNOWN_ATTRIBUTE,
    XML_RNGP_UNKNOWN_COMBINE,
    XML_RNGP_UNKNOWN_CONSTRUCT,
    XML_RNGP_UNKNOWN_TYPE_LIB,
    XML_RNGP_URI_FRAGMENT,
    XML_RNGP_URI_NOT_ABSOLUTE,
    XML_RNGP_VALUE_EMPTY,
    XML_RNGP_VALUE_NO_CONTENT,
    XML_RNGP_XMLNS_NAME,
    XML_RNGP_XML_NS,
    XML_XPATH_EXPRESSION_OK = 1200,
    XML_XPATH_NUMBER_ERROR,
    XML_XPATH_UNFINISHED_LITERAL_ERROR,
    XML_XPATH_START_LITERAL_ERROR,
    XML_XPATH_VARIABLE_REF_ERROR,
    XML_XPATH_UNDEF_VARIABLE_ERROR,
    XML_XPATH_INVALID_PREDICATE_ERROR,
    XML_XPATH_EXPR_ERROR,
    XML_XPATH_UNCLOSED_ERROR,
    XML_XPATH_UNKNOWN_FUNC_ERROR,
    XML_XPATH_INVALID_OPERAND,
    XML_XPATH_INVALID_TYPE,
    XML_XPATH_INVALID_ARITY,
    XML_XPATH_INVALID_CTXT_SIZE,
    XML_XPATH_INVALID_CTXT_POSITION,
    XML_XPATH_MEMORY_ERROR,
    XML_XPTR_SYNTAX_ERROR,
    XML_XPTR_RESOURCE_ERROR,
    XML_XPTR_SUB_RESOURCE_ERROR,
    XML_XPATH_UNDEF_PREFIX_ERROR,
    XML_XPATH_ENCODING_ERROR,
    XML_XPATH_INVALID_CHAR_ERROR,
    XML_TREE_INVALID_HEX = 1300,
    XML_TREE_INVALID_DEC,
    XML_TREE_UNTERMINATED_ENTITY,
    XML_TREE_NOT_UTF8,
    XML_SAVE_NOT_UTF8 = 1400,
    XML_SAVE_CHAR_INVALID,
    XML_SAVE_NO_DOCTYPE,
    XML_SAVE_UNKNOWN_ENCODING,
    XML_REGEXP_COMPILE_ERROR = 1450,
    XML_IO_UNKNOWN = 1500,
    XML_IO_EACCES,
    XML_IO_EAGAIN,
    XML_IO_EBADF,
    XML_IO_EBADMSG,
    XML_IO_EBUSY,
    XML_IO_ECANCELED,
    XML_IO_ECHILD,
    XML_IO_EDEADLK,
    XML_IO_EDOM,
    XML_IO_EEXIST,
    XML_IO_EFAULT,
    XML_IO_EFBIG,
    XML_IO_EINPROGRESS,
    XML_IO_EINTR,
    XML_IO_EINVAL,
    XML_IO_EIO,
    XML_IO_EISDIR,
    XML_IO_EMFILE,
    XML_IO_EMLINK,
    XML_IO_EMSGSIZE,
    XML_IO_ENAMETOOLONG,
    XML_IO_ENFILE,
    XML_IO_ENODEV,
    XML_IO_ENOENT,
    XML_IO_ENOEXEC,
    XML_IO_ENOLCK,
    XML_IO_ENOMEM,
    XML_IO_ENOSPC,
    XML_IO_ENOSYS,
    XML_IO_ENOTDIR,
    XML_IO_ENOTEMPTY,
    XML_IO_ENOTSUP,
    XML_IO_ENOTTY,
    XML_IO_ENXIO,
    XML_IO_EPERM,
    XML_IO_EPIPE,
    XML_IO_ERANGE,
    XML_IO_EROFS,
    XML_IO_ESPIPE,
    XML_IO_ESRCH,
    XML_IO_ETIMEDOUT,
    XML_IO_EXDEV,
    XML_IO_NETWORK_ATTEMPT,
    XML_IO_ENCODER,
    XML_IO_FLUSH,
    XML_IO_WRITE,
    XML_IO_NO_INPUT,
    XML_IO_BUFFER_FULL,
    XML_IO_LOAD_ERROR,
    XML_IO_ENOTSOCK,
    XML_IO_EISCONN,
    XML_IO_ECONNREFUSED,
    XML_IO_ENETUNREACH,
    XML_IO_EADDRINUSE,
    XML_IO_EALREADY,
    XML_IO_EAFNOSUPPORT,
    XML_XINCLUDE_RECURSION=1600,
    XML_XINCLUDE_PARSE_VALUE,
    XML_XINCLUDE_ENTITY_DEF_MISMATCH,
    XML_XINCLUDE_NO_HREF,
    XML_XINCLUDE_NO_FALLBACK,
    XML_XINCLUDE_HREF_URI,
    XML_XINCLUDE_TEXT_FRAGMENT,
    XML_XINCLUDE_TEXT_DOCUMENT,
    XML_XINCLUDE_INVALID_CHAR,
    XML_XINCLUDE_BUILD_FAILED,
    XML_XINCLUDE_UNKNOWN_ENCODING,
    XML_XINCLUDE_MULTIPLE_ROOT,
    XML_XINCLUDE_XPTR_FAILED,
    XML_XINCLUDE_XPTR_RESULT,
    XML_XINCLUDE_INCLUDE_IN_INCLUDE,
    XML_XINCLUDE_FALLBACKS_IN_INCLUDE,
    XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE,
    XML_XINCLUDE_DEPRECATED_NS,
    XML_XINCLUDE_FRAGMENT_ID,
    XML_CATALOG_MISSING_ATTR = 1650,
    XML_CATALOG_ENTRY_BROKEN,
    XML_CATALOG_PREFER_VALUE,
    XML_CATALOG_NOT_CATALOG,
    XML_CATALOG_RECURSION,
    XML_SCHEMAP_PREFIX_UNDEFINED = 1700,
    XML_SCHEMAP_ATTRFORMDEFAULT_VALUE,
    XML_SCHEMAP_ATTRGRP_NONAME_NOREF,
    XML_SCHEMAP_ATTR_NONAME_NOREF,
    XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF,
    XML_SCHEMAP_ELEMFORMDEFAULT_VALUE,
    XML_SCHEMAP_ELEM_NONAME_NOREF,
    XML_SCHEMAP_EXTENSION_NO_BASE,
    XML_SCHEMAP_FACET_NO_VALUE,
    XML_SCHEMAP_FAILED_BUILD_IMPORT,
    XML_SCHEMAP_GROUP_NONAME_NOREF,
    XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI,
    XML_SCHEMAP_IMPORT_REDEFINE_NSNAME,
    XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI,
    XML_SCHEMAP_INVALID_BOOLEAN,
    XML_SCHEMAP_INVALID_ENUM,
    XML_SCHEMAP_INVALID_FACET,
    XML_SCHEMAP_INVALID_FACET_VALUE,
    XML_SCHEMAP_INVALID_MAXOCCURS,
    XML_SCHEMAP_INVALID_MINOCCURS,
    XML_SCHEMAP_INVALID_REF_AND_SUBTYPE,
    XML_SCHEMAP_INVALID_WHITE_SPACE,
    XML_SCHEMAP_NOATTR_NOREF,
    XML_SCHEMAP_NOTATION_NO_NAME,
    XML_SCHEMAP_NOTYPE_NOREF,
    XML_SCHEMAP_REF_AND_SUBTYPE,
    XML_SCHEMAP_RESTRICTION_NONAME_NOREF,
    XML_SCHEMAP_SIMPLETYPE_NONAME,
    XML_SCHEMAP_TYPE_AND_SUBTYPE,
    XML_SCHEMAP_UNKNOWN_ALL_CHILD,
    XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTR_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP,
    XML_SCHEMAP_UNKNOWN_BASE_TYPE,
    XML_SCHEMAP_UNKNOWN_CHOICE_CHILD,
    XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD,
    XML_SCHEMAP_UNKNOWN_ELEM_CHILD,
    XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD,
    XML_SCHEMAP_UNKNOWN_FACET_CHILD,
    XML_SCHEMAP_UNKNOWN_FACET_TYPE,
    XML_SCHEMAP_UNKNOWN_GROUP_CHILD,
    XML_SCHEMAP_UNKNOWN_IMPORT_CHILD,
    XML_SCHEMAP_UNKNOWN_LIST_CHILD,
    XML_SCHEMAP_UNKNOWN_NOTATION_CHILD,
    XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_REF,
    XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD,
    XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD,
    XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD,
    XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD,
    XML_SCHEMAP_UNKNOWN_TYPE,
    XML_SCHEMAP_UNKNOWN_UNION_CHILD,
    XML_SCHEMAP_ELEM_DEFAULT_FIXED,
    XML_SCHEMAP_REGEXP_INVALID,
    XML_SCHEMAP_FAILED_LOAD,
    XML_SCHEMAP_NOTHING_TO_PARSE,
    XML_SCHEMAP_NOROOT,
    XML_SCHEMAP_REDEFINED_GROUP,
    XML_SCHEMAP_REDEFINED_TYPE,
    XML_SCHEMAP_REDEFINED_ELEMENT,
    XML_SCHEMAP_REDEFINED_ATTRGROUP,
    XML_SCHEMAP_REDEFINED_ATTR,
    XML_SCHEMAP_REDEFINED_NOTATION,
    XML_SCHEMAP_FAILED_PARSE,
    XML_SCHEMAP_UNKNOWN_PREFIX,
    XML_SCHEMAP_DEF_AND_PREFIX,
    XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD,
    XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI,
    XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI,
    XML_SCHEMAP_NOT_SCHEMA,
    XML_SCHEMAP_UNKNOWN_MEMBER_TYPE,
    XML_SCHEMAP_INVALID_ATTR_USE,
    XML_SCHEMAP_RECURSIVE,
    XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE,
    XML_SCHEMAP_INVALID_ATTR_COMBINATION,
    XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION,
    XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD,
    XML_SCHEMAP_INVALID_ATTR_NAME,
    XML_SCHEMAP_REF_AND_CONTENT,
    XML_SCHEMAP_CT_PROPS_CORRECT_1,
    XML_SCHEMAP_CT_PROPS_CORRECT_2,
    XML_SCHEMAP_CT_PROPS_CORRECT_3,
    XML_SCHEMAP_CT_PROPS_CORRECT_4,
    XML_SCHEMAP_CT_PROPS_CORRECT_5,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3,
    XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER,
    XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE,
    XML_SCHEMAP_UNION_NOT_EXPRESSIBLE,
    XML_SCHEMAP_SRC_IMPORT_3_1,
    XML_SCHEMAP_SRC_IMPORT_3_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3,
    XML_SCHEMAP_COS_CT_EXTENDS_1_3,
    XML_SCHEMAV_NOROOT = 1801,
    XML_SCHEMAV_UNDECLAREDELEM,
    XML_SCHEMAV_NOTTOPLEVEL,
    XML_SCHEMAV_MISSING,
    XML_SCHEMAV_WRONGELEM,
    XML_SCHEMAV_NOTYPE,
    XML_SCHEMAV_NOROLLBACK,
    XML_SCHEMAV_ISABSTRACT,
    XML_SCHEMAV_NOTEMPTY,
    XML_SCHEMAV_ELEMCONT,
    XML_SCHEMAV_HAVEDEFAULT,
    XML_SCHEMAV_NOTNILLABLE,
    XML_SCHEMAV_EXTRACONTENT,
    XML_SCHEMAV_INVALIDATTR,
    XML_SCHEMAV_INVALIDELEM,
    XML_SCHEMAV_NOTDETERMINIST,
    XML_SCHEMAV_CONSTRUCT,
    XML_SCHEMAV_INTERNAL,
    XML_SCHEMAV_NOTSIMPLE,
    XML_SCHEMAV_ATTRUNKNOWN,
    XML_SCHEMAV_ATTRINVALID,
    XML_SCHEMAV_VALUE,
    XML_SCHEMAV_FACET,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3,
    XML_SCHEMAV_CVC_TYPE_3_1_1,
    XML_SCHEMAV_CVC_TYPE_3_1_2,
    XML_SCHEMAV_CVC_FACET_VALID,
    XML_SCHEMAV_CVC_LENGTH_VALID,
    XML_SCHEMAV_CVC_MINLENGTH_VALID,
    XML_SCHEMAV_CVC_MAXLENGTH_VALID,
    XML_SCHEMAV_CVC_MININCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID,
    XML_SCHEMAV_CVC_TOTALDIGITS_VALID,
    XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID,
    XML_SCHEMAV_CVC_PATTERN_VALID,
    XML_SCHEMAV_CVC_ENUMERATION_VALID,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4,
    XML_SCHEMAV_CVC_ELT_1,
    XML_SCHEMAV_CVC_ELT_2,
    XML_SCHEMAV_CVC_ELT_3_1,
    XML_SCHEMAV_CVC_ELT_3_2_1,
    XML_SCHEMAV_CVC_ELT_3_2_2,
    XML_SCHEMAV_CVC_ELT_4_1,
    XML_SCHEMAV_CVC_ELT_4_2,
    XML_SCHEMAV_CVC_ELT_4_3,
    XML_SCHEMAV_CVC_ELT_5_1_1,
    XML_SCHEMAV_CVC_ELT_5_1_2,
    XML_SCHEMAV_CVC_ELT_5_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_2_2,
    XML_SCHEMAV_CVC_ELT_6,
    XML_SCHEMAV_CVC_ELT_7,
    XML_SCHEMAV_CVC_ATTRIBUTE_1,
    XML_SCHEMAV_CVC_ATTRIBUTE_2,
    XML_SCHEMAV_CVC_ATTRIBUTE_3,
    XML_SCHEMAV_CVC_ATTRIBUTE_4,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_4,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2,
    XML_SCHEMAV_ELEMENT_CONTENT,
    XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_1,
    XML_SCHEMAV_CVC_AU,
    XML_SCHEMAV_CVC_TYPE_1,
    XML_SCHEMAV_CVC_TYPE_2,
    XML_SCHEMAV_CVC_IDC,
    XML_SCHEMAV_CVC_WILDCARD,
    XML_SCHEMAV_MISC,
    XML_XPTR_UNKNOWN_SCHEME = 1900,
    XML_XPTR_CHILDSEQ_START,
    XML_XPTR_EVAL_FAILED,
    XML_XPTR_EXTRA_OBJECTS,
    XML_C14N_CREATE_CTXT = 1950,
    XML_C14N_REQUIRES_UTF8,
    XML_C14N_CREATE_STACK,
    XML_C14N_INVALID_NODE,
    XML_C14N_UNKNOW_NODE,
    XML_C14N_RELATIVE_NAMESPACE,
    XML_FTP_PASV_ANSWER = 2000,
    XML_FTP_EPSV_ANSWER,
    XML_FTP_ACCNT,
    XML_FTP_URL_SYNTAX,
    XML_HTTP_URL_SYNTAX = 2020,
    XML_HTTP_USE_IP,
    XML_HTTP_UNKNOWN_HOST,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_2,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_3,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_4,
    XML_SCHEMAP_SRC_RESOLVE,
    XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE,
    XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE,
    XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES,
    XML_SCHEMAP_ST_PROPS_CORRECT_1,
    XML_SCHEMAP_ST_PROPS_CORRECT_2,
    XML_SCHEMAP_ST_PROPS_CORRECT_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5,
    XML_SCHEMAP_COS_ST_DERIVED_OK_2_1,
    XML_SCHEMAP_COS_ST_DERIVED_OK_2_2,
    XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED,
    XML_SCHEMAP_S4S_ELEM_MISSING,
    XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED,
    XML_SCHEMAP_S4S_ATTR_MISSING,
    XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
    XML_SCHEMAP_SRC_ELEMENT_1,
    XML_SCHEMAP_SRC_ELEMENT_2_1,
    XML_SCHEMAP_SRC_ELEMENT_2_2,
    XML_SCHEMAP_SRC_ELEMENT_3,
    XML_SCHEMAP_P_PROPS_CORRECT_1,
    XML_SCHEMAP_P_PROPS_CORRECT_2_1,
    XML_SCHEMAP_P_PROPS_CORRECT_2_2,
    XML_SCHEMAP_E_PROPS_CORRECT_2,
    XML_SCHEMAP_E_PROPS_CORRECT_3,
    XML_SCHEMAP_E_PROPS_CORRECT_4,
    XML_SCHEMAP_E_PROPS_CORRECT_5,
    XML_SCHEMAP_E_PROPS_CORRECT_6,
    XML_SCHEMAP_SRC_INCLUDE,
    XML_SCHEMAP_SRC_ATTRIBUTE_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_3_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_3_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_4,
    XML_SCHEMAP_NO_XMLNS,
    XML_SCHEMAP_NO_XSI,
    XML_SCHEMAP_COS_VALID_DEFAULT_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2,
    XML_SCHEMAP_CVC_SIMPLE_TYPE,
    XML_SCHEMAP_COS_CT_EXTENDS_1_1,
    XML_SCHEMAP_SRC_IMPORT_1_1,
    XML_SCHEMAP_SRC_IMPORT_1_2,
    XML_SCHEMAP_SRC_IMPORT_2,
    XML_SCHEMAP_SRC_IMPORT_2_1,
    XML_SCHEMAP_SRC_IMPORT_2_2,
    XML_SCHEMAP_INTERNAL,
    XML_SCHEMAP_NOT_DETERMINISTIC,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3,
    XML_SCHEMAP_MG_PROPS_CORRECT_1,
    XML_SCHEMAP_MG_PROPS_CORRECT_2,
    XML_SCHEMAP_SRC_CT_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3,
    XML_SCHEMAP_AU_PROPS_CORRECT_2,
    XML_SCHEMAP_A_PROPS_CORRECT_2,
    XML_SCHEMAP_C_PROPS_CORRECT,
    XML_SCHEMAP_SRC_REDEFINE,
    XML_SCHEMAP_SRC_IMPORT,
    XML_SCHEMAP_WARN_SKIP_SCHEMA,
    XML_SCHEMAP_WARN_UNLOCATED_SCHEMA,
    XML_SCHEMAP_WARN_ATTR_REDECL_PROH,
    XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH,
    XML_SCHEMAP_AG_PROPS_CORRECT,
    XML_SCHEMAP_COS_CT_EXTENDS_1_2,
    XML_SCHEMAP_AU_PROPS_CORRECT,
    XML_SCHEMAP_A_PROPS_CORRECT_3,
    XML_SCHEMAP_COS_ALL_LIMITED,
    XML_SCHEMATRONV_ASSERT = 4000,
    XML_SCHEMATRONV_REPORT,
    XML_MODULE_OPEN = 4900,
    XML_MODULE_CLOSE,
    XML_CHECK_FOUND_ELEMENT = 5000,
    XML_CHECK_FOUND_ATTRIBUTE,
    XML_CHECK_FOUND_TEXT,
    XML_CHECK_FOUND_CDATA,
    XML_CHECK_FOUND_ENTITYREF,
    XML_CHECK_FOUND_ENTITY,
    XML_CHECK_FOUND_PI,
    XML_CHECK_FOUND_COMMENT,
    XML_CHECK_FOUND_DOCTYPE,
    XML_CHECK_FOUND_FRAGMENT,
    XML_CHECK_FOUND_NOTATION,
    XML_CHECK_UNKNOWN_NODE,
    XML_CHECK_ENTITY_TYPE,
    XML_CHECK_NO_PARENT,
    XML_CHECK_NO_DOC,
    XML_CHECK_NO_NAME,
    XML_CHECK_NO_ELEM,
    XML_CHECK_WRONG_DOC,
    XML_CHECK_NO_PREV,
    XML_CHECK_WRONG_PREV,
    XML_CHECK_NO_NEXT,
    XML_CHECK_WRONG_NEXT,
    XML_CHECK_NOT_DTD,
    XML_CHECK_NOT_ATTR,
    XML_CHECK_NOT_ATTR_DECL,
    XML_CHECK_NOT_ELEM_DECL,
    XML_CHECK_NOT_ENTITY_DECL,
    XML_CHECK_NOT_NS_DECL,
    XML_CHECK_NO_HREF,
    XML_CHECK_WRONG_PARENT,
    XML_CHECK_NS_SCOPE,
    XML_CHECK_NS_ANCESTOR,
    XML_CHECK_NOT_UTF8,
    XML_CHECK_NO_DICT,
    XML_CHECK_NOT_NCNAME,
    XML_CHECK_OUTSIDE_DICT,
    XML_CHECK_WRONG_NAME,
    XML_CHECK_NAME_NOT_NULL,
    XML_I18N_NO_NAME = 6000,
    XML_I18N_NO_HANDLER,
    XML_I18N_EXCESS_HANDLER,
    XML_I18N_CONV_FAILED,
    XML_I18N_NO_OUTPUT




} xmlParserErrors;
# 844 "/var/include/libxml2/libxml/xmlerror.h"
typedef void ( *xmlGenericErrorFunc) (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
# 855 "/var/include/libxml2/libxml/xmlerror.h"
typedef void ( *xmlStructuredErrorFunc) (void *userData, xmlErrorPtr error);





 void
    xmlSetGenericErrorFunc (void *ctx,
     xmlGenericErrorFunc handler);
 void
    initGenericErrorDefaultFunc (xmlGenericErrorFunc *handler);

 void
    xmlSetStructuredErrorFunc (void *ctx,
     xmlStructuredErrorFunc handler);




 void
    xmlParserError (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserWarning (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserValidityError (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserValidityWarning (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserPrintFileInfo (xmlParserInputPtr input);
 void
    xmlParserPrintFileContext (xmlParserInputPtr input);




 xmlErrorPtr
    xmlGetLastError (void);
 void
    xmlResetLastError (void);
 xmlErrorPtr
    xmlCtxtGetLastError (void *ctx);
 void
    xmlCtxtResetLastError (void *ctx);
 void
    xmlResetError (xmlErrorPtr err);
 int
    xmlCopyError (xmlErrorPtr from,
     xmlErrorPtr to);
# 16 "/var/include/libxml2/libxml/valid.h" 2

# 1 "/var/include/libxml2/libxml/list.h" 1
# 20 "/var/include/libxml2/libxml/list.h"
typedef struct _xmlLink xmlLink;
typedef xmlLink *xmlLinkPtr;

typedef struct _xmlList xmlList;
typedef xmlList *xmlListPtr;







typedef void (*xmlListDeallocator) (xmlLinkPtr lk);
# 42 "/var/include/libxml2/libxml/list.h"
typedef int (*xmlListDataCompare) (const void *data0, const void *data1);
# 52 "/var/include/libxml2/libxml/list.h"
typedef int (*xmlListWalker) (const void *data, const void *user);


 xmlListPtr
  xmlListCreate (xmlListDeallocator deallocator,
                                  xmlListDataCompare compare);
 void
  xmlListDelete (xmlListPtr l);


 void *
  xmlListSearch (xmlListPtr l,
      void *data);
 void *
  xmlListReverseSearch (xmlListPtr l,
      void *data);
 int
  xmlListInsert (xmlListPtr l,
      void *data) ;
 int
  xmlListAppend (xmlListPtr l,
      void *data) ;
 int
  xmlListRemoveFirst (xmlListPtr l,
      void *data);
 int
  xmlListRemoveLast (xmlListPtr l,
      void *data);
 int
  xmlListRemoveAll (xmlListPtr l,
      void *data);
 void
  xmlListClear (xmlListPtr l);
 int
  xmlListEmpty (xmlListPtr l);
 xmlLinkPtr
  xmlListFront (xmlListPtr l);
 xmlLinkPtr
  xmlListEnd (xmlListPtr l);
 int
  xmlListSize (xmlListPtr l);

 void
  xmlListPopFront (xmlListPtr l);
 void
  xmlListPopBack (xmlListPtr l);
 int
  xmlListPushFront (xmlListPtr l,
      void *data);
 int
  xmlListPushBack (xmlListPtr l,
      void *data);


 void
  xmlListReverse (xmlListPtr l);
 void
  xmlListSort (xmlListPtr l);
 void
  xmlListWalk (xmlListPtr l,
      xmlListWalker walker,
      const void *user);
 void
  xmlListReverseWalk (xmlListPtr l,
      xmlListWalker walker,
      const void *user);
 void
  xmlListMerge (xmlListPtr l1,
      xmlListPtr l2);
 xmlListPtr
  xmlListDup (const xmlListPtr old);
 int
  xmlListCopy (xmlListPtr cur,
      const xmlListPtr old);

 void *
  xmlLinkGetData (xmlLinkPtr lk);
# 18 "/var/include/libxml2/libxml/valid.h" 2
# 1 "/var/include/libxml2/libxml/xmlautomata.h" 1
# 29 "/var/include/libxml2/libxml/xmlautomata.h"
typedef struct _xmlAutomata xmlAutomata;
typedef xmlAutomata *xmlAutomataPtr;






typedef struct _xmlAutomataState xmlAutomataState;
typedef xmlAutomataState *xmlAutomataStatePtr;




 xmlAutomataPtr
      xmlNewAutomata (void);
 void
      xmlFreeAutomata (xmlAutomataPtr am);

 xmlAutomataStatePtr
      xmlAutomataGetInitState (xmlAutomataPtr am);
 int
      xmlAutomataSetFinalState (xmlAutomataPtr am,
       xmlAutomataStatePtr state);
 xmlAutomataStatePtr
      xmlAutomataNewState (xmlAutomataPtr am);
 xmlAutomataStatePtr
      xmlAutomataNewTransition (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewTransition2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       void *data);
 xmlAutomataStatePtr
                    xmlAutomataNewNegTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       void *data);

 xmlAutomataStatePtr
      xmlAutomataNewCountTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewCountTrans2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewOnceTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewOnceTrans2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewAllTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int lax);
 xmlAutomataStatePtr
      xmlAutomataNewEpsilon (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to);
 xmlAutomataStatePtr
      xmlAutomataNewCountedTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int counter);
 xmlAutomataStatePtr
      xmlAutomataNewCounterTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int counter);
 int
      xmlAutomataNewCounter (xmlAutomataPtr am,
       int min,
       int max);

 xmlRegexpPtr
      xmlAutomataCompile (xmlAutomataPtr am);
 int
      xmlAutomataIsDeterminist (xmlAutomataPtr am);
# 19 "/var/include/libxml2/libxml/valid.h" 2
# 28 "/var/include/libxml2/libxml/valid.h"
typedef struct _xmlValidState xmlValidState;
typedef xmlValidState *xmlValidStatePtr;
# 42 "/var/include/libxml2/libxml/valid.h"
typedef void ( *xmlValidityErrorFunc) (void *ctx,
        const char *msg,
        ...) __attribute__((__format__(__printf__,2,3)));
# 57 "/var/include/libxml2/libxml/valid.h"
typedef void ( *xmlValidityWarningFunc) (void *ctx,
          const char *msg,
          ...) __attribute__((__format__(__printf__,2,3)));
# 80 "/var/include/libxml2/libxml/valid.h"
typedef struct _xmlValidCtxt xmlValidCtxt;
typedef xmlValidCtxt *xmlValidCtxtPtr;
struct _xmlValidCtxt {
    void *userData;
    xmlValidityErrorFunc error;
    xmlValidityWarningFunc warning;


    xmlNodePtr node;
    int nodeNr;
    int nodeMax;
    xmlNodePtr *nodeTab;

    unsigned int finishDtd;
    xmlDocPtr doc;
    int valid;


    xmlValidState *vstate;
    int vstateNr;
    int vstateMax;
    xmlValidState *vstateTab;


    xmlAutomataPtr am;
    xmlAutomataStatePtr state;




};






typedef struct _xmlHashTable xmlNotationTable;
typedef xmlNotationTable *xmlNotationTablePtr;






typedef struct _xmlHashTable xmlElementTable;
typedef xmlElementTable *xmlElementTablePtr;






typedef struct _xmlHashTable xmlAttributeTable;
typedef xmlAttributeTable *xmlAttributeTablePtr;






typedef struct _xmlHashTable xmlIDTable;
typedef xmlIDTable *xmlIDTablePtr;






typedef struct _xmlHashTable xmlRefTable;
typedef xmlRefTable *xmlRefTablePtr;


 xmlNotationPtr
  xmlAddNotationDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *name,
      const xmlChar *PublicID,
      const xmlChar *SystemID);

 xmlNotationTablePtr
  xmlCopyNotationTable (xmlNotationTablePtr table);

 void
  xmlFreeNotationTable (xmlNotationTablePtr table);

 void
  xmlDumpNotationDecl (xmlBufferPtr buf,
      xmlNotationPtr nota);
 void
  xmlDumpNotationTable (xmlBufferPtr buf,
      xmlNotationTablePtr table);




 xmlElementContentPtr
  xmlNewElementContent (const xmlChar *name,
      xmlElementContentType type);
 xmlElementContentPtr
  xmlCopyElementContent (xmlElementContentPtr content);
 void
  xmlFreeElementContent (xmlElementContentPtr cur);

 xmlElementContentPtr
  xmlNewDocElementContent (xmlDocPtr doc,
      const xmlChar *name,
      xmlElementContentType type);
 xmlElementContentPtr
  xmlCopyDocElementContent(xmlDocPtr doc,
      xmlElementContentPtr content);
 void
  xmlFreeDocElementContent(xmlDocPtr doc,
      xmlElementContentPtr cur);
 void
  xmlSnprintfElementContent(char *buf,
      int size,
                                  xmlElementContentPtr content,
      int englob);


 void
  xmlSprintfElementContent(char *buf,
                                  xmlElementContentPtr content,
      int englob);




 xmlElementPtr
  xmlAddElementDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *name,
      xmlElementTypeVal type,
      xmlElementContentPtr content);

 xmlElementTablePtr
  xmlCopyElementTable (xmlElementTablePtr table);

 void
  xmlFreeElementTable (xmlElementTablePtr table);

 void
  xmlDumpElementTable (xmlBufferPtr buf,
      xmlElementTablePtr table);
 void
  xmlDumpElementDecl (xmlBufferPtr buf,
      xmlElementPtr elem);



 xmlEnumerationPtr
  xmlCreateEnumeration (const xmlChar *name);
 void
  xmlFreeEnumeration (xmlEnumerationPtr cur);

 xmlEnumerationPtr
  xmlCopyEnumeration (xmlEnumerationPtr cur);



 xmlAttributePtr
  xmlAddAttributeDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name,
      const xmlChar *ns,
      xmlAttributeType type,
      xmlAttributeDefault def,
      const xmlChar *defaultValue,
      xmlEnumerationPtr tree);

 xmlAttributeTablePtr
  xmlCopyAttributeTable (xmlAttributeTablePtr table);

 void
  xmlFreeAttributeTable (xmlAttributeTablePtr table);

 void
  xmlDumpAttributeTable (xmlBufferPtr buf,
     xmlAttributeTablePtr table);
 void
  xmlDumpAttributeDecl (xmlBufferPtr buf,
     xmlAttributePtr attr);



 xmlIDPtr
  xmlAddID (xmlValidCtxtPtr ctxt,
     xmlDocPtr doc,
     const xmlChar *value,
     xmlAttrPtr attr);
 void
  xmlFreeIDTable (xmlIDTablePtr table);
 xmlAttrPtr
  xmlGetID (xmlDocPtr doc,
     const xmlChar *ID);
 int
  xmlIsID (xmlDocPtr doc,
     xmlNodePtr elem,
     xmlAttrPtr attr);
 int
  xmlRemoveID (xmlDocPtr doc,
     xmlAttrPtr attr);


 xmlRefPtr
  xmlAddRef (xmlValidCtxtPtr ctxt,
     xmlDocPtr doc,
     const xmlChar *value,
     xmlAttrPtr attr);
 void
  xmlFreeRefTable (xmlRefTablePtr table);
 int
  xmlIsRef (xmlDocPtr doc,
     xmlNodePtr elem,
     xmlAttrPtr attr);
 int
  xmlRemoveRef (xmlDocPtr doc,
     xmlAttrPtr attr);
 xmlListPtr
  xmlGetRefs (xmlDocPtr doc,
     const xmlChar *ID);






 xmlValidCtxtPtr
  xmlNewValidCtxt(void);
 void
  xmlFreeValidCtxt(xmlValidCtxtPtr);

 int
  xmlValidateRoot (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateElementDecl (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlElementPtr elem);
 xmlChar *
  xmlValidNormalizeAttributeValue(xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *name,
      const xmlChar *value);
 xmlChar *
  xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *name,
      const xmlChar *value);
 int
  xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlAttributePtr attr);
 int
  xmlValidateAttributeValue(xmlAttributeType type,
      const xmlChar *value);
 int
  xmlValidateNotationDecl (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlNotationPtr nota);
 int
  xmlValidateDtd (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlDtdPtr dtd);
 int
  xmlValidateDtdFinal (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateDocument (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem);
 int
  xmlValidateOneElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlNodePtr elem);
 int
  xmlValidateOneAttribute (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      xmlAttrPtr attr,
      const xmlChar *value);
 int
  xmlValidateOneNamespace (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *prefix,
      xmlNsPtr ns,
      const xmlChar *value);
 int
  xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);



 int
  xmlValidateNotationUse (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      const xmlChar *notationName);


 int
  xmlIsMixedElement (xmlDocPtr doc,
      const xmlChar *name);
 xmlAttributePtr
  xmlGetDtdAttrDesc (xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name);
 xmlAttributePtr
  xmlGetDtdQAttrDesc (xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name,
      const xmlChar *prefix);
 xmlNotationPtr
  xmlGetDtdNotationDesc (xmlDtdPtr dtd,
      const xmlChar *name);
 xmlElementPtr
  xmlGetDtdQElementDesc (xmlDtdPtr dtd,
      const xmlChar *name,
      const xmlChar *prefix);
 xmlElementPtr
  xmlGetDtdElementDesc (xmlDtdPtr dtd,
      const xmlChar *name);



 int
  xmlValidGetPotentialChildren(xmlElementContent *ctree,
      const xmlChar **names,
      int *len,
      int max);

 int
  xmlValidGetValidElements(xmlNode *prev,
      xmlNode *next,
      const xmlChar **names,
      int max);
 int
  xmlValidateNameValue (const xmlChar *value);
 int
  xmlValidateNamesValue (const xmlChar *value);
 int
  xmlValidateNmtokenValue (const xmlChar *value);
 int
  xmlValidateNmtokensValue(const xmlChar *value);





 int
  xmlValidBuildContentModel(xmlValidCtxtPtr ctxt,
      xmlElementPtr elem);

 int
  xmlValidatePushElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *qname);
 int
  xmlValidatePushCData (xmlValidCtxtPtr ctxt,
      const xmlChar *data,
      int len);
 int
  xmlValidatePopElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *qname);
# 20 "/var/include/libxml2/libxml/parser.h" 2
# 1 "/var/include/libxml2/libxml/entities.h" 1
# 24 "/var/include/libxml2/libxml/entities.h"
typedef enum {
    XML_INTERNAL_GENERAL_ENTITY = 1,
    XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2,
    XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3,
    XML_INTERNAL_PARAMETER_ENTITY = 4,
    XML_EXTERNAL_PARAMETER_ENTITY = 5,
    XML_INTERNAL_PREDEFINED_ENTITY = 6
} xmlEntityType;






struct _xmlEntity {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    xmlChar *orig;
    xmlChar *content;
    int length;
    xmlEntityType etype;
    const xmlChar *ExternalID;
    const xmlChar *SystemID;

    struct _xmlEntity *nexte;
    const xmlChar *URI;
    int owner;
    int checked;


};






typedef struct _xmlHashTable xmlEntitiesTable;
typedef xmlEntitiesTable *xmlEntitiesTablePtr;






 void
  xmlInitializePredefinedEntities (void);


 xmlEntityPtr
   xmlNewEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlAddDocEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlAddDtdEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlGetPredefinedEntity (const xmlChar *name);
 xmlEntityPtr
   xmlGetDocEntity (xmlDocPtr doc,
       const xmlChar *name);
 xmlEntityPtr
   xmlGetDtdEntity (xmlDocPtr doc,
       const xmlChar *name);
 xmlEntityPtr
   xmlGetParameterEntity (xmlDocPtr doc,
       const xmlChar *name);

 const xmlChar *
   xmlEncodeEntities (xmlDocPtr doc,
       const xmlChar *input);

 xmlChar *
   xmlEncodeEntitiesReentrant(xmlDocPtr doc,
       const xmlChar *input);
 xmlChar *
   xmlEncodeSpecialChars (xmlDocPtr doc,
       const xmlChar *input);
 xmlEntitiesTablePtr
   xmlCreateEntitiesTable (void);

 xmlEntitiesTablePtr
   xmlCopyEntitiesTable (xmlEntitiesTablePtr table);

 void
   xmlFreeEntitiesTable (xmlEntitiesTablePtr table);

 void
   xmlDumpEntitiesTable (xmlBufferPtr buf,
       xmlEntitiesTablePtr table);
 void
   xmlDumpEntityDecl (xmlBufferPtr buf,
       xmlEntityPtr ent);


 void
   xmlCleanupPredefinedEntities(void);
# 21 "/var/include/libxml2/libxml/parser.h" 2
# 1 "/var/include/libxml2/libxml/xmlerror.h" 1
# 22 "/var/include/libxml2/libxml/parser.h" 2
# 52 "/var/include/libxml2/libxml/parser.h"
typedef void (* xmlParserInputDeallocate)(xmlChar *str);

struct _xmlParserInput {

    xmlParserInputBufferPtr buf;

    const char *filename;
    const char *directory;
    const xmlChar *base;
    const xmlChar *cur;
    const xmlChar *end;
    int length;
    int line;
    int col;





    unsigned long consumed;
    xmlParserInputDeallocate free;
    const xmlChar *encoding;
    const xmlChar *version;
    int standalone;
    int id;
};
# 86 "/var/include/libxml2/libxml/parser.h"
typedef struct _xmlParserNodeInfo xmlParserNodeInfo;
typedef xmlParserNodeInfo *xmlParserNodeInfoPtr;

struct _xmlParserNodeInfo {
  const struct _xmlNode* node;

  unsigned long begin_pos;
  unsigned long begin_line;
  unsigned long end_pos;
  unsigned long end_line;
};

typedef struct _xmlParserNodeInfoSeq xmlParserNodeInfoSeq;
typedef xmlParserNodeInfoSeq *xmlParserNodeInfoSeqPtr;
struct _xmlParserNodeInfoSeq {
  unsigned long maximum;
  unsigned long length;
  xmlParserNodeInfo* buffer;
};







typedef enum {
    XML_PARSER_EOF = -1,
    XML_PARSER_START = 0,
    XML_PARSER_MISC,
    XML_PARSER_PI,
    XML_PARSER_DTD,
    XML_PARSER_PROLOG,
    XML_PARSER_COMMENT,
    XML_PARSER_START_TAG,
    XML_PARSER_CONTENT,
    XML_PARSER_CDATA_SECTION,
    XML_PARSER_END_TAG,
    XML_PARSER_ENTITY_DECL,
    XML_PARSER_ENTITY_VALUE,
    XML_PARSER_ATTRIBUTE_VALUE,
    XML_PARSER_SYSTEM_LITERAL,
    XML_PARSER_EPILOG,
    XML_PARSER_IGNORE,
    XML_PARSER_PUBLIC_LITERAL
} xmlParserInputState;
# 163 "/var/include/libxml2/libxml/parser.h"
typedef enum {
    XML_PARSE_UNKNOWN = 0,
    XML_PARSE_DOM = 1,
    XML_PARSE_SAX = 2,
    XML_PARSE_PUSH_DOM = 3,
    XML_PARSE_PUSH_SAX = 4,
    XML_PARSE_READER = 5
} xmlParserMode;
# 184 "/var/include/libxml2/libxml/parser.h"
struct _xmlParserCtxt {
    struct _xmlSAXHandler *sax;
    void *userData;
    xmlDocPtr myDoc;
    int wellFormed;
    int replaceEntities;
    const xmlChar *version;
    const xmlChar *encoding;
    int standalone;
    int html;


    xmlParserInputPtr input;
    int inputNr;
    int inputMax;
    xmlParserInputPtr *inputTab;


    xmlNodePtr node;
    int nodeNr;
    int nodeMax;
    xmlNodePtr *nodeTab;

    int record_info;
    xmlParserNodeInfoSeq node_seq;

    int errNo;

    int hasExternalSubset;
    int hasPErefs;
    int external;

    int valid;
    int validate;
    xmlValidCtxt vctxt;

    xmlParserInputState instate;
    int token;

    char *directory;


    const xmlChar *name;
    int nameNr;
    int nameMax;
    const xmlChar * *nameTab;

    long nbChars;
    long checkIndex;
    int keepBlanks;
    int disableSAX;
    int inSubset;
    const xmlChar * intSubName;
    xmlChar * extSubURI;
    xmlChar * extSubSystem;


    int * space;
    int spaceNr;
    int spaceMax;
    int * spaceTab;

    int depth;
    xmlParserInputPtr entity;
    int charset;

    int nodelen;
    int nodemem;
    int pedantic;
    void *_private;

    int loadsubset;
    int linenumbers;
    void *catalogs;
    int recovery;
    int progressive;
    xmlDictPtr dict;
    const xmlChar * *atts;
    int maxatts;
    int docdict;




    const xmlChar *str_xml;
    const xmlChar *str_xmlns;
    const xmlChar *str_xml_ns;




    int sax2;
    int nsNr;
    int nsMax;
    const xmlChar * *nsTab;
    int *attallocs;
    void * *pushTab;
    xmlHashTablePtr attsDefault;
    xmlHashTablePtr attsSpecial;
    int nsWellFormed;
    int options;




    int dictNames;
    int freeElemsNr;
    xmlNodePtr freeElems;
    int freeAttrsNr;
    xmlAttrPtr freeAttrs;




    xmlError lastError;
    xmlParserMode parseMode;
    unsigned long nbentities;
    unsigned long sizeentities;
};






struct _xmlSAXLocator {
    const xmlChar *(*getPublicId)(void *ctx);
    const xmlChar *(*getSystemId)(void *ctx);
    int (*getLineNumber)(void *ctx);
    int (*getColumnNumber)(void *ctx);
};
# 338 "/var/include/libxml2/libxml/parser.h"
typedef xmlParserInputPtr (*resolveEntitySAXFunc) (void *ctx,
    const xmlChar *publicId,
    const xmlChar *systemId);
# 350 "/var/include/libxml2/libxml/parser.h"
typedef void (*internalSubsetSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *ExternalID,
    const xmlChar *SystemID);
# 363 "/var/include/libxml2/libxml/parser.h"
typedef void (*externalSubsetSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *ExternalID,
    const xmlChar *SystemID);
# 376 "/var/include/libxml2/libxml/parser.h"
typedef xmlEntityPtr (*getEntitySAXFunc) (void *ctx,
    const xmlChar *name);
# 387 "/var/include/libxml2/libxml/parser.h"
typedef xmlEntityPtr (*getParameterEntitySAXFunc) (void *ctx,
    const xmlChar *name);
# 400 "/var/include/libxml2/libxml/parser.h"
typedef void (*entityDeclSAXFunc) (void *ctx,
    const xmlChar *name,
    int type,
    const xmlChar *publicId,
    const xmlChar *systemId,
    xmlChar *content);
# 415 "/var/include/libxml2/libxml/parser.h"
typedef void (*notationDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    const xmlChar *publicId,
    const xmlChar *systemId);
# 431 "/var/include/libxml2/libxml/parser.h"
typedef void (*attributeDeclSAXFunc)(void *ctx,
    const xmlChar *elem,
    const xmlChar *fullname,
    int type,
    int def,
    const xmlChar *defaultValue,
    xmlEnumerationPtr tree);
# 447 "/var/include/libxml2/libxml/parser.h"
typedef void (*elementDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    int type,
    xmlElementContentPtr content);
# 461 "/var/include/libxml2/libxml/parser.h"
typedef void (*unparsedEntityDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    const xmlChar *publicId,
    const xmlChar *systemId,
    const xmlChar *notationName);
# 474 "/var/include/libxml2/libxml/parser.h"
typedef void (*setDocumentLocatorSAXFunc) (void *ctx,
    xmlSAXLocatorPtr loc);






typedef void (*startDocumentSAXFunc) (void *ctx);






typedef void (*endDocumentSAXFunc) (void *ctx);
# 498 "/var/include/libxml2/libxml/parser.h"
typedef void (*startElementSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar **atts);







typedef void (*endElementSAXFunc) (void *ctx,
    const xmlChar *name);
# 521 "/var/include/libxml2/libxml/parser.h"
typedef void (*attributeSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *value);







typedef void (*referenceSAXFunc) (void *ctx,
    const xmlChar *name);
# 541 "/var/include/libxml2/libxml/parser.h"
typedef void (*charactersSAXFunc) (void *ctx,
    const xmlChar *ch,
    int len);
# 553 "/var/include/libxml2/libxml/parser.h"
typedef void (*ignorableWhitespaceSAXFunc) (void *ctx,
    const xmlChar *ch,
    int len);
# 564 "/var/include/libxml2/libxml/parser.h"
typedef void (*processingInstructionSAXFunc) (void *ctx,
    const xmlChar *target,
    const xmlChar *data);







typedef void (*commentSAXFunc) (void *ctx,
    const xmlChar *value);
# 584 "/var/include/libxml2/libxml/parser.h"
typedef void (*cdataBlockSAXFunc) (
                         void *ctx,
    const xmlChar *value,
    int len);
# 596 "/var/include/libxml2/libxml/parser.h"
typedef void ( *warningSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 606 "/var/include/libxml2/libxml/parser.h"
typedef void ( *errorSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 618 "/var/include/libxml2/libxml/parser.h"
typedef void ( *fatalErrorSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 628 "/var/include/libxml2/libxml/parser.h"
typedef int (*isStandaloneSAXFunc) (void *ctx);
# 637 "/var/include/libxml2/libxml/parser.h"
typedef int (*hasInternalSubsetSAXFunc) (void *ctx);
# 647 "/var/include/libxml2/libxml/parser.h"
typedef int (*hasExternalSubsetSAXFunc) (void *ctx);
# 680 "/var/include/libxml2/libxml/parser.h"
typedef void (*startElementNsSAX2Func) (void *ctx,
     const xmlChar *localname,
     const xmlChar *prefix,
     const xmlChar *URI,
     int nb_namespaces,
     const xmlChar **namespaces,
     int nb_attributes,
     int nb_defaulted,
     const xmlChar **attributes);
# 701 "/var/include/libxml2/libxml/parser.h"
typedef void (*endElementNsSAX2Func) (void *ctx,
     const xmlChar *localname,
     const xmlChar *prefix,
     const xmlChar *URI);


struct _xmlSAXHandler {
    internalSubsetSAXFunc internalSubset;
    isStandaloneSAXFunc isStandalone;
    hasInternalSubsetSAXFunc hasInternalSubset;
    hasExternalSubsetSAXFunc hasExternalSubset;
    resolveEntitySAXFunc resolveEntity;
    getEntitySAXFunc getEntity;
    entityDeclSAXFunc entityDecl;
    notationDeclSAXFunc notationDecl;
    attributeDeclSAXFunc attributeDecl;
    elementDeclSAXFunc elementDecl;
    unparsedEntityDeclSAXFunc unparsedEntityDecl;
    setDocumentLocatorSAXFunc setDocumentLocator;
    startDocumentSAXFunc startDocument;
    endDocumentSAXFunc endDocument;
    startElementSAXFunc startElement;
    endElementSAXFunc endElement;
    referenceSAXFunc reference;
    charactersSAXFunc characters;
    ignorableWhitespaceSAXFunc ignorableWhitespace;
    processingInstructionSAXFunc processingInstruction;
    commentSAXFunc comment;
    warningSAXFunc warning;
    errorSAXFunc error;
    fatalErrorSAXFunc fatalError;
    getParameterEntitySAXFunc getParameterEntity;
    cdataBlockSAXFunc cdataBlock;
    externalSubsetSAXFunc externalSubset;
    unsigned int initialized;

    void *_private;
    startElementNsSAX2Func startElementNs;
    endElementNsSAX2Func endElementNs;
    xmlStructuredErrorFunc serror;
};




typedef struct _xmlSAXHandlerV1 xmlSAXHandlerV1;
typedef xmlSAXHandlerV1 *xmlSAXHandlerV1Ptr;
struct _xmlSAXHandlerV1 {
    internalSubsetSAXFunc internalSubset;
    isStandaloneSAXFunc isStandalone;
    hasInternalSubsetSAXFunc hasInternalSubset;
    hasExternalSubsetSAXFunc hasExternalSubset;
    resolveEntitySAXFunc resolveEntity;
    getEntitySAXFunc getEntity;
    entityDeclSAXFunc entityDecl;
    notationDeclSAXFunc notationDecl;
    attributeDeclSAXFunc attributeDecl;
    elementDeclSAXFunc elementDecl;
    unparsedEntityDeclSAXFunc unparsedEntityDecl;
    setDocumentLocatorSAXFunc setDocumentLocator;
    startDocumentSAXFunc startDocument;
    endDocumentSAXFunc endDocument;
    startElementSAXFunc startElement;
    endElementSAXFunc endElement;
    referenceSAXFunc reference;
    charactersSAXFunc characters;
    ignorableWhitespaceSAXFunc ignorableWhitespace;
    processingInstructionSAXFunc processingInstruction;
    commentSAXFunc comment;
    warningSAXFunc warning;
    errorSAXFunc error;
    fatalErrorSAXFunc fatalError;
    getParameterEntitySAXFunc getParameterEntity;
    cdataBlockSAXFunc cdataBlock;
    externalSubsetSAXFunc externalSubset;
    unsigned int initialized;
};
# 790 "/var/include/libxml2/libxml/parser.h"
typedef xmlParserInputPtr (*xmlExternalEntityLoader) (const char *URL,
      const char *ID,
      xmlParserCtxtPtr context);





# 1 "/var/include/libxml2/libxml/encoding.h" 1
# 36 "/var/include/libxml2/libxml/encoding.h"
struct UConverter;
typedef struct UConverter UConverter;



typedef uint16_t UChar;
# 70 "/var/include/libxml2/libxml/encoding.h"
typedef enum {
    XML_CHAR_ENCODING_ERROR= -1,
    XML_CHAR_ENCODING_NONE= 0,
    XML_CHAR_ENCODING_UTF8= 1,
    XML_CHAR_ENCODING_UTF16LE= 2,
    XML_CHAR_ENCODING_UTF16BE= 3,
    XML_CHAR_ENCODING_UCS4LE= 4,
    XML_CHAR_ENCODING_UCS4BE= 5,
    XML_CHAR_ENCODING_EBCDIC= 6,
    XML_CHAR_ENCODING_UCS4_2143=7,
    XML_CHAR_ENCODING_UCS4_3412=8,
    XML_CHAR_ENCODING_UCS2= 9,
    XML_CHAR_ENCODING_8859_1= 10,
    XML_CHAR_ENCODING_8859_2= 11,
    XML_CHAR_ENCODING_8859_3= 12,
    XML_CHAR_ENCODING_8859_4= 13,
    XML_CHAR_ENCODING_8859_5= 14,
    XML_CHAR_ENCODING_8859_6= 15,
    XML_CHAR_ENCODING_8859_7= 16,
    XML_CHAR_ENCODING_8859_8= 17,
    XML_CHAR_ENCODING_8859_9= 18,
    XML_CHAR_ENCODING_2022_JP= 19,
    XML_CHAR_ENCODING_SHIFT_JIS=20,
    XML_CHAR_ENCODING_EUC_JP= 21,
    XML_CHAR_ENCODING_ASCII= 22
} xmlCharEncoding;
# 113 "/var/include/libxml2/libxml/encoding.h"
typedef int (* xmlCharEncodingInputFunc)(unsigned char *out, int *outlen,
                                         const unsigned char *in, int *inlen);
# 135 "/var/include/libxml2/libxml/encoding.h"
typedef int (* xmlCharEncodingOutputFunc)(unsigned char *out, int *outlen,
                                          const unsigned char *in, int *inlen);







typedef struct _xmlCharEncodingHandler xmlCharEncodingHandler;
typedef xmlCharEncodingHandler *xmlCharEncodingHandlerPtr;
struct _xmlCharEncodingHandler {
    char *name;
    xmlCharEncodingInputFunc input;
    xmlCharEncodingOutputFunc output;





    UConverter *utf8Converter;
    UConverter *encodingConverter;
    UChar *pivotBuffer;
    UChar *pivotSource;
    UChar *pivotTarget;
    int pivotLength;

};
# 175 "/var/include/libxml2/libxml/encoding.h"
 void
 xmlInitCharEncodingHandlers (void);
 void
 xmlCleanupCharEncodingHandlers (void);
 void
 xmlRegisterCharEncodingHandler (xmlCharEncodingHandlerPtr handler);
 xmlCharEncodingHandlerPtr
 xmlGetCharEncodingHandler (xmlCharEncoding enc);
 xmlCharEncodingHandlerPtr
 xmlFindCharEncodingHandler (const char *name);
 xmlCharEncodingHandlerPtr
 xmlNewCharEncodingHandler (const char *name,
                             xmlCharEncodingInputFunc input,
                             xmlCharEncodingOutputFunc output);




 int
 xmlAddEncodingAlias (const char *name,
      const char *alias);
 int
 xmlDelEncodingAlias (const char *alias);
 const char *
 xmlGetEncodingAlias (const char *alias);
 void
 xmlCleanupEncodingAliases (void);
 xmlCharEncoding
 xmlParseCharEncoding (const char *name);
 const char *
 xmlGetCharEncodingName (xmlCharEncoding enc);




 xmlCharEncoding
 xmlDetectCharEncoding (const unsigned char *in,
      int len);

 int
 xmlCharEncOutFunc (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);

 int
 xmlCharEncInFunc (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);
 int
 xmlCharEncFirstLine (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);
 int
 xmlCharEncCloseFunc (xmlCharEncodingHandler *handler);





 int
 UTF8Toisolat1 (unsigned char *out,
      int *outlen,
      const unsigned char *in,
      int *inlen);

 int
 isolat1ToUTF8 (unsigned char *out,
      int *outlen,
      const unsigned char *in,
      int *inlen);
# 799 "/var/include/libxml2/libxml/parser.h" 2
# 1 "/var/include/libxml2/libxml/xmlIO.h" 1
# 34 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputMatchCallback) (char const *filename);
# 43 "/var/include/libxml2/libxml/xmlIO.h"
typedef void * ( *xmlInputOpenCallback) (char const *filename);
# 54 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputReadCallback) (void * context, char * buffer, int len);
# 63 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputCloseCallback) (void * context);
# 80 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputMatchCallback) (char const *filename);
# 89 "/var/include/libxml2/libxml/xmlIO.h"
typedef void * ( *xmlOutputOpenCallback) (char const *filename);
# 100 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputWriteCallback) (void * context, const char * buffer,
                                       int len);
# 110 "/var/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputCloseCallback) (void * context);






# 1 "/var/include/libxml2/libxml/globals.h" 1
# 19 "/var/include/libxml2/libxml/globals.h"
# 1 "/var/include/libxml2/libxml/xmlerror.h" 1
# 20 "/var/include/libxml2/libxml/globals.h" 2
# 1 "/var/include/libxml2/libxml/SAX.h" 1
# 19 "/var/include/libxml2/libxml/SAX.h"
# 1 "/var/include/libxml2/libxml/xlink.h" 1
# 32 "/var/include/libxml2/libxml/xlink.h"
typedef xmlChar *xlinkHRef;
typedef xmlChar *xlinkRole;
typedef xmlChar *xlinkTitle;

typedef enum {
    XLINK_TYPE_NONE = 0,
    XLINK_TYPE_SIMPLE,
    XLINK_TYPE_EXTENDED,
    XLINK_TYPE_EXTENDED_SET
} xlinkType;

typedef enum {
    XLINK_SHOW_NONE = 0,
    XLINK_SHOW_NEW,
    XLINK_SHOW_EMBED,
    XLINK_SHOW_REPLACE
} xlinkShow;

typedef enum {
    XLINK_ACTUATE_NONE = 0,
    XLINK_ACTUATE_AUTO,
    XLINK_ACTUATE_ONREQUEST
} xlinkActuate;
# 64 "/var/include/libxml2/libxml/xlink.h"
typedef void (*xlinkNodeDetectFunc) (void *ctx, xmlNodePtr node);
# 81 "/var/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkSimpleLinkFunk) (void *ctx,
    xmlNodePtr node,
    const xlinkHRef href,
    const xlinkRole role,
    const xlinkTitle title);
# 106 "/var/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkExtendedLinkFunk)(void *ctx,
    xmlNodePtr node,
    int nbLocators,
    const xlinkHRef *hrefs,
    const xlinkRole *roles,
    int nbArcs,
    const xlinkRole *from,
    const xlinkRole *to,
    xlinkShow *show,
    xlinkActuate *actuate,
    int nbTitles,
    const xlinkTitle *titles,
    const xmlChar **langs);
# 134 "/var/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkExtendedLinkSetFunk) (void *ctx,
     xmlNodePtr node,
     int nbLocators,
     const xlinkHRef *hrefs,
     const xlinkRole *roles,
     int nbTitles,
     const xlinkTitle *titles,
     const xmlChar **langs);







typedef struct _xlinkHandler xlinkHandler;
typedef xlinkHandler *xlinkHandlerPtr;
struct _xlinkHandler {
    xlinkSimpleLinkFunk simple;
    xlinkExtendedLinkFunk extended;
    xlinkExtendedLinkSetFunk set;
};






 xlinkNodeDetectFunc
  xlinkGetDefaultDetect (void);
 void
  xlinkSetDefaultDetect (xlinkNodeDetectFunc func);




 xlinkHandlerPtr
  xlinkGetDefaultHandler (void);
 void
  xlinkSetDefaultHandler (xlinkHandlerPtr handler);




 xlinkType
  xlinkIsLink (xmlDocPtr doc,
      xmlNodePtr node);
# 20 "/var/include/libxml2/libxml/SAX.h" 2






 const xmlChar *
  getPublicId (void *ctx);
 const xmlChar *
  getSystemId (void *ctx);
 void
  setDocumentLocator (void *ctx,
       xmlSAXLocatorPtr loc);

 int
  getLineNumber (void *ctx);
 int
  getColumnNumber (void *ctx);

 int
  isStandalone (void *ctx);
 int
  hasInternalSubset (void *ctx);
 int
  hasExternalSubset (void *ctx);

 void
  internalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 void
  externalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 xmlEntityPtr
  getEntity (void *ctx,
       const xmlChar *name);
 xmlEntityPtr
  getParameterEntity (void *ctx,
       const xmlChar *name);
 xmlParserInputPtr
  resolveEntity (void *ctx,
       const xmlChar *publicId,
       const xmlChar *systemId);

 void
  entityDecl (void *ctx,
       const xmlChar *name,
       int type,
       const xmlChar *publicId,
       const xmlChar *systemId,
       xmlChar *content);
 void
  attributeDecl (void *ctx,
       const xmlChar *elem,
       const xmlChar *fullname,
       int type,
       int def,
       const xmlChar *defaultValue,
       xmlEnumerationPtr tree);
 void
  elementDecl (void *ctx,
       const xmlChar *name,
       int type,
       xmlElementContentPtr content);
 void
  notationDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId);
 void
  unparsedEntityDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId,
       const xmlChar *notationName);

 void
  startDocument (void *ctx);
 void
  endDocument (void *ctx);
 void
  attribute (void *ctx,
       const xmlChar *fullname,
       const xmlChar *value);
 void
  startElement (void *ctx,
       const xmlChar *fullname,
       const xmlChar **atts);
 void
  endElement (void *ctx,
       const xmlChar *name);
 void
  reference (void *ctx,
       const xmlChar *name);
 void
  characters (void *ctx,
       const xmlChar *ch,
       int len);
 void
  ignorableWhitespace (void *ctx,
       const xmlChar *ch,
       int len);
 void
  processingInstruction (void *ctx,
       const xmlChar *target,
       const xmlChar *data);
 void
  globalNamespace (void *ctx,
       const xmlChar *href,
       const xmlChar *prefix);
 void
  setNamespace (void *ctx,
       const xmlChar *name);
 xmlNsPtr
  getNamespace (void *ctx);
 int
  checkNamespace (void *ctx,
       xmlChar *nameSpace);
 void
  namespaceDecl (void *ctx,
       const xmlChar *href,
       const xmlChar *prefix);
 void
  comment (void *ctx,
       const xmlChar *value);
 void
  cdataBlock (void *ctx,
       const xmlChar *value,
       int len);


 void
  initxmlDefaultSAXHandler (xmlSAXHandlerV1 *hdlr,
       int warning);

 void
  inithtmlDefaultSAXHandler (xmlSAXHandlerV1 *hdlr);


 void
  initdocbDefaultSAXHandler (xmlSAXHandlerV1 *hdlr);
# 21 "/var/include/libxml2/libxml/globals.h" 2
# 1 "/var/include/libxml2/libxml/SAX2.h" 1
# 24 "/var/include/libxml2/libxml/SAX2.h"
 const xmlChar *
  xmlSAX2GetPublicId (void *ctx);
 const xmlChar *
  xmlSAX2GetSystemId (void *ctx);
 void
  xmlSAX2SetDocumentLocator (void *ctx,
       xmlSAXLocatorPtr loc);

 int
  xmlSAX2GetLineNumber (void *ctx);
 int
  xmlSAX2GetColumnNumber (void *ctx);

 int
  xmlSAX2IsStandalone (void *ctx);
 int
  xmlSAX2HasInternalSubset (void *ctx);
 int
  xmlSAX2HasExternalSubset (void *ctx);

 void
  xmlSAX2InternalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 void
  xmlSAX2ExternalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 xmlEntityPtr
  xmlSAX2GetEntity (void *ctx,
       const xmlChar *name);
 xmlEntityPtr
  xmlSAX2GetParameterEntity (void *ctx,
       const xmlChar *name);
 xmlParserInputPtr
  xmlSAX2ResolveEntity (void *ctx,
       const xmlChar *publicId,
       const xmlChar *systemId);

 void
  xmlSAX2EntityDecl (void *ctx,
       const xmlChar *name,
       int type,
       const xmlChar *publicId,
       const xmlChar *systemId,
       xmlChar *content);
 void
  xmlSAX2AttributeDecl (void *ctx,
       const xmlChar *elem,
       const xmlChar *fullname,
       int type,
       int def,
       const xmlChar *defaultValue,
       xmlEnumerationPtr tree);
 void
  xmlSAX2ElementDecl (void *ctx,
       const xmlChar *name,
       int type,
       xmlElementContentPtr content);
 void
  xmlSAX2NotationDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId);
 void
  xmlSAX2UnparsedEntityDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId,
       const xmlChar *notationName);

 void
  xmlSAX2StartDocument (void *ctx);
 void
  xmlSAX2EndDocument (void *ctx);

 void
  xmlSAX2StartElement (void *ctx,
       const xmlChar *fullname,
       const xmlChar **atts);
 void
  xmlSAX2EndElement (void *ctx,
       const xmlChar *name);

 void
  xmlSAX2StartElementNs (void *ctx,
       const xmlChar *localname,
       const xmlChar *prefix,
       const xmlChar *URI,
       int nb_namespaces,
       const xmlChar **namespaces,
       int nb_attributes,
       int nb_defaulted,
       const xmlChar **attributes);
 void
  xmlSAX2EndElementNs (void *ctx,
       const xmlChar *localname,
       const xmlChar *prefix,
       const xmlChar *URI);
 void
  xmlSAX2Reference (void *ctx,
       const xmlChar *name);
 void
  xmlSAX2Characters (void *ctx,
       const xmlChar *ch,
       int len);
 void
  xmlSAX2IgnorableWhitespace (void *ctx,
       const xmlChar *ch,
       int len);
 void
  xmlSAX2ProcessingInstruction (void *ctx,
       const xmlChar *target,
       const xmlChar *data);
 void
  xmlSAX2Comment (void *ctx,
       const xmlChar *value);
 void
  xmlSAX2CDataBlock (void *ctx,
       const xmlChar *value,
       int len);


 int
  xmlSAXDefaultVersion (int version);


 int
  xmlSAXVersion (xmlSAXHandler *hdlr,
       int version);
 void
  xmlSAX2InitDefaultSAXHandler (xmlSAXHandler *hdlr,
       int warning);

 void
  xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr);
 void
  htmlDefaultSAXHandlerInit (void);


 void
  xmlSAX2InitDocbDefaultSAXHandler(xmlSAXHandler *hdlr);
 void
  docbDefaultSAXHandlerInit (void);

 void
  xmlDefaultSAXHandlerInit (void);
# 22 "/var/include/libxml2/libxml/globals.h" 2
# 1 "/var/include/libxml2/libxml/xmlmemory.h" 1
# 57 "/var/include/libxml2/libxml/xmlmemory.h"
typedef void ( *xmlFreeFunc)(void *mem);
# 66 "/var/include/libxml2/libxml/xmlmemory.h"
typedef void *( *xmlMallocFunc)(size_t size);
# 77 "/var/include/libxml2/libxml/xmlmemory.h"
typedef void *( *xmlReallocFunc)(void *mem, size_t size);
# 87 "/var/include/libxml2/libxml/xmlmemory.h"
typedef char *( *xmlStrdupFunc)(const char *str);
# 103 "/var/include/libxml2/libxml/xmlmemory.h"
 int
 xmlMemSetup (xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc);
 int
 xmlMemGet (xmlFreeFunc *freeFunc,
    xmlMallocFunc *mallocFunc,
    xmlReallocFunc *reallocFunc,
    xmlStrdupFunc *strdupFunc);
 int
 xmlGcMemSetup (xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlMallocFunc mallocAtomicFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc);
 int
 xmlGcMemGet (xmlFreeFunc *freeFunc,
    xmlMallocFunc *mallocFunc,
    xmlMallocFunc *mallocAtomicFunc,
    xmlReallocFunc *reallocFunc,
    xmlStrdupFunc *strdupFunc);




 int
 xmlInitMemory (void);




 void
                xmlCleanupMemory (void);



 int
 xmlMemUsed (void);
 int
 xmlMemBlocks (void);
 void
 xmlMemDisplay (FILE *fp);
 void
 xmlMemDisplayLast(FILE *fp, long nbBytes);
 void
 xmlMemShow (FILE *fp, int nr);
 void
 xmlMemoryDump (void);
 void *
 xmlMemMalloc (size_t size) ;
 void *
 xmlMemRealloc (void *ptr,size_t size);
 void
 xmlMemFree (void *ptr);
 char *
 xmlMemoryStrdup (const char *str);
 void *
 xmlMallocLoc (size_t size, const char *file, int line) ;
 void *
 xmlReallocLoc (void *ptr, size_t size, const char *file, int line);
 void *
 xmlMallocAtomicLoc (size_t size, const char *file, int line) ;
 char *
 xmlMemStrdupLoc (const char *str, const char *file, int line);
# 23 "/var/include/libxml2/libxml/globals.h" 2





 void xmlInitGlobals(void);
 void xmlCleanupGlobals(void);
# 42 "/var/include/libxml2/libxml/globals.h"
typedef xmlParserInputBufferPtr (*xmlParserInputBufferCreateFilenameFunc) (const char *URI, xmlCharEncoding enc);
# 55 "/var/include/libxml2/libxml/globals.h"
typedef xmlOutputBufferPtr (*xmlOutputBufferCreateFilenameFunc) (const char *URI, xmlCharEncodingHandlerPtr encoder, int compression);

 xmlParserInputBufferCreateFilenameFunc
 xmlParserInputBufferCreateFilenameDefault (xmlParserInputBufferCreateFilenameFunc func);
 xmlOutputBufferCreateFilenameFunc
 xmlOutputBufferCreateFilenameDefault (xmlOutputBufferCreateFilenameFunc func);
# 106 "/var/include/libxml2/libxml/globals.h"
typedef void (*xmlRegisterNodeFunc) (xmlNodePtr node);






typedef void (*xmlDeregisterNodeFunc) (xmlNodePtr node);

typedef struct _xmlGlobalState xmlGlobalState;
typedef xmlGlobalState *xmlGlobalStatePtr;
struct _xmlGlobalState
{
 const char *xmlParserVersion;

 xmlSAXLocator xmlDefaultSAXLocator;
 xmlSAXHandlerV1 xmlDefaultSAXHandler;
 xmlSAXHandlerV1 docbDefaultSAXHandler;
 xmlSAXHandlerV1 htmlDefaultSAXHandler;

 xmlFreeFunc xmlFree;
 xmlMallocFunc xmlMalloc;
 xmlStrdupFunc xmlMemStrdup;
 xmlReallocFunc xmlRealloc;

 xmlGenericErrorFunc xmlGenericError;
 xmlStructuredErrorFunc xmlStructuredError;
 void *xmlGenericErrorContext;

 int oldXMLWDcompatibility;

 xmlBufferAllocationScheme xmlBufferAllocScheme;
 int xmlDefaultBufferSize;

 int xmlSubstituteEntitiesDefaultValue;
 int xmlDoValidityCheckingDefaultValue;
 int xmlGetWarningsDefaultValue;
 int xmlKeepBlanksDefaultValue;
 int xmlLineNumbersDefaultValue;
 int xmlLoadExtDtdDefaultValue;
 int xmlParserDebugEntities;
 int xmlPedanticParserDefaultValue;

 int xmlSaveNoEmptyTags;
 int xmlIndentTreeOutput;
 const char *xmlTreeIndentString;

 xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
 xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;

 xmlMallocFunc xmlMallocAtomic;
 xmlError xmlLastError;

 xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
 xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
};




# 1 "/var/include/libxml2/libxml/threads.h" 1
# 23 "/var/include/libxml2/libxml/threads.h"
typedef struct _xmlMutex xmlMutex;
typedef xmlMutex *xmlMutexPtr;




typedef struct _xmlRMutex xmlRMutex;
typedef xmlRMutex *xmlRMutexPtr;




# 1 "/var/include/libxml2/libxml/globals.h" 1
# 36 "/var/include/libxml2/libxml/threads.h" 2



 xmlMutexPtr
   xmlNewMutex (void);
 void
   xmlMutexLock (xmlMutexPtr tok);
 void
   xmlMutexUnlock (xmlMutexPtr tok);
 void
   xmlFreeMutex (xmlMutexPtr tok);

 xmlRMutexPtr
   xmlNewRMutex (void);
 void
   xmlRMutexLock (xmlRMutexPtr tok);
 void
   xmlRMutexUnlock (xmlRMutexPtr tok);
 void
   xmlFreeRMutex (xmlRMutexPtr tok);




 void
   xmlInitThreads (void);
 void
   xmlLockLibrary (void);
 void
   xmlUnlockLibrary(void);
 int
   xmlGetThreadId (void);
 int
   xmlIsMainThread (void);
 void
   xmlCleanupThreads(void);
 xmlGlobalStatePtr
   xmlGetGlobalState(void);
# 167 "/var/include/libxml2/libxml/globals.h" 2




 void xmlInitializeGlobalState(xmlGlobalStatePtr gs);

 void xmlThrDefSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);

 void xmlThrDefSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);

 xmlRegisterNodeFunc xmlRegisterNodeDefault(xmlRegisterNodeFunc func);
 xmlRegisterNodeFunc xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc func);
 xmlDeregisterNodeFunc xmlDeregisterNodeDefault(xmlDeregisterNodeFunc func);
 xmlDeregisterNodeFunc xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc func);

 xmlOutputBufferCreateFilenameFunc
 xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
 xmlParserInputBufferCreateFilenameFunc
 xmlThrDefParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func);
# 240 "/var/include/libxml2/libxml/globals.h"
extern xmlMallocFunc xmlMalloc;
extern xmlMallocFunc xmlMallocAtomic;
extern xmlReallocFunc xmlRealloc;
extern xmlFreeFunc xmlFree;
extern xmlStrdupFunc xmlMemStrdup;



 xmlSAXHandlerV1 * __docbDefaultSAXHandler(void);




extern xmlSAXHandlerV1 docbDefaultSAXHandler;




 xmlSAXHandlerV1 * __htmlDefaultSAXHandler(void);




extern xmlSAXHandlerV1 htmlDefaultSAXHandler;



 xmlError * __xmlLastError(void);




extern xmlError xmlLastError;
# 282 "/var/include/libxml2/libxml/globals.h"
 int * __oldXMLWDcompatibility(void);




extern int oldXMLWDcompatibility;


 xmlBufferAllocationScheme * __xmlBufferAllocScheme(void);




extern xmlBufferAllocationScheme xmlBufferAllocScheme;

 xmlBufferAllocationScheme xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);

 int * __xmlDefaultBufferSize(void);




extern int xmlDefaultBufferSize;

 int xmlThrDefDefaultBufferSize(int v);

 xmlSAXHandlerV1 * __xmlDefaultSAXHandler(void);




extern xmlSAXHandlerV1 xmlDefaultSAXHandler;


 xmlSAXLocator * __xmlDefaultSAXLocator(void);




extern xmlSAXLocator xmlDefaultSAXLocator;


 int * __xmlDoValidityCheckingDefaultValue(void);




extern int xmlDoValidityCheckingDefaultValue;

 int xmlThrDefDoValidityCheckingDefaultValue(int v);

 xmlGenericErrorFunc * __xmlGenericError(void);




extern xmlGenericErrorFunc xmlGenericError;


 xmlStructuredErrorFunc * __xmlStructuredError(void);




extern xmlStructuredErrorFunc xmlStructuredError;


 void * * __xmlGenericErrorContext(void);




extern void * xmlGenericErrorContext;


 int * __xmlGetWarningsDefaultValue(void);




extern int xmlGetWarningsDefaultValue;

 int xmlThrDefGetWarningsDefaultValue(int v);

 int * __xmlIndentTreeOutput(void);




extern int xmlIndentTreeOutput;

 int xmlThrDefIndentTreeOutput(int v);

 const char * * __xmlTreeIndentString(void);




extern const char * xmlTreeIndentString;

 const char * xmlThrDefTreeIndentString(const char * v);

 int * __xmlKeepBlanksDefaultValue(void);




extern int xmlKeepBlanksDefaultValue;

 int xmlThrDefKeepBlanksDefaultValue(int v);

 int * __xmlLineNumbersDefaultValue(void);




extern int xmlLineNumbersDefaultValue;

 int xmlThrDefLineNumbersDefaultValue(int v);

 int * __xmlLoadExtDtdDefaultValue(void);




extern int xmlLoadExtDtdDefaultValue;

 int xmlThrDefLoadExtDtdDefaultValue(int v);

 int * __xmlParserDebugEntities(void);




extern int xmlParserDebugEntities;

 int xmlThrDefParserDebugEntities(int v);

 const char * * __xmlParserVersion(void);




extern const char * xmlParserVersion;


 int * __xmlPedanticParserDefaultValue(void);




extern int xmlPedanticParserDefaultValue;

 int xmlThrDefPedanticParserDefaultValue(int v);

 int * __xmlSaveNoEmptyTags(void);




extern int xmlSaveNoEmptyTags;

 int xmlThrDefSaveNoEmptyTags(int v);

 int * __xmlSubstituteEntitiesDefaultValue(void);




extern int xmlSubstituteEntitiesDefaultValue;

 int xmlThrDefSubstituteEntitiesDefaultValue(int v);

 xmlRegisterNodeFunc * __xmlRegisterNodeDefaultValue(void);




extern xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;


 xmlDeregisterNodeFunc * __xmlDeregisterNodeDefaultValue(void);




extern xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;


 xmlParserInputBufferCreateFilenameFunc * __xmlParserInputBufferCreateFilenameValue(void);




extern xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;


 xmlOutputBufferCreateFilenameFunc * __xmlOutputBufferCreateFilenameValue(void);




extern xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
# 118 "/var/include/libxml2/libxml/xmlIO.h" 2







struct _xmlParserInputBuffer {
    void* context;
    xmlInputReadCallback readcallback;
    xmlInputCloseCallback closecallback;

    xmlCharEncodingHandlerPtr encoder;

    xmlBufferPtr buffer;
    xmlBufferPtr raw;
    int compressed;
    int error;
    unsigned long rawconsumed;
};



struct _xmlOutputBuffer {
    void* context;
    xmlOutputWriteCallback writecallback;
    xmlOutputCloseCallback closecallback;

    xmlCharEncodingHandlerPtr encoder;

    xmlBufferPtr buffer;
    xmlBufferPtr conv;
    int written;
    int error;
};





 void
 xmlCleanupInputCallbacks (void);

 int
 xmlPopInputCallbacks (void);

 void
 xmlRegisterDefaultInputCallbacks (void);
 xmlParserInputBufferPtr
 xmlAllocParserInputBuffer (xmlCharEncoding enc);

 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFilename (const char *URI,
                                                 xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFile (FILE *file,
                                                 xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFd (int fd,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateMem (const char *mem, int size,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateStatic (const char *mem, int size,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateIO (xmlInputReadCallback ioread,
       xmlInputCloseCallback ioclose,
       void *ioctx,
                                          xmlCharEncoding enc);
 int
 xmlParserInputBufferRead (xmlParserInputBufferPtr in,
       int len);
 int
 xmlParserInputBufferGrow (xmlParserInputBufferPtr in,
       int len);
 int
 xmlParserInputBufferPush (xmlParserInputBufferPtr in,
       int len,
       const char *buf);
 void
 xmlFreeParserInputBuffer (xmlParserInputBufferPtr in);
 char *
 xmlParserGetDirectory (const char *filename);

 int
 xmlRegisterInputCallbacks (xmlInputMatchCallback matchFunc,
       xmlInputOpenCallback openFunc,
       xmlInputReadCallback readFunc,
       xmlInputCloseCallback closeFunc);

xmlParserInputBufferPtr
 __xmlParserInputBufferCreateFilename(const char *URI,
          xmlCharEncoding enc);





 void
 xmlCleanupOutputCallbacks (void);
 void
 xmlRegisterDefaultOutputCallbacks(void);
 xmlOutputBufferPtr
 xmlAllocOutputBuffer (xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFilename (const char *URI,
      xmlCharEncodingHandlerPtr encoder,
      int compression);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFile (FILE *file,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateBuffer (xmlBufferPtr buffer,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFd (int fd,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateIO (xmlOutputWriteCallback iowrite,
      xmlOutputCloseCallback ioclose,
      void *ioctx,
      xmlCharEncodingHandlerPtr encoder);

 int
 xmlOutputBufferWrite (xmlOutputBufferPtr out,
      int len,
      const char *buf);
 int
 xmlOutputBufferWriteString (xmlOutputBufferPtr out,
      const char *str);
 int
 xmlOutputBufferWriteEscape (xmlOutputBufferPtr out,
      const xmlChar *str,
      xmlCharEncodingOutputFunc escaping);

 int
 xmlOutputBufferFlush (xmlOutputBufferPtr out);
 int
 xmlOutputBufferClose (xmlOutputBufferPtr out);

 int
 xmlRegisterOutputCallbacks (xmlOutputMatchCallback matchFunc,
      xmlOutputOpenCallback openFunc,
      xmlOutputWriteCallback writeFunc,
      xmlOutputCloseCallback closeFunc);

xmlOutputBufferPtr
 __xmlOutputBufferCreateFilename(const char *URI,
                              xmlCharEncodingHandlerPtr encoder,
                              int compression);



 void
 xmlRegisterHTTPPostCallbacks (void );




 xmlParserInputPtr
 xmlCheckHTTPInput (xmlParserCtxtPtr ctxt,
      xmlParserInputPtr ret);




 xmlParserInputPtr
 xmlNoNetExternalEntityLoader (const char *URL,
      const char *ID,
      xmlParserCtxtPtr ctxt);





 xmlChar *
 xmlNormalizeWindowsPath (const xmlChar *path);

 int
 xmlCheckFilename (const char *path);



 int
 xmlFileMatch (const char *filename);
 void *
 xmlFileOpen (const char *filename);
 int
 xmlFileRead (void * context,
      char * buffer,
      int len);
 int
 xmlFileClose (void * context);





 int
 xmlIOHTTPMatch (const char *filename);
 void *
 xmlIOHTTPOpen (const char *filename);

 void *
 xmlIOHTTPOpenW (const char * post_uri,
      int compression );

 int
 xmlIOHTTPRead (void * context,
      char * buffer,
      int len);
 int
 xmlIOHTTPClose (void * context);






 int
 xmlIOFTPMatch (const char *filename);
 void *
 xmlIOFTPOpen (const char *filename);
 int
 xmlIOFTPRead (void * context,
      char * buffer,
      int len);
 int
 xmlIOFTPClose (void * context);
# 800 "/var/include/libxml2/libxml/parser.h" 2
# 810 "/var/include/libxml2/libxml/parser.h"
 void
  xmlInitParser (void);
 void
  xmlCleanupParser (void);




 int
  xmlParserInputRead (xmlParserInputPtr in,
      int len);
 int
  xmlParserInputGrow (xmlParserInputPtr in,
      int len);





 xmlDocPtr
  xmlParseDoc (const xmlChar *cur);
 xmlDocPtr
  xmlParseFile (const char *filename);
 xmlDocPtr
  xmlParseMemory (const char *buffer,
      int size);

 int
  xmlSubstituteEntitiesDefault(int val);
 int
  xmlKeepBlanksDefault (int val);
 void
  xmlStopParser (xmlParserCtxtPtr ctxt);
 int
  xmlPedanticParserDefault(int val);
 int
  xmlLineNumbersDefault (int val);





 xmlDocPtr
  xmlRecoverDoc (xmlChar *cur);
 xmlDocPtr
  xmlRecoverMemory (const char *buffer,
      int size);
 xmlDocPtr
  xmlRecoverFile (const char *filename);





 int
  xmlParseDocument (xmlParserCtxtPtr ctxt);
 int
  xmlParseExtParsedEnt (xmlParserCtxtPtr ctxt);

 int
  xmlSAXUserParseFile (xmlSAXHandlerPtr sax,
      void *user_data,
      const char *filename);
 int
  xmlSAXUserParseMemory (xmlSAXHandlerPtr sax,
      void *user_data,
      const char *buffer,
      int size);
 xmlDocPtr
  xmlSAXParseDoc (xmlSAXHandlerPtr sax,
      const xmlChar *cur,
      int recovery);
 xmlDocPtr
  xmlSAXParseMemory (xmlSAXHandlerPtr sax,
      const char *buffer,
                                     int size,
      int recovery);
 xmlDocPtr
  xmlSAXParseMemoryWithData (xmlSAXHandlerPtr sax,
      const char *buffer,
                                     int size,
      int recovery,
      void *data);
 xmlDocPtr
  xmlSAXParseFile (xmlSAXHandlerPtr sax,
      const char *filename,
      int recovery);
 xmlDocPtr
  xmlSAXParseFileWithData (xmlSAXHandlerPtr sax,
      const char *filename,
      int recovery,
      void *data);
 xmlDocPtr
  xmlSAXParseEntity (xmlSAXHandlerPtr sax,
      const char *filename);
 xmlDocPtr
  xmlParseEntity (const char *filename);



 xmlDtdPtr
  xmlSAXParseDTD (xmlSAXHandlerPtr sax,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlParseDTD (const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlIOParseDTD (xmlSAXHandlerPtr sax,
      xmlParserInputBufferPtr input,
      xmlCharEncoding enc);


 int
  xmlParseBalancedChunkMemory(xmlDocPtr doc,
      xmlSAXHandlerPtr sax,
      void *user_data,
      int depth,
      const xmlChar *string,
      xmlNodePtr *lst);

 xmlParserErrors
  xmlParseInNodeContext (xmlNodePtr node,
      const char *data,
      int datalen,
      int options,
      xmlNodePtr *lst);

 int
  xmlParseBalancedChunkMemoryRecover(xmlDocPtr doc,
                     xmlSAXHandlerPtr sax,
                     void *user_data,
                     int depth,
                     const xmlChar *string,
                     xmlNodePtr *lst,
                     int recover);
 int
  xmlParseExternalEntity (xmlDocPtr doc,
      xmlSAXHandlerPtr sax,
      void *user_data,
      int depth,
      const xmlChar *URL,
      const xmlChar *ID,
      xmlNodePtr *lst);

 int
  xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx,
      const xmlChar *URL,
      const xmlChar *ID,
      xmlNodePtr *lst);




 xmlParserCtxtPtr
  xmlNewParserCtxt (void);
 int
  xmlInitParserCtxt (xmlParserCtxtPtr ctxt);
 void
  xmlClearParserCtxt (xmlParserCtxtPtr ctxt);
 void
  xmlFreeParserCtxt (xmlParserCtxtPtr ctxt);

 void
  xmlSetupParserForBuffer (xmlParserCtxtPtr ctxt,
      const xmlChar* buffer,
      const char *filename);

 xmlParserCtxtPtr
  xmlCreateDocParserCtxt (const xmlChar *cur);





 int
  xmlGetFeaturesList (int *len,
      const char **result);
 int
  xmlGetFeature (xmlParserCtxtPtr ctxt,
      const char *name,
      void *result);
 int
  xmlSetFeature (xmlParserCtxtPtr ctxt,
      const char *name,
      void *value);






 xmlParserCtxtPtr
  xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax,
      void *user_data,
      const char *chunk,
      int size,
      const char *filename);
 int
  xmlParseChunk (xmlParserCtxtPtr ctxt,
      const char *chunk,
      int size,
      int terminate);






 xmlParserCtxtPtr
  xmlCreateIOParserCtxt (xmlSAXHandlerPtr sax,
      void *user_data,
      xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      xmlCharEncoding enc);

 xmlParserInputPtr
  xmlNewIOInputStream (xmlParserCtxtPtr ctxt,
      xmlParserInputBufferPtr input,
      xmlCharEncoding enc);




 const xmlParserNodeInfo*
  xmlParserFindNodeInfo (const xmlParserCtxtPtr ctxt,
             const xmlNodePtr node);
 void
  xmlInitNodeInfoSeq (xmlParserNodeInfoSeqPtr seq);
 void
  xmlClearNodeInfoSeq (xmlParserNodeInfoSeqPtr seq);
 unsigned long
  xmlParserFindNodeInfoIndex(const xmlParserNodeInfoSeqPtr seq,
                                         const xmlNodePtr node);
 void
  xmlParserAddNodeInfo (xmlParserCtxtPtr ctxt,
      const xmlParserNodeInfoPtr info);





 void
  xmlSetExternalEntityLoader(xmlExternalEntityLoader f);
 xmlExternalEntityLoader
  xmlGetExternalEntityLoader(void);
 xmlParserInputPtr
  xmlLoadExternalEntity (const char *URL,
      const char *ID,
      xmlParserCtxtPtr ctxt);




 long
  xmlByteConsumed (xmlParserCtxtPtr ctxt);
# 1077 "/var/include/libxml2/libxml/parser.h"
typedef enum {
    XML_PARSE_RECOVER = 1<<0,
    XML_PARSE_NOENT = 1<<1,
    XML_PARSE_DTDLOAD = 1<<2,
    XML_PARSE_DTDATTR = 1<<3,
    XML_PARSE_DTDVALID = 1<<4,
    XML_PARSE_NOERROR = 1<<5,
    XML_PARSE_NOWARNING = 1<<6,
    XML_PARSE_PEDANTIC = 1<<7,
    XML_PARSE_NOBLANKS = 1<<8,
    XML_PARSE_SAX1 = 1<<9,
    XML_PARSE_XINCLUDE = 1<<10,
    XML_PARSE_NONET = 1<<11,
    XML_PARSE_NODICT = 1<<12,
    XML_PARSE_NSCLEAN = 1<<13,
    XML_PARSE_NOCDATA = 1<<14,
    XML_PARSE_NOXINCNODE= 1<<15,
    XML_PARSE_COMPACT = 1<<16,


    XML_PARSE_OLD10 = 1<<17,
    XML_PARSE_NOBASEFIX = 1<<18,
    XML_PARSE_HUGE = 1<<19,
    XML_PARSE_OLDSAX = 1<<20
} xmlParserOption;

 void
  xmlCtxtReset (xmlParserCtxtPtr ctxt);
 int
  xmlCtxtResetPush (xmlParserCtxtPtr ctxt,
      const char *chunk,
      int size,
      const char *filename,
      const char *encoding);
 int
  xmlCtxtUseOptions (xmlParserCtxtPtr ctxt,
      int options);
 xmlDocPtr
  xmlReadDoc (const xmlChar *cur,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadFile (const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadMemory (const char *buffer,
      int size,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadFd (int fd,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadIO (xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadDoc (xmlParserCtxtPtr ctxt,
      const xmlChar *cur,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadFile (xmlParserCtxtPtr ctxt,
      const char *filename,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadMemory (xmlParserCtxtPtr ctxt,
      const char *buffer,
      int size,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadFd (xmlParserCtxtPtr ctxt,
      int fd,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadIO (xmlParserCtxtPtr ctxt,
      xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      const char *URL,
      const char *encoding,
      int options);
# 1184 "/var/include/libxml2/libxml/parser.h"
typedef enum {
    XML_WITH_THREAD = 1,
    XML_WITH_TREE = 2,
    XML_WITH_OUTPUT = 3,
    XML_WITH_PUSH = 4,
    XML_WITH_READER = 5,
    XML_WITH_PATTERN = 6,
    XML_WITH_WRITER = 7,
    XML_WITH_SAX1 = 8,
    XML_WITH_FTP = 9,
    XML_WITH_HTTP = 10,
    XML_WITH_VALID = 11,
    XML_WITH_HTML = 12,
    XML_WITH_LEGACY = 13,
    XML_WITH_C14N = 14,
    XML_WITH_CATALOG = 15,
    XML_WITH_XPATH = 16,
    XML_WITH_XPTR = 17,
    XML_WITH_XINCLUDE = 18,
    XML_WITH_ICONV = 19,
    XML_WITH_ISO8859X = 20,
    XML_WITH_UNICODE = 21,
    XML_WITH_REGEXP = 22,
    XML_WITH_AUTOMATA = 23,
    XML_WITH_EXPR = 24,
    XML_WITH_SCHEMAS = 25,
    XML_WITH_SCHEMATRON = 26,
    XML_WITH_MODULES = 27,
    XML_WITH_DEBUG = 28,
    XML_WITH_DEBUG_MEM = 29,
    XML_WITH_DEBUG_RUN = 30,
    XML_WITH_ZLIB = 31,
    XML_WITH_ICU = 32,
    XML_WITH_NONE = 99999
} xmlFeature;

 int
  xmlHasFeature (xmlFeature feature);
# 8 "HttpClient.h" 2



@interface HttpClient : NSObject
{
  SSL_METHOD *meth;
  SSL_CTX *ctx;
  SSL *ssl;
  int sock;
  BOOL secure;
  int errorCode;
  NSString *authUser, *authPass;
  NSMutableArray *responseHeaders;
  int returnCode, contentLength;
  char *realm, *nonce;
  char *serverResponse;
  xmlDocPtr responseXML;
}

static const int ERROR_UNKNOWN = -1;
static const int ERROR_NONE = 0;
static const int ERROR_TCP_CONNECT = 1;
static const int ERROR_SSL_CONNECT = 2;
static const int ERROR_SOCKET = 3;
static const int ERROR_GETHOST = 4;
static const int ERROR_WRITE = 5;
static const int ERROR_READ = 6;
static const int ERROR_UNAUTH = 7;
static const int ERROR_FORBIDDEN = 8;
static const int ERROR_HTTP = 9;

-(void)initializeSSL;
-(int)getErrorCode;
-(void)setAuth: (NSString*)user password:(NSString*)pass;
-(BOOL)Connect: (NSString*)host port:(int)port secure:(BOOL)s;
-(BOOL)WriteData: (char*)buf size:(int)size;
-(int)ReadData: (char*)buf size:(int)max;
-(BOOL)getRequest: (NSString*)host port:(int)port uri:(NSString *)uri secure:(BOOL)s;
-(int) GetReturnCode;
-(char*) GetResponseBuffer;
-(xmlDocPtr) GetResponseXML;
@end
# 20 "test.c" 2
# 1 "TiVoHTTPClient.h" 1






@interface TiVoItem : NSObject
{
@public
  NSString *contentType;
  NSString *sourceFormat;
  NSString *title;
  NSString *sourceSize;
  NSString *duration;
  NSString *captureDate;
  NSString *episodeTitle;
  NSString *description;
  NSString *sourceChannel;
  NSString *sourceStation;
  BOOL highDef;
  NSString *programId;
  NSString *seriesId;
  NSString *url;
}
@end

@interface TiVoContainer : NSObject
{
@public
  NSString *title;
  int totalItems;
  NSMutableArray *items;
  NSString *contentType;
}
@end

@interface TiVoHTTPClient : NSObject
{
  NSString *host;
  int port;
  NSString *user, *password;
  BOOL secure;
  HttpClient *httpClient;
  int errorCode;
}

static int ERROR_XML_PARSE = 30;
static int ERROR_XML_XPATH = 31;
static int ERROR_XML_NO_TITLE = 32;
static int ERROR_XML_NO_ITEMS = 33;

-(void)initialize: (NSString *)host port:(int)port secure:(BOOL)s
     user:(NSString*)u password:(NSString*)p;
-(TiVoContainer *) QueryContainer: (NSString *)container;
-(int) GetErrorCode;
@end
# 21 "test.c" 2

@class MusicLibrary;
@class MLQuery;
@class MLPlaylist;
@class MLTrack;

# 1 "/var/include/dirent.h" 1
# 66 "/var/include/dirent.h"
# 1 "/var/include/sys/dirent.h" 1
# 89 "/var/include/sys/dirent.h"
#pragma pack(4)
# 101 "/var/include/sys/dirent.h"
#pragma pack()
# 115 "/var/include/sys/dirent.h"
struct dirent { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[1024]; };
# 67 "/var/include/dirent.h" 2

struct _telldir;


typedef struct {
 int __dd_fd;
 long __dd_loc;
 long __dd_size;
 char *__dd_buf;
 int __dd_len;
 long __dd_seek;
 long __dd_rewind;
 int __dd_flags;
 __darwin_pthread_mutex_t __dd_lock;
 struct _telldir *__dd_td;
} DIR;
# 102 "/var/include/dirent.h"


int alphasort(const void *, const void *) __asm("_" "alphasort" );

int closedir(DIR *) __asm("_" "closedir" );

int getdirentries(int, char *, int, long *);

DIR *opendir(const char *) __asm("_" "opendir" );

DIR *__opendir2(const char *, int) __asm("_" "__opendir2" );

struct dirent *readdir(DIR *) __asm("_" "readdir" );
int readdir_r(DIR *, struct dirent *, struct dirent **) __asm("_" "readdir_r" );
void rewinddir(DIR *) __asm("_" "rewinddir" );

int scandir(const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *)) __asm("_" "scandir" );

void seekdir(DIR *, long) __asm("_" "seekdir" );
long telldir(DIR *) __asm("_" "telldir" );

# 28 "test.c" 2

# 1 "/var/include/sys/socket.h" 1
# 77 "/var/include/sys/socket.h"
# 1 "/var/include/machine/_param.h" 1
# 33 "/var/include/machine/_param.h"
# 1 "/var/include/arm/_param.h" 1
# 34 "/var/include/machine/_param.h" 2
# 78 "/var/include/sys/socket.h" 2
# 103 "/var/include/sys/socket.h"
typedef __uint8_t sa_family_t;




typedef __darwin_socklen_t socklen_t;
# 128 "/var/include/sys/socket.h"
struct iovec {
 void * iov_base;
 size_t iov_len;
};
# 211 "/var/include/sys/socket.h"
struct linger {
 int l_onoff;
 int l_linger;
};
# 296 "/var/include/sys/socket.h"
struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};
# 309 "/var/include/sys/socket.h"
struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};
# 329 "/var/include/sys/socket.h"
struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};
# 436 "/var/include/sys/socket.h"
struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};
# 474 "/var/include/sys/socket.h"
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

};
# 551 "/var/include/sys/socket.h"
struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};





int accept(int, struct sockaddr * , socklen_t * )
  __asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * , socklen_t * )
  __asm("_" "getpeername" );
int getsockname(int, struct sockaddr * , socklen_t * )
  __asm("_" "getsockname" );
int getsockopt(int, int, int, void * , socklen_t * );
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * ,
  socklen_t * ) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int);
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );


int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);



void pfctlinput(int, struct sockaddr *);


# 30 "test.c" 2
# 1 "/var/include/netinet/in.h" 1
# 304 "/var/include/netinet/in.h"
struct in_addr {
 in_addr_t s_addr;
};
# 362 "/var/include/netinet/in.h"
struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};
# 380 "/var/include/netinet/in.h"
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};
# 459 "/var/include/netinet/in.h"
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};
# 511 "/var/include/netinet/in.h"
# 1 "/var/include/netinet6/in6.h" 1
# 158 "/var/include/netinet6/in6.h"
struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
};
# 176 "/var/include/netinet6/in6.h"
struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
# 209 "/var/include/netinet6/in6.h"
extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
# 389 "/var/include/netinet6/in6.h"
struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};




struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};
# 471 "/var/include/netinet6/in6.h"

struct cmsghdr;

extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *,
 int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);

extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
  unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);



extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);

extern int inet6_opt_init(void *, size_t);
extern int inet6_opt_append(void *, size_t, int, __uint8_t,
     size_t, __uint8_t, void **);
extern int inet6_opt_finish(void *, size_t, int);
extern int inet6_opt_set_val(void *, size_t, void *, int);

extern int inet6_opt_next(void *, size_t, int, __uint8_t *,
          size_t *, void **);
extern int inet6_opt_find(void *, size_t, int, __uint8_t,
     size_t *, void **);
extern int inet6_opt_get_val(void *, size_t, void *, int);
extern size_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, int, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);

# 512 "/var/include/netinet/in.h" 2




int bindresvport(int, struct sockaddr_in *);
struct sockaddr;
int bindresvport_sa(int, struct sockaddr *);

# 31 "test.c" 2

# 1 "/var/include/netdb.h" 1
# 107 "/var/include/netdb.h"
extern int h_errno;
# 118 "/var/include/netdb.h"
struct hostent {
 char *h_name;
 char **h_aliases;
 int h_addrtype;
 int h_length;
 char **h_addr_list;



};





struct netent {
 char *n_name;
 char **n_aliases;
 int n_addrtype;
 uint32_t n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;
 int s_port;
 char *s_proto;
};

struct protoent {
 char *p_name;
 char **p_aliases;
 int p_proto;
};

struct addrinfo {
 int ai_flags;
 int ai_family;
 int ai_socktype;
 int ai_protocol;
 socklen_t ai_addrlen;
 char *ai_canonname;
 struct sockaddr *ai_addr;
 struct addrinfo *ai_next;
};


struct rpcent {
        char *r_name;
        char **r_aliases;
        int r_number;
};
# 263 "/var/include/netdb.h"


void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endservent(void);

void freeaddrinfo(struct addrinfo *);
const char *gai_strerror(int);
int getaddrinfo(const char * , const char * ,
       const struct addrinfo * ,
       struct addrinfo ** );
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostent(void);
int getnameinfo(const struct sockaddr * , socklen_t,
         char * , socklen_t, char * ,
         socklen_t, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct netent *getnetent(void);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct protoent *getprotoent(void);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct servent *getservent(void);
void sethostent(int);

void setnetent(int);
void setprotoent(int);
void setservent(int);


void freehostent(struct hostent *);
struct hostent *gethostbyname2(const char *, int);
struct hostent *getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *getipnodebyname(const char *, int, int, int *);
struct rpcent *getrpcbyname(const char *name);



struct rpcent *getrpcbynumber(long number);

struct rpcent *getrpcent(void);
void setrpcent(int stayopen);
void endrpcent(void);
void herror(const char *);
const char *hstrerror(int);
int innetgr(const char *, const char *, const char *, const char *);
int getnetgrent(char **, char **, char **);
void endnetgrent(void);
void setnetgrent(const char *);



# 33 "test.c" 2
# 1 "/var/include/syslog.h" 1
# 23 "/var/include/syslog.h"
# 1 "/var/include/sys/syslog.h" 1
# 212 "/var/include/sys/syslog.h"

void closelog(void);
void openlog(const char *, int, int);
int setlogmask(int);
void syslog(int, const char *, ...) ;

void vsyslog(int, const char *, __darwin_va_list) ;


# 24 "/var/include/syslog.h" 2
# 34 "test.c" 2
# 42 "test.c"
UIImage *scaleAndRotateImage(UIImage *image, int w, int h, UIImageOrientation orient);

UIImage* resizeImage(UIImage* theImage, int w, int h) {

  UIImage * bigImage = theImage;
  CGSize size = bigImage.size;

  float aspectRatio = (1.0 * size.width ) / (1.0 * size.height);
  float newWidth = 0.0;
  float newHeight = 0.0;

  if (aspectRatio > 1.0) {

    newWidth = 1.0 * w;
    newHeight = size.height / (size.width / (1.0 * w));
  } else {

    newHeight = 1.0 * h;
    newWidth = size.width / (size.height / (1.0 * h));
  }

  CGRect rect = CGRectMake(0.0, 0.0, newWidth, newHeight);
  UIGraphicsBeginImageContext(rect.size);
  [bigImage drawInRect:rect];
  theImage = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  return theImage;
}

static CGImageRef GYImageCreateScaledDown(CGImageRef source, size_t width, size_t height)
{
  CGSize imageSize = CGSizeMake(CGImageGetWidth(source), CGImageGetHeight(source));

  CGFloat xRatio = imageSize.width / width;
  CGFloat yRatio = imageSize.height / height;
  CGFloat ratio = ({ __typeof__(1) __a = (1); __typeof__(({ __typeof__(xRatio) __a = (xRatio); __typeof__(yRatio) __b = (yRatio); __a < __b ? __b : __a; })) __b = (({ __typeof__(xRatio) __a = (xRatio); __typeof__(yRatio) __b = (yRatio); __a < __b ? __b : __a; })); __a < __b ? __b : __a; });

  CGSize thumbSize = CGSizeMake(imageSize.width / ratio, imageSize.height / ratio);

  CGContextRef context = CGBitmapContextCreate(((void *)0), thumbSize.width, thumbSize.height,
      CGImageGetBitsPerComponent(source), 4 * thumbSize.width, CGImageGetColorSpace(source),
      kCGImageAlphaPremultipliedFirst);

  CGContextDrawImage(context, CGRectMake(0, 0, thumbSize.width, thumbSize.height), source);
  CGImageRef result = CGBitmapContextCreateImage(context);
  CGContextRelease(context);

  return result;
}

typedef struct {
  AudioQueueRef queue;
} CustomData;

static void AQRecordCallback(void *out, AudioQueueRef outQ, AudioQueueBufferRef outBuffer,
         const AudioTimeStamp *outStartTime, UInt32 outNumPackets,
         const AudioStreamPacketDescription *outPacketsDesc)
{
  printf("AQRecordCallback invoked..\n");
  syslog(6, "AQRecordCallback invoked..");
}

void parseMP3(FILE *mp3)
{
  unsigned char header[10];
  int read;


  memset(header, 0, 10);
  read = fread(header, 1, 10, mp3);
  if (read < 10) {
    printf("Error reading header.\n");
    return;
  }

  if (strncmp("ID3", header, 3)) {
    printf("Not a valid ID3v2 tag! %s\n", header);
    return;
  }

  printf("file identifier:  %3s\n", header);

  int verMajor = (int)(header[3]);
  int verMinor = (int)(header[4]);
  printf("version:         %2d %2d\n", verMajor, verMinor);

  int flags = (int)(header[5]);
  printf("flags:            %d\n", flags);

  int size = (header[6] << 24) | (header[7] << 16) |
             (header[8] << 8) | (header[9]);
  printf("size:             %d\n", size);

  if (verMajor == 2) {

    unsigned char frame_header[6];

    read = fread(frame_header, 1, 6, mp3);
    printf("\nFrame header identifier = %3s\n", frame_header);

    int size = (frame_header[3] << 16) | (frame_header[4] << 8) | (frame_header[5]);
    printf("Frame header size = %d\n", size);

    while (size > 0) {
      unsigned char *frame = malloc(size+1);
      memset(frame, 0, size+1);
      read = fread(frame, 1, size, mp3);
      if (read < size)
        printf("Unable to read entire frame!\n");

      printf("Frame: %s\n", frame+1);

      read = fread(frame_header, 1, 6, mp3);
      printf("\nFrame header identifier = %3s\n", frame_header);

      size = (frame_header[3] << 16) | (frame_header[4] << 8) | (frame_header[5]);
      printf("Frame header size = %d\n", size);
      free(frame);
    }

  } else if (verMajor == 3) {

    if (flags & 0x40) {
      unsigned char frame_header[10];
      read = fread(frame_header, 1, 10, mp3);

      int size = (frame_header[0] << 24) | (frame_header[1] << 16) |
               (frame_header[2] << 8) | (frame_header[3]);
      printf("Extended header size = %d\n", size);
      printf("Extended Flags = %d %d\n", frame_header[4], frame_header[5]);

      int padding = (frame_header[6] << 24) | (frame_header[7] << 16) |
               (frame_header[8] << 8) | (frame_header[9]);
      printf("Size of padding = %d\n", padding);
    }

    unsigned char frame_header[10];
    memset(frame_header, 0, 10);
    read = fread(frame_header, 1, 10, mp3);

    printf("\nFrame header identifier = %4s\n", frame_header);

    int size = (frame_header[4] << 24) | (frame_header[5] << 16) |
               (frame_header[6] << 8) | (frame_header[7]);
    printf("Frame header size = %d\n", size);
    printf("Frame flags = %d %d\n", frame_header[8], frame_header[9]);

    while (size > 0) {
      unsigned char *frame = malloc(size+1);
      memset(frame, 0, size+1);
      fread(frame, 1, size, mp3);


      printf("Frame: %s\n", frame+1);

      read = fread(frame_header, 1, 10, mp3);
      printf("\nFrame header identifier = %4s\n", frame_header);

      size = (frame_header[4] << 24) | (frame_header[5] << 16) |
               (frame_header[6] << 8) | (frame_header[7]);
      printf("Frame header size = %d\n", size);
      printf("Frame flags = %d %d\n", frame_header[8], frame_header[9]);
      free(frame);
    }


  } else if (verMajor == 4) {

    if (flags & 0x40) {
      unsigned char frame_header[4];
      read = fread(frame_header, 1, 4, mp3);

      int size = (frame_header[0] << 24) | (frame_header[1] << 16) |
               (frame_header[2] << 8) | (frame_header[3]);
      printf("Extended header size = %d\n", size);

      read = fread(frame_header, 1, 1, mp3);
      int num_flags = frame_header[0];

      int i;
      for (i = 0; i < num_flags; i++) {
        read = fread(frame_header, 1, 1, mp3);
        printf("Extended flag = %d\n", frame_header[0]);
      }
    }

    unsigned char frame_header[10];
    read = fread(frame_header, 1, 10, mp3);

    printf("\nFrame header identifier = %4s\n", frame_header);

    int size = (frame_header[4] << 24) | (frame_header[5] << 16) |
               (frame_header[6] << 8) | (frame_header[7]);
    printf("Frame header size = %d\n", size);
    printf("Frame flags = %d %d\n", frame_header[8], frame_header[9]);

    while (size > 0) {
      unsigned char *frame = malloc(size+1);
      memset(frame, 0, size+1);
      fread(frame, 1, size, mp3);
      printf("Frame: %s\n", frame+1);

      read = fread(frame_header, 1, 10, mp3);
      printf("\nFrame header identifier = %4s\n", frame_header);

      size = (frame_header[4] << 24) | (frame_header[5] << 16) |
               (frame_header[6] << 8) | (frame_header[7]);
      printf("Frame header size = %d\n", size);
      printf("Frame flags = %d %d\n", frame_header[8], frame_header[9]);
      free(frame);
    }
  }
}

@interface NSNetDelegate : NSObject
{

}
- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didFindDomain:(NSString *)domainName moreComing:(BOOL)moreDomainsComing;
- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didFindService:(NSNetService *)netService moreComing:(BOOL)moreServicesComing;
- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didNotSearch:(NSDictionary *)errorInfo;
- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didRemoveDomain:(NSString *)domainName moreComing:(BOOL)moreDomainsComing;
- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)netServiceBrowser;
- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)netServiceBrowser;
@end

@implementation NSNetDelegate
{

}

- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didFindDomain:(NSString *)domainName moreComing:(BOOL)moreDomainsComing
{
  printf("didFindDomain()\n");
}

- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didFindService:(NSNetService *)netService moreComing:(BOOL)moreServicesComing
{
  printf("didFindService()\n");
}

- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didNotSearch:(NSDictionary *)errorInfo
{
  printf("didNotSearch()\n");
  for (id key in errorInfo) {
    printf("key: %s, value %d\n", key, [errorInfo objectForKey:key]);
  }
}


- (void)netServiceBrowser:(NSNetServiceBrowser *)netServiceBrowser didRemoveDomain:(NSString *)domainName moreComing:(BOOL)moreDomainsComing
{
  printf("didRemoveDomain()\n");
}


- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)netServiceBrowser
{
  printf("DidStopSearch()\n");
}

- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)netServiceBrowser
{
  printf("WillSearch()\n");
}

@end

int main(int argc, char **argv)
{
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];


  MPMediaLibrary *mLib = [MPMediaLibrary defaultMediaLibrary];
  if (mLib) {
    MPMediaQuery *mQuery = [MPMediaQuery playlistsQuery];
    if (mQuery) {
      printf("got a mQuery\n");
      NSArray *playlists = [mQuery collections];
      for (MPMediaItem *pl in playlists) {
        printf("Playlist:   %s\n", [[pl valueForProperty: MPMediaPlaylistPropertyName] UTF8String]);

        NSArray *songs = [pl items];
        for (MPMediaItem *song in songs) {
          printf("   Song:  %s\n", [[song valueForProperty: MPMediaItemPropertyTitle] UTF8String]);
          printf("   Album:  %s\n", [[song valueForProperty: MPMediaItemPropertyAlbumTitle] UTF8String]);
          printf("   Artist:  %s\n", [[song valueForProperty: MPMediaItemPropertyArtist] UTF8String]);
          printf("   Album Artist:  %s\n", [[song valueForProperty: MPMediaItemPropertyAlbumArtist] UTF8String]);
        }
      }
    }
  }
# 1077 "test.c"
  [pool release];

  exit(0);
}

UIImage *scaleAndRotateImage(UIImage *image, int w, int h, UIImageOrientation orient)
{
  CGSize size = image.size;

  float newWidth = 0.0;
  float newHeight = 0.0;

  float aspectRatio;
  aspectRatio = (1.0 * size.width ) / (1.0 * size.height);

  if (aspectRatio > 1.0) {

    newWidth = 1.0 * w;
    newHeight = size.height / (size.width / (1.0 * w));
  } else {

    newHeight = 1.0 * h;
    newWidth = size.width / (size.height / (1.0 * h));
  }

  CGImageRef imgRef = image.CGImage;

  CGFloat width = CGImageGetWidth(imgRef);
  CGFloat height = CGImageGetHeight(imgRef);

  CGAffineTransform transform = CGAffineTransformIdentity;
  CGRect bounds = CGRectMake(0, 0, newWidth, newHeight);

  CGFloat scaleRatio = bounds.size.width / width;

  CGSize imageSize = CGSizeMake(CGImageGetWidth(imgRef), CGImageGetHeight(imgRef));

  CGFloat boundHeight;
  switch(orient) {

    case UIImageOrientationUp:
      transform = CGAffineTransformIdentity;
      break;

    case UIImageOrientationUpMirrored:
      transform = CGAffineTransformMakeTranslation(imageSize.width, 0.0);
      transform = CGAffineTransformScale(transform, -1.0, 1.0);
      break;

    case UIImageOrientationDown:
      transform = CGAffineTransformMakeTranslation(imageSize.width, imageSize.height);
      transform = CGAffineTransformRotate(transform, 3.14159265358979323846264338327950288);
      break;

    case UIImageOrientationDownMirrored:
      transform = CGAffineTransformMakeTranslation(0.0, imageSize.height);
      transform = CGAffineTransformScale(transform, 1.0, -1.0);
      break;

    case UIImageOrientationLeftMirrored:
      boundHeight = bounds.size.height;
      bounds.size.height = bounds.size.width;
      bounds.size.width = boundHeight;
      transform = CGAffineTransformMakeTranslation(imageSize.height, imageSize.width);
      transform = CGAffineTransformScale(transform, -1.0, 1.0);
      transform = CGAffineTransformRotate(transform, 3.0 * 3.14159265358979323846264338327950288 / 2.0);
      break;

    case UIImageOrientationLeft:
      boundHeight = bounds.size.height;
      bounds.size.height = bounds.size.width;
      bounds.size.width = boundHeight;
      transform = CGAffineTransformMakeTranslation(0.0, imageSize.width);
      transform = CGAffineTransformRotate(transform, 3.0 * 3.14159265358979323846264338327950288 / 2.0);
      break;

    case UIImageOrientationRightMirrored:
      boundHeight = bounds.size.height;
      bounds.size.height = bounds.size.width;
      bounds.size.width = boundHeight;
      transform = CGAffineTransformMakeScale(-1.0, 1.0);
      transform = CGAffineTransformRotate(transform, 3.14159265358979323846264338327950288 / 2.0);
      break;

    case UIImageOrientationRight:
      boundHeight = bounds.size.height;
      bounds.size.height = bounds.size.width;
      bounds.size.width = boundHeight;
      transform = CGAffineTransformMakeTranslation(imageSize.height, 0.0);
      transform = CGAffineTransformRotate(transform, 3.14159265358979323846264338327950288 / 2.0);
      break;

    default:
      [NSException raise:NSInternalInconsistencyException format:@"Invalid image orientation"];

  }

  UIGraphicsBeginImageContext(bounds.size);

  CGContextRef context = UIGraphicsGetCurrentContext();

  if (orient == UIImageOrientationRight || orient == UIImageOrientationLeft) {
    CGContextScaleCTM(context, -scaleRatio, scaleRatio);
    CGContextTranslateCTM(context, -height, 0);
  }
  else {
    CGContextScaleCTM(context, scaleRatio, -scaleRatio);
    CGContextTranslateCTM(context, 0, -height);
  }

  CGContextConcatCTM(context, transform);

  CGContextDrawImage(UIGraphicsGetCurrentContext(), CGRectMake(0, 0, width, height), imgRef);
  UIImage *imageCopy = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  return imageCopy;
}
